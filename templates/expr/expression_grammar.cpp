@require(keyword_groups)
/**
 * \file
 * \copyright (c) Copyright 2024 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * How to update:
 * 1. Update the template at `templates/expr/expression_grammar.cpp`
 * 2. Update the keyword data at `templates/expr/data.yaml`
 * 3. Regenerate file with `bazel run //templates/expr:expression_grammar_cpp > packages/cxx/src/model/expression_grammar.cpp`
 * 4. Commit changes
 */


#include <boost/spirit/include/qi.hpp>

#include "zmbt/model/expression_keyword.hpp"
#include "zmbt/model/expression_grammar.hpp"

#ifndef ZMBT_KEYWORD_PREFIX
    #define ZMBT_KEYWORD_PREFIX ":"
#endif

namespace qi = boost::spirit::qi;
namespace{
using Kw = zmbt::ExpressionKeyword;
}

namespace zmbt
{

ExpressionKeywordSymbol::ExpressionKeywordSymbol()
{
    add
@for group in keyword_groups:
@for keyword in group['keywords']:
    (ZMBT_KEYWORD_PREFIX "@keyword['name']", Kw::@keyword.get('enum', keyword['name'].capitalize()))
    @if 'alias' in keyword:
    (ZMBT_KEYWORD_PREFIX "@keyword['alias']", Kw::@keyword.get('enum', keyword['name'].capitalize()))
    @end
@end
@end
    ;
}


ExpressionKeywordGrammar::ExpressionKeywordGrammar()
    : ExpressionKeywordGrammar::base_type(start)
{
    using boost::spirit::qi::eps;
    using boost::spirit::qi::_val;
    using boost::spirit::qi::_1;

    start = eps [_val = ExpressionKeyword::Undefined] >>
        (
            +keyword_symbol [_val = _1]
        )
    ;
}

} // namespace zmbt
