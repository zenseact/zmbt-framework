@require(keyword_groups)
@(from expr_helpers import Keyword)
/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * How to update:
 * 1. Update the template at `templates/expr/keyword_grammar.cpp`
 * 2. Update the keyword data at `templates/expr/keywords.yaml`
 * 3. Regenerate file with `bazel run //templates/expr:keyword_grammar_cpp > zmbt-framework/backends/cxx/src/model/keyword_grammar.cpp`
 * 4. Commit changes
 */

@(
    def get_name(keyword):
        return keyword.get('enum', keyword['name'].capitalize())
)

#include <boost/spirit/include/qi.hpp>

#include "zmbt/model/keyword.hpp"
#include "zmbt/model/keyword_grammar.hpp"

#ifndef ZMBT_KEYWORD_PREFIX
    #define ZMBT_KEYWORD_PREFIX ":"
#endif

namespace qi = boost::spirit::qi;

namespace zmbt
{

KeywordSymbol::KeywordSymbol()
{
    add
@for signature, group in keyword_groups.items():
@for keyword in Keyword.map(signature, group):
    (ZMBT_KEYWORD_PREFIX "@keyword.Name", zmbt::Keyword::@keyword.Enum)
    @if short := keyword.Short:
    (ZMBT_KEYWORD_PREFIX "@short", zmbt::Keyword::@keyword.Enum)
    @end
    @for alias in keyword.Aliases:
    (ZMBT_KEYWORD_PREFIX "@alias", zmbt::Keyword::@keyword.Enum)
    @end
@end
@end
    ;
}


KeywordGrammar::KeywordGrammar()
    : KeywordGrammar::base_type(start)
{
    using boost::spirit::qi::eps;
    using boost::spirit::qi::_val;
    using boost::spirit::qi::_1;

    start = eps [_val = Keyword::Undefined] >>
        (
            +keyword_symbol [_val = _1]
        )
    ;
}

} // namespace zmbt
