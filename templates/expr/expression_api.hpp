@require(keyword_groups)
/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * How to update:
 * 1. Update the template at `templates/expr/expression_api.hpp`
 * 2. Update the keyword data at `templates/expr/keywords.yaml`
 * 3. Regenerate file with `bazel run //templates/expr:expression_api_hpp > zmbt-framework/backends/cxx/include/zmbt/model/expression_api.hpp`
 * 4. Commit changes
 */

@(
    def get_name(keyword):
        return keyword.get('enum', keyword['name'].capitalize())

    def define_api_constant(signature, keyword):
        Key = get_name(keyword)
        if signature == 'non-template':
            classname = f"signature::{Key}"
        else:
            classname = f"signature::{signature}<Keyword::{Key}>"
        return f"static {classname} const {Key}{{}};"
)

#ifndef ZMBT_MODEL_EXPRESSION_API_HPP_
#define ZMBT_MODEL_EXPRESSION_API_HPP_

#include "expression_api_signatures.hpp"

namespace zmbt {
namespace expr {

@for signature, group in keyword_groups.items():
@for keyword in group:

/// \brief @keyword.get('brief', keyword['name'])
    @if details := keyword.get('details', None):
/// \details
        @for line in details.split('\n'):
/// @line
        @end
    @end
@define_api_constant(signature, keyword)
@for alias in keyword.get('aliases', []):
/// \brief Alias for @get_name(keyword)
static auto const @alias.capitalize() = @get_name(keyword);
@end
@end
@end

} // namespace expr
} // namespace zmbt

#endif // ZMBT_MAPPING_EXPRESSION_HPP_
