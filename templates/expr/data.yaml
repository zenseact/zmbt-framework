# (c) Copyright 2024 Zenseact AB
# SPDX-License-Identifier: Apache-2.0

keyword_groups:

  - name: identity
    api-template: ExprNoParams
    keywords:
      - name: id
        comment: Identity function

  - name: constants
    api-template: ExprNoParams
    keywords:
      - name: noop
        comment: No operation
        alias: n/a
      - name: 'true'
        comment: logical constant true
        alias: T
      - name: 'false'
        comment: logical constant false
        alias: ⊥
      - name: 'null'
        comment: constant null-value
      - name: pi
        comment: Pi constant
        alias: π
      - name: e
        comment: Euler's number
      - name: inf
        comment: Infinity
      - name: eps
        comment: Machine epsilon
      - name: nan
        enum: NaN
        comment: Not a number

  - name: simple predicates
    api-template: ExprNoParams
    keywords:
      - name: bool
        comment: Predicate on boolean transform (aka Truthy)
        alias: '?'
      - name: nil
        comment: Predicate on boolean transform (aka Falsy)

  - name: parametric predicates
    api-template: ExprOneParam
    keywords:
      - name: not
        comment: Logical complement
        alias: ¬

  - name: variadic predicates
    api-template: ExprVariadicParam
    keywords:
      - name: and
        comment: Logical conjunction
        alias: ∧
      - name: or
        comment: Logical disjunction
        alias: ∨

  - name: xor
    api-template: ExprTwoParam
    keywords:
      - name: xor
        comment: Logical exclusive or
        alias: ⊕

  - name: relation predicates
    api-template: ExprOneParam
    keywords:
      - name: eq
        comment: Is equal
        alias: '='
      - name: ne
        comment: Not equal
        alias: '≠'
      - name: lt
        comment: Lesser than
        alias: '<'
      - name: le
        comment: Lesser or equal
        alias: '≤'
      - name: gt
        comment: Greater than
        alias: '>'
      - name: ge
        comment: Greater or equal
        alias: '≥'
      - name: ni
        comment: Contains element
        enum: Ni
        alias: '∋'
      - name: not-ni
        comment: Not contains element
        enum: NotNi
        alias: '∌'

  - name: set relation predicates
    api-template: ExprSetParam
    keywords:
      - name: set-eq
        enum: SetEq
        comment: Equal as set
      - name: subset
        comment: Is subset
        alias: '⊆'
      - name: superset
        comment: is superset
        alias: '⊇'
      - name: p-subset
        enum: ProperSubset
        comment: Is proper subset
        alias: '⊂'
      - name: p-superset
        enum: ProperSuperset
        comment: Is proper superset
        alias: '⊃'
      - name: in
        comment: Element is in
        alias: '∈'
      - name: not-in
        enum: NotIn
        comment: Element is not in
        alias: '∉'

  - name: unary real fn
    api-template: ExprNoParams
    keywords:
      - name: neg
        comment: Negate
      - name: abs
        comment: Absolute value
      - name: sign
        comment: Sign
      - name: ceil
        comment: Ceil
      - name: floor
        comment: Floor
      - name: round
        comment: Round

  - name: binary real fn
    api-template: ExprOneParam
    keywords:
      - name: add
        comment: Add
        alias: '+'
      - name: sub
        comment: Substract
        alias: '-'
      - name: mul
        comment: Multiply
        alias: '*'
      - name: div
        comment: Divide
        alias: '/'
      - name: pow
        comment: To power
        alias: '**'
      - name: log
        comment: Logarithm
      - name: mod
        comment: Modulo
        alias: '%'
      - name: quot
        comment: Quotient
        alias: '//'
      - name: sqrt
        comment: Square root
      - name: sin
        comment: Sinus
      - name: cos
        comment: Cosinus
      - name: tan
        comment: Tangens
      - name: asin
        comment: Arcsin
      - name: acos
        comment: Arccos
      - name: atan
        comment: Arctan
      - name: sinh
        comment: Hyperbolic sin
      - name: cosh
        comment: Hyperbolic cos
      - name: tanh
        comment: Hyperbolic tan
      - name: asinh
        comment: Hyperbolic  arcsin
      - name: acosh
        comment: Hyperbolic arccos
      - name: atanh
        comment: Hyperbolic arctan
      - name: exp
        comment: Exponential (e^x)
      - name: erf
        comment: Error function
      - name: erfc
        comment: Error function complement
      - name: gamma
        comment: Gamma function

  - name: bitwise unary fn
    api-template: ExprNoParams
    keywords:
      - name: b-not
        comment: Bitwise not
        enum: BitNot
        alias: '~'

  - name: bitwise binary fn
    api-template: ExprOneParam
    keywords:
      - name: b-and
        comment: Bitwise and
        enum: BitAnd
        alias: '|'
      - name: b-or
        comment: Bitwise or
        enum: BitOr
        alias: '^'
      - name: b-xor
        comment: Bitwise xor
        enum: BitXor
        alias: '~'
      - name: b-lshift
        comment: Bitwise left shift
        enum: BitLshift
        alias: '<<'
      - name: b-rshift
        comment: Bitwise right shift
        enum: BitRshift
        alias: '>>'

  - name: high-order simple fn
    api-template: ExprOneParam
    keywords:
      - name: map
        comment: Apply param fn to every element of sequence
      - name: filter
        comment: Filter sequence by predicate param

  - name: high-order variadic fn
    api-template: ExprVariadicParam
    keywords:
      - name: compose
        comment: Compose functions

  - name: high-order two params
    api-template: ExprTwoParam
    keywords:
      - name: recur
        comment: apply recursion to parameter fn
      - name: apply
        comment: Apply fn to literal param
      - name: partial
        comment: Bind parameters

  - name: high-order reduce
    api-template: ExprOneOrTwoParam
    keywords:
      - name: reduce

  - name: structural no params
    api-template: ExprNoParams
    keywords:
      - name: concat
        comment: Concatenate sequences
      - name: union
        comment: Set union
        alias: '∪'
      - name: intersect
        comment: Set intersection
        alias: '∩'
      - name: set-diff
        enum: Diff
        comment: Set difference
      - name: cartesian
        comment: Cartesian product
      - name: transp
        comment: Transpose 2-d array, turning rows into columns
      - name: set
        comment: Sequence to set
      - name: list
        comment: Envelop value in array (equivalent to Repeat(1))


  - name: structural one param
    api-template: ExprOneParam
    keywords:
      - name: slide
        comment: Sliding-window iteration
      - name: stride
        comment: Striding iteration
      - name: slice
        comment: Slice sequence by "start:stop:step"
      - name: sort
        comment: Sort array by comparison parameter fn
      - name: repeat
        comment: Repeat value in array

  - name: structural one or two params
    api-template: ExprOneOrTwoParam
    keywords:
      - name: at
        comment: |
          Transform value with query pseudo-language

          Evaluation rules:
            1. int    q |-> x |-> array x at index q (negative -> reverse)
            2. str    q |-> x |-> value x at JSON Pointer q
            3. array  [q1, q2, ...] |-> x |-> [x at q1, x at q2, ...]
            4. object {"key": q1, "$q2": q3, ...} |-> x |-> {"key1": x at q1, "$(x at q2)": x at q3, ...}

          Optional second parameter - predicate P:
            At(q, P) <==> Compose(P, At(q))

  - name: reduction aliases
    api-template: ExprOneOrTwoParam
    keywords:
      - name: sum
        comment: >
          Summation reduction, real param - initial value
        alias: Σ
      - name: prod
        comment: Multiplication reduction, real param - initial value
        alias: Π

  - name: sequence properties
    api-template: ExprOneOrTwoParam
    keywords:
      - name: card
        comment: Set cardinality (uniques count)
      - name: size
        comment: Sequence size
      - name: count
        comment: Count matches
      - name: min
        comment: Min value
      - name: max
        comment: Max value
      - name: argmin
        comment: Min value index
      - name: argmax
        comment: Max value index

  - name: match combos
    api-template: ExprVariadicParam
    keywords:
      - name: any
        comment: Match any predicate
      - name: all
        comment:  Match all predicates
      - name: saturate
        comment: Saturate matches in order

  - name: regex
    api-template: ExprOneParam
    keywords:
      - name: re
        comment: Regular expression match

  - name: approx
    keywords:
      - name: approx
        comment: Approximately equal
