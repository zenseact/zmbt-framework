@require(data)
/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: @appname
 * template: @template
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */


#include <boost/spirit/include/qi.hpp>
#include <boost/json.hpp>


#include "zmbt/reflect.hpp"
#include "zmbt/model/keyword.hpp"
#include "zmbt/model/keyword_grammar.hpp"


#ifndef ZMBT_KEYWORD_PREFIX
    #define ZMBT_KEYWORD_PREFIX ":"
#endif


namespace zmbt {
namespace expr {

void tag_invoke(boost::json::value_from_tag const&, boost::json::value& v, Keyword const& kw)
{
    switch(kw)
    {

@for keyword in data.Keywords:
    case Keyword::@keyword.Enum: { v = ZMBT_KEYWORD_PREFIX "@keyword.Name"; break; }
@end
        // TODO: throw
        default: v = ":undefined";
    }
}

Keyword
tag_invoke(boost::json::value_to_tag<Keyword> const&, boost::json::value const& v)
{
    if (not v.is_string())
    {
        return Keyword::Undefined;
    }

    static KeywordGrammar const keyword_parser {};

    auto const& str = v.as_string();
    auto iter = str.cbegin();
    auto end = str.cend();
    Keyword keyword_out {Keyword::Undefined};
    static_cast<void>(boost::spirit::qi::parse(iter, end, keyword_parser, keyword_out));
    return keyword_out;
}

} // namespace expr
} // namespace zmbt
