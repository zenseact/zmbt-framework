@require(data)
/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: @appname
 * template: @template
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */

#include "zmbt/expr/keyword_codegen_type.hpp"


namespace zmbt {
namespace lang {
namespace detail {


CodegenType getCodegenType(Keyword const& k)
{
    switch (k)
    {
@for keyword in data.Constants:
    case Keyword::@keyword.Name:
@end
        return CodegenType::Const;
@for keyword in data.UnaryOperators:
    case Keyword::@keyword.Name:
@end
        return CodegenType::UnaryOp;
@for keyword in data.BinaryOperators:
    case Keyword::@keyword.Name:
@end
        return CodegenType::BinaryOp;
@for keyword in data.CodegenFns:
    case Keyword::@keyword.Name:
@end
        return CodegenType::CodegenFn;
    default:
        return CodegenType::None;
    }
}


bool isConst(Keyword const& k)
{
    switch (k)
    {
@for keyword in data.Constants:
    case Keyword::@keyword.Name:
@end
    case Keyword::C:
    case Keyword::Literal:
        return true;
    default:
        return false;
    }
}

bool isHiOrd(Keyword const& k)
{
    switch (k)
    {
@for keyword in data.HiOrdFns:
    case Keyword::@keyword.Name:
@end
        return true;
    default:
        return false;
    }
}


bool isVariadic(Keyword const& k)
{
    switch (k)
    {
@for keyword in data.where(lambda x: x.Signature == 'Variadic'):
    case Keyword::@keyword.Name:
@end
        return true;
    default:
        return false;
    }
}

bool isTernary(Keyword const& k)
{
    switch (k)
    {
@for keyword in data.where(lambda x: x.Signature == 'Ternary'):
    case Keyword::@keyword.Name:
@end
        return true;
    default:
        return false;
    }
}

} // namespace detail
} // namespace lang
} // namespace zmbt
