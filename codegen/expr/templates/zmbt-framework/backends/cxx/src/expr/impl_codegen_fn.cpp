@require(data)
/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: @appname
 * template: @template
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */

@for library in data.imports_for(data.CodegenFns):
#include <@library>
@end

#include "zmbt/expr/operator.hpp"
#include "zmbt/expr/expression.hpp"
#include "zmbt/expr/api.hpp"


namespace zmbt {

boost::json::value zmbt::lang::Expression::eval_CodegenFn(boost::json::value const& x_, EvalContext const& ctx) const
try
{
    boost::json::value x = Expression(x_).eval(nullptr, ctx++);
    boost::json::value ret{};
    switch(keyword())
    {
@for keyword in data.CodegenFns:
    case Keyword::@keyword.Name: { ret = @keyword.CodegenValue; break; }
@end
    default:
        ret = expr::Error("invalid unary math expression", prettify());
    }

    if (ret.is_number())
    {
        ret = real_to_number(boost::json::value_to<double>(ret));
    }

    return ret;
}
catch(const std::exception& e)
{
    return detail::make_error_expr(e.what(), keyword_to_str());
}


} // namespace zmbt

