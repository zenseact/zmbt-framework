@require(data)
/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/expr/templates/zmbt-framework/backends/cxx/include/zmbt/expr/keyword.hpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */

#ifndef ZMBT_EXPR_KEYWORD_ATTR_HPP_
#define ZMBT_EXPR_KEYWORD_ATTR_HPP_

#include <cstdint>
#include "zmbt/expr/keyword.hpp"

namespace zmbt {
namespace lang {


namespace attr
{
constexpr std::uint32_t is_const       = 1 <<  1;
constexpr std::uint32_t is_unary       = 1 <<  2;
constexpr std::uint32_t is_binary      = 1 <<  3;
constexpr std::uint32_t is_variadic    = 1 <<  4;
constexpr std::uint32_t is_predicate   = 1 <<  5;
constexpr std::uint32_t is_operator    = 1 <<  6;
constexpr std::uint32_t is_hiord       = 1 <<  7;
constexpr std::uint32_t is_noop        = 1 <<  8;
constexpr std::uint32_t is_literal     = 1 <<  9;
constexpr std::uint32_t is_quote       = 1 << 10;
constexpr std::uint32_t is_preproc     = 1 << 11;
constexpr std::uint32_t is_error       = 1 << 12;
constexpr std::uint32_t is_infix_pipe  = 1 << 13;
constexpr std::uint32_t is_infix_fork  = 1 << 14;
constexpr std::uint32_t is_autogen     = 1 << 15;
}


constexpr std::uint32_t attributes(Keyword const& k)
{
    using namespace attr;
    switch (k)
    {
@for keyword in data.Keywords:
    case Keyword::@keyword.Name: return @keyword.Attributes;
@end
    default:
        return 0U;
    }
}

} // namespace lang
} // namespace zmbt



#endif // ZMBT_MODEL_KEYWORD_HPP_
