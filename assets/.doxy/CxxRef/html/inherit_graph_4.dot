digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node0 [id="Node000000",label="std::false_type",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node0 -> Node1 [id="edge5_Node000000_Node000001",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 [id="Node000001",label="zmbt::has_serialization\l\< T, E \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structzmbt_1_1has__serialization.html",tooltip=" "];
  Node0 -> Node2 [id="edge6_Node000000_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="zmbt::is_const_iterable\l\< class, class \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structzmbt_1_1is__const__iterable.html",tooltip="Variable template that checks if a type has begin() and end() member functions."];
  Node0 -> Node3 [id="edge7_Node000000_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="zmbt::reflect::has\l_invocation_for\< T, E \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structzmbt_1_1reflect_1_1has__invocation__for.html",tooltip="Trait check for reflect::invocation<T>"];
}
