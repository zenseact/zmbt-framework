<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacezmbt" kind="namespace" language="C++">
    <compoundname>zmbt</compoundname>
    <innerclass refid="structzmbt_1_1base__error" prot="public">zmbt::base_error</innerclass>
    <innerclass refid="classzmbt_1_1Config" prot="public">zmbt::Config</innerclass>
    <innerclass refid="classzmbt_1_1entity__id" prot="public">zmbt::entity_id</innerclass>
    <innerclass refid="classzmbt_1_1Environment" prot="public">zmbt::Environment</innerclass>
    <innerclass refid="structzmbt_1_1environment__error" prot="public">zmbt::environment_error</innerclass>
    <innerclass refid="structzmbt_1_1EnvironmentData" prot="public">zmbt::EnvironmentData</innerclass>
    <innerclass refid="structzmbt_1_1ErrorInfo" prot="public">zmbt::ErrorInfo</innerclass>
    <innerclass refid="classzmbt_1_1ErrorOr" prot="public">zmbt::ErrorOr</innerclass>
    <innerclass refid="classzmbt_1_1Generator" prot="public">zmbt::Generator</innerclass>
    <innerclass refid="structzmbt_1_1has__bit__and" prot="public">zmbt::has_bit_and</innerclass>
    <innerclass refid="structzmbt_1_1has__bit__or" prot="public">zmbt::has_bit_or</innerclass>
    <innerclass refid="structzmbt_1_1has__bit__xor" prot="public">zmbt::has_bit_xor</innerclass>
    <innerclass refid="structzmbt_1_1has__complement" prot="public">zmbt::has_complement</innerclass>
    <innerclass refid="structzmbt_1_1has__divides" prot="public">zmbt::has_divides</innerclass>
    <innerclass refid="structzmbt_1_1has__equal__to" prot="public">zmbt::has_equal_to</innerclass>
    <innerclass refid="structzmbt_1_1has__greater" prot="public">zmbt::has_greater</innerclass>
    <innerclass refid="structzmbt_1_1has__greater__equal" prot="public">zmbt::has_greater_equal</innerclass>
    <innerclass refid="structzmbt_1_1has__left__shift" prot="public">zmbt::has_left_shift</innerclass>
    <innerclass refid="structzmbt_1_1has__less" prot="public">zmbt::has_less</innerclass>
    <innerclass refid="structzmbt_1_1has__less__equal" prot="public">zmbt::has_less_equal</innerclass>
    <innerclass refid="structzmbt_1_1has__logical__and" prot="public">zmbt::has_logical_and</innerclass>
    <innerclass refid="structzmbt_1_1has__logical__not" prot="public">zmbt::has_logical_not</innerclass>
    <innerclass refid="structzmbt_1_1has__logical__or" prot="public">zmbt::has_logical_or</innerclass>
    <innerclass refid="structzmbt_1_1has__minus" prot="public">zmbt::has_minus</innerclass>
    <innerclass refid="structzmbt_1_1has__modulus" prot="public">zmbt::has_modulus</innerclass>
    <innerclass refid="structzmbt_1_1has__multiplies" prot="public">zmbt::has_multiplies</innerclass>
    <innerclass refid="structzmbt_1_1has__negate" prot="public">zmbt::has_negate</innerclass>
    <innerclass refid="structzmbt_1_1has__not__equal__to" prot="public">zmbt::has_not_equal_to</innerclass>
    <innerclass refid="structzmbt_1_1has__plus" prot="public">zmbt::has_plus</innerclass>
    <innerclass refid="structzmbt_1_1has__right__shift" prot="public">zmbt::has_right_shift</innerclass>
    <innerclass refid="structzmbt_1_1has__serialization" prot="public">zmbt::has_serialization</innerclass>
    <innerclass refid="structzmbt_1_1ifc__args" prot="public">zmbt::ifc_args</innerclass>
    <innerclass refid="structzmbt_1_1ifc__handle" prot="public">zmbt::ifc_handle</innerclass>
    <innerclass refid="structzmbt_1_1ifc__host" prot="public">zmbt::ifc_host</innerclass>
    <innerclass refid="structzmbt_1_1ifc__pointer" prot="public">zmbt::ifc_pointer</innerclass>
    <innerclass refid="structzmbt_1_1ifc__return" prot="public">zmbt::ifc_return</innerclass>
    <innerclass refid="classzmbt_1_1InjectionTable" prot="public">zmbt::InjectionTable</innerclass>
    <innerclass refid="classzmbt_1_1interface__id" prot="public">zmbt::interface_id</innerclass>
    <innerclass refid="structzmbt_1_1is__const__iterable" prot="public">zmbt::is_const_iterable</innerclass>
    <innerclass refid="classzmbt_1_1JsonIter" prot="public">zmbt::JsonIter</innerclass>
    <innerclass refid="classzmbt_1_1JsonIterZipProdBase" prot="public">zmbt::JsonIterZipProdBase</innerclass>
    <innerclass refid="classzmbt_1_1JsonNode" prot="public">zmbt::JsonNode</innerclass>
    <innerclass refid="classzmbt_1_1JsonProdIter" prot="public">zmbt::JsonProdIter</innerclass>
    <innerclass refid="classzmbt_1_1JsonTraverse" prot="public">zmbt::JsonTraverse</innerclass>
    <innerclass refid="classzmbt_1_1JsonZipIter" prot="public">zmbt::JsonZipIter</innerclass>
    <innerclass refid="classzmbt_1_1Logger" prot="public">zmbt::Logger</innerclass>
    <innerclass refid="structzmbt_1_1model__error" prot="public">zmbt::model_error</innerclass>
    <innerclass refid="classzmbt_1_1object__id" prot="public">zmbt::object_id</innerclass>
    <innerclass refid="structzmbt_1_1output__recorder__error" prot="public">zmbt::output_recorder_error</innerclass>
    <innerclass refid="classzmbt_1_1OutputRecorder" prot="public">zmbt::OutputRecorder</innerclass>
    <innerclass refid="classzmbt_1_1Param" prot="public">zmbt::Param</innerclass>
    <innerclass refid="structzmbt_1_1PermanentEnvData" prot="public">zmbt::PermanentEnvData</innerclass>
    <innerclass refid="structzmbt_1_1serialization__error" prot="public">zmbt::serialization_error</innerclass>
    <innerclass refid="classzmbt_1_1shared__resource" prot="public">zmbt::shared_resource</innerclass>
    <innerclass refid="structzmbt_1_1StubLogger" prot="public">zmbt::StubLogger</innerclass>
    <innerclass refid="structzmbt_1_1test__assertion__failure" prot="public">zmbt::test_assertion_failure</innerclass>
    <innerclass refid="classzmbt_1_1Trigger" prot="public">zmbt::Trigger</innerclass>
    <innerclass refid="classzmbt_1_1TriggerIfc" prot="public">zmbt::TriggerIfc</innerclass>
    <innerclass refid="classzmbt_1_1TriggerObj" prot="public">zmbt::TriggerObj</innerclass>
    <innerclass refid="structzmbt_1_1type__tag" prot="public">zmbt::type_tag</innerclass>
    <innernamespace refid="namespacezmbt_1_1api">zmbt::api</innernamespace>
    <innernamespace refid="namespacezmbt_1_1application">zmbt::application</innernamespace>
    <innernamespace refid="namespacezmbt_1_1decor">zmbt::decor</innernamespace>
    <innernamespace refid="namespacezmbt_1_1expr">zmbt::expr</innernamespace>
    <innernamespace refid="namespacezmbt_1_1flags">zmbt::flags</innernamespace>
    <innernamespace refid="namespacezmbt_1_1lang">zmbt::lang</innernamespace>
    <innernamespace refid="namespacezmbt_1_1mapping">zmbt::mapping</innernamespace>
    <innernamespace refid="namespacezmbt_1_1reflect">zmbt::reflect</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacezmbt_1aaafd163b0a875cc9d902a92165f3a707" prot="public" static="no" strong="yes">
        <type></type>
        <name>FileFormat</name>
        <qualifiedname>zmbt::FileFormat</qualifiedname>
        <enumvalue id="namespacezmbt_1aaafd163b0a875cc9d902a92165f3a707a8edac36eaa8c3695d0c8c349fd9ca49f" prot="public">
          <name>DeduceFromExtension</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacezmbt_1aaafd163b0a875cc9d902a92165f3a707a0ecd11c1d7a287401d148a23bbd7a2f8" prot="public">
          <name>JSON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacezmbt_1aaafd163b0a875cc9d902a92165f3a707a9463f87bbed1fcdacfb8d40e185ca2bc" prot="public">
          <name>YAML</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacezmbt_1aaafd163b0a875cc9d902a92165f3a707a3501bb093d363810b671059b9cfed3f8" prot="public">
          <name>XML</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/file_parser.hpp" line="19" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/file_parser.hpp" bodystart="20" bodyend="25"/>
      </memberdef>
      <memberdef kind="enum" id="namespacezmbt_1aeb7d2a28ef2841e6facde47eb25fa04d" prot="public" static="no" strong="yes">
        <type>unsigned</type>
        <name>ChannelKind</name>
        <qualifiedname>zmbt::ChannelKind</qualifiedname>
        <enumvalue id="namespacezmbt_1aeb7d2a28ef2841e6facde47eb25fa04da942fc2710fabf2420410841b11be2c0a" prot="public">
          <name>Args</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacezmbt_1aeb7d2a28ef2841e6facde47eb25fa04da988fd738de9c6d177440c5dcf69e73ce" prot="public">
          <name>Return</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacezmbt_1aeb7d2a28ef2841e6facde47eb25fa04dab0d4998a26f5b5742ad38c4af8817e32" prot="public">
          <name>Exception</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacezmbt_1aeb7d2a28ef2841e6facde47eb25fa04daa3d5de3eac8bb00ae86fd1a1005f1500" prot="public">
          <name>Timestamp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacezmbt_1aeb7d2a28ef2841e6facde47eb25fa04da693e7589872f7acd3e69d831d022d6ea" prot="public">
          <name>ThreadId</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacezmbt_1aeb7d2a28ef2841e6facde47eb25fa04da4160509eece5a3862c97eedf54f0a480" prot="public">
          <name>CallCount</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacezmbt_1aeb7d2a28ef2841e6facde47eb25fa04daec0fc0100c4fc1ce4eea230c3dc10360" prot="public">
          <name>Undefined</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/channel_kind.hpp" line="16" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/channel_kind.hpp" bodystart="17" bodyend="26"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacezmbt_1a901a74522e2b063d5ce403c6c4271988" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>T</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; T, V &gt;</type>
        <definition>using zmbt::integral_constant = typedef std::integral_constant&lt;T, V&gt;</definition>
        <argsstring></argsstring>
        <name>integral_constant</name>
        <qualifiedname>zmbt::integral_constant</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="44" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1acf8b053f54be373b3230da31a3a2c9c2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>integral_constant&lt; bool, V &gt;</type>
        <definition>using zmbt::bool_constant = typedef integral_constant&lt;bool, V&gt;</definition>
        <argsstring></argsstring>
        <name>bool_constant</name>
        <qualifiedname>zmbt::bool_constant</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="47" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a25ed2422c9d72078ec824415860310b8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; T... &gt;</type>
        <definition>using zmbt::tuple = typedef std::tuple&lt;T...&gt;</definition>
        <argsstring></argsstring>
        <name>tuple</name>
        <qualifiedname>zmbt::tuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="51" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a7d8c699419dfb22df456ab692000b381" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::tuple_size&lt; T &gt;</type>
        <definition>using zmbt::tuple_size = typedef std::tuple_size&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>tuple_size</name>
        <qualifiedname>zmbt::tuple_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="54" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ad4643faf48fe586158b9bb2959dab821" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_void&lt; T &gt;</type>
        <definition>using zmbt::is_void = typedef std:: is_void &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_void</name>
        <qualifiedname>zmbt::is_void</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="62" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a9821cfacdc0f93517f673ffd466a2785" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_null_pointer&lt; T &gt;</type>
        <definition>using zmbt::is_null_pointer = typedef std:: is_null_pointer &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_null_pointer</name>
        <qualifiedname>zmbt::is_null_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="63" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a648d6606a0082656f786d2a7cf65983a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_integral&lt; T &gt;</type>
        <definition>using zmbt::is_integral = typedef std:: is_integral &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_integral</name>
        <qualifiedname>zmbt::is_integral</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="64" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ae81026d424bfa7136538c1e1e27eb606" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_floating_point&lt; T &gt;</type>
        <definition>using zmbt::is_floating_point = typedef std:: is_floating_point &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_floating_point</name>
        <qualifiedname>zmbt::is_floating_point</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="65" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ab030256d5e4d44ab196c863b63b64630" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_array&lt; T &gt;</type>
        <definition>using zmbt::is_array = typedef std:: is_array &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_array</name>
        <qualifiedname>zmbt::is_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="66" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ad251cf67e6723e75c9ebfce96ba27fd1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_enum&lt; T &gt;</type>
        <definition>using zmbt::is_enum = typedef std:: is_enum &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_enum</name>
        <qualifiedname>zmbt::is_enum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="67" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a5987d6391ca11f3902e13f80f750bcb1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_union&lt; T &gt;</type>
        <definition>using zmbt::is_union = typedef std:: is_union &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_union</name>
        <qualifiedname>zmbt::is_union</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="68" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aec880076aa7e69dde0b70bfd279e78b1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_class&lt; T &gt;</type>
        <definition>using zmbt::is_class = typedef std:: is_class &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_class</name>
        <qualifiedname>zmbt::is_class</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="69" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a59a8b8f5707a67c428e5e47572e5fda2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_function&lt; T &gt;</type>
        <definition>using zmbt::is_function = typedef std:: is_function &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_function</name>
        <qualifiedname>zmbt::is_function</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="70" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aa6e65ac86f6a881af5c1a7932061c805" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_pointer&lt; T &gt;</type>
        <definition>using zmbt::is_pointer = typedef std:: is_pointer &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_pointer</name>
        <qualifiedname>zmbt::is_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="71" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a68cd6202b65902f8c3cf5202aa95d371" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_lvalue_reference&lt; T &gt;</type>
        <definition>using zmbt::is_lvalue_reference = typedef std:: is_lvalue_reference &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_lvalue_reference</name>
        <qualifiedname>zmbt::is_lvalue_reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="72" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a49e7e07c996f881060ee2ba9f04c3f17" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_rvalue_reference&lt; T &gt;</type>
        <definition>using zmbt::is_rvalue_reference = typedef std:: is_rvalue_reference &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_rvalue_reference</name>
        <qualifiedname>zmbt::is_rvalue_reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="73" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aa6c55fef547e33c2799e2586359a9447" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_member_object_pointer&lt; T &gt;</type>
        <definition>using zmbt::is_member_object_pointer = typedef std:: is_member_object_pointer &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_member_object_pointer</name>
        <qualifiedname>zmbt::is_member_object_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="74" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a32b4627c2a25caed6ec674acfbc1b91f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_member_function_pointer&lt; T &gt;</type>
        <definition>using zmbt::is_member_function_pointer = typedef std:: is_member_function_pointer &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_member_function_pointer</name>
        <qualifiedname>zmbt::is_member_function_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="75" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ac536400705bf4d38c719c30b88151c6d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_fundamental&lt; T &gt;</type>
        <definition>using zmbt::is_fundamental = typedef std:: is_fundamental &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_fundamental</name>
        <qualifiedname>zmbt::is_fundamental</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="76" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a83ab8d48b7015d3c7ffabb416cc58dfd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_arithmetic&lt; T &gt;</type>
        <definition>using zmbt::is_arithmetic = typedef std:: is_arithmetic &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_arithmetic</name>
        <qualifiedname>zmbt::is_arithmetic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="77" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1abb3e67337fd648f44086d1d37ba478e3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_scalar&lt; T &gt;</type>
        <definition>using zmbt::is_scalar = typedef std:: is_scalar &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_scalar</name>
        <qualifiedname>zmbt::is_scalar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="78" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aa423a93f2fdad6ff5c261c71692d9cff" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_object&lt; T &gt;</type>
        <definition>using zmbt::is_object = typedef std:: is_object &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_object</name>
        <qualifiedname>zmbt::is_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="79" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a218328d6498c36fbefbc3d683b111909" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_compound&lt; T &gt;</type>
        <definition>using zmbt::is_compound = typedef std:: is_compound &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_compound</name>
        <qualifiedname>zmbt::is_compound</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="80" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aedb779e6c7935a8de19f6bce8dc1ed0a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_reference&lt; T &gt;</type>
        <definition>using zmbt::is_reference = typedef std:: is_reference &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_reference</name>
        <qualifiedname>zmbt::is_reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="81" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1acbbca9b40d3937c1452cf655efb8f95d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_member_pointer&lt; T &gt;</type>
        <definition>using zmbt::is_member_pointer = typedef std:: is_member_pointer &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_member_pointer</name>
        <qualifiedname>zmbt::is_member_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="82" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a29dcc16492d26e2a61c56de42c5d76b6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_const&lt; T &gt;</type>
        <definition>using zmbt::is_const = typedef std:: is_const &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_const</name>
        <qualifiedname>zmbt::is_const</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="83" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a1fc542b83c2ec5d77721214379c70953" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_volatile&lt; T &gt;</type>
        <definition>using zmbt::is_volatile = typedef std:: is_volatile &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_volatile</name>
        <qualifiedname>zmbt::is_volatile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="84" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1abbe23223c2bed4e5860d173df1087683" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_trivial&lt; T &gt;</type>
        <definition>using zmbt::is_trivial = typedef std:: is_trivial &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_trivial</name>
        <qualifiedname>zmbt::is_trivial</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="85" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ae61a10f36be7e743960291f738b42d2d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_trivially_copyable&lt; T &gt;</type>
        <definition>using zmbt::is_trivially_copyable = typedef std:: is_trivially_copyable &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_trivially_copyable</name>
        <qualifiedname>zmbt::is_trivially_copyable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="86" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a6e46506a7b31f27d9c8f4686bdc62603" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_standard_layout&lt; T &gt;</type>
        <definition>using zmbt::is_standard_layout = typedef std:: is_standard_layout &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_standard_layout</name>
        <qualifiedname>zmbt::is_standard_layout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="87" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a292bf7a9ca6dfef6cb27294e5e92622b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_empty&lt; T &gt;</type>
        <definition>using zmbt::is_empty = typedef std:: is_empty &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_empty</name>
        <qualifiedname>zmbt::is_empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="88" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a118a0368551cc445653e43b2ae3526cc" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_polymorphic&lt; T &gt;</type>
        <definition>using zmbt::is_polymorphic = typedef std:: is_polymorphic &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_polymorphic</name>
        <qualifiedname>zmbt::is_polymorphic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="89" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ad61da2f18f4bc7f35379edb5032b15f6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_abstract&lt; T &gt;</type>
        <definition>using zmbt::is_abstract = typedef std:: is_abstract &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_abstract</name>
        <qualifiedname>zmbt::is_abstract</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="90" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a57f0e7c7b6a045d076935b5362f31ae0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_final&lt; T &gt;</type>
        <definition>using zmbt::is_final = typedef std:: is_final &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_final</name>
        <qualifiedname>zmbt::is_final</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="91" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a58d4607adbf762b87724e6872e878f2f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_signed&lt; T &gt;</type>
        <definition>using zmbt::is_signed = typedef std:: is_signed &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_signed</name>
        <qualifiedname>zmbt::is_signed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="92" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1af46101d69a4043451329db33daaa64f6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_unsigned&lt; T &gt;</type>
        <definition>using zmbt::is_unsigned = typedef std:: is_unsigned &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_unsigned</name>
        <qualifiedname>zmbt::is_unsigned</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="93" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ad24372d774a322fc042d02cdb97e6bef" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_default_constructible&lt; T &gt;</type>
        <definition>using zmbt::is_default_constructible = typedef std:: is_default_constructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_default_constructible</name>
        <qualifiedname>zmbt::is_default_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="95" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1acb5ff2a065e6247a9cbb5ee080cf4cc8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_trivially_default_constructible&lt; T &gt;</type>
        <definition>using zmbt::is_trivially_default_constructible = typedef std:: is_trivially_default_constructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_trivially_default_constructible</name>
        <qualifiedname>zmbt::is_trivially_default_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="96" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1af525f2023d4ebcd3135b37667c0037f5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_nothrow_default_constructible&lt; T &gt;</type>
        <definition>using zmbt::is_nothrow_default_constructible = typedef std:: is_nothrow_default_constructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_nothrow_default_constructible</name>
        <qualifiedname>zmbt::is_nothrow_default_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="97" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a8b48dcbdaa3cc019ade9b8f764851cb9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_copy_constructible&lt; T &gt;</type>
        <definition>using zmbt::is_copy_constructible = typedef std:: is_copy_constructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_copy_constructible</name>
        <qualifiedname>zmbt::is_copy_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="99" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aaaf84bc20d9d4cd59c6f36433283382b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_trivially_copy_constructible&lt; T &gt;</type>
        <definition>using zmbt::is_trivially_copy_constructible = typedef std:: is_trivially_copy_constructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_trivially_copy_constructible</name>
        <qualifiedname>zmbt::is_trivially_copy_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="100" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a3dc7bec0eab06d672fb1f065e0264291" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_nothrow_copy_constructible&lt; T &gt;</type>
        <definition>using zmbt::is_nothrow_copy_constructible = typedef std:: is_nothrow_copy_constructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_nothrow_copy_constructible</name>
        <qualifiedname>zmbt::is_nothrow_copy_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="101" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a7269db5cacd94b7e09f29e7a10a389a0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_move_constructible&lt; T &gt;</type>
        <definition>using zmbt::is_move_constructible = typedef std:: is_move_constructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_move_constructible</name>
        <qualifiedname>zmbt::is_move_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="103" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a984eb4131d48d4cf46717ca0facf0647" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_trivially_move_constructible&lt; T &gt;</type>
        <definition>using zmbt::is_trivially_move_constructible = typedef std:: is_trivially_move_constructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_trivially_move_constructible</name>
        <qualifiedname>zmbt::is_trivially_move_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="104" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a77dfa7fe7d0226d4128940de350f7a0e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_nothrow_move_constructible&lt; T &gt;</type>
        <definition>using zmbt::is_nothrow_move_constructible = typedef std:: is_nothrow_move_constructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_nothrow_move_constructible</name>
        <qualifiedname>zmbt::is_nothrow_move_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="105" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a62580a589610e55901289b1eb25851ee" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_destructible&lt; T &gt;</type>
        <definition>using zmbt::is_destructible = typedef std:: is_destructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_destructible</name>
        <qualifiedname>zmbt::is_destructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="107" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a92a797e14ab37700aa6c04f05ddbe9e3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_trivially_destructible&lt; T &gt;</type>
        <definition>using zmbt::is_trivially_destructible = typedef std:: is_trivially_destructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_trivially_destructible</name>
        <qualifiedname>zmbt::is_trivially_destructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="108" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a1b5b8975ad38c0d5853167073a63d7b6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_nothrow_destructible&lt; T &gt;</type>
        <definition>using zmbt::is_nothrow_destructible = typedef std:: is_nothrow_destructible &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_nothrow_destructible</name>
        <qualifiedname>zmbt::is_nothrow_destructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="109" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1af944802469bb4df733f653b2ccc98b36" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::has_virtual_destructor&lt; T &gt;</type>
        <definition>using zmbt::has_virtual_destructor = typedef std:: has_virtual_destructor &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>has_virtual_destructor</name>
        <qualifiedname>zmbt::has_virtual_destructor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="111" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aded2af484a60acb8039fe6c1cf9cc167" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_copy_assignable&lt; T &gt;</type>
        <definition>using zmbt::is_copy_assignable = typedef std:: is_copy_assignable &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_copy_assignable</name>
        <qualifiedname>zmbt::is_copy_assignable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="113" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1abe32011f59c72a7409dee696e0c186d8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_trivially_copy_assignable&lt; T &gt;</type>
        <definition>using zmbt::is_trivially_copy_assignable = typedef std:: is_trivially_copy_assignable &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_trivially_copy_assignable</name>
        <qualifiedname>zmbt::is_trivially_copy_assignable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="114" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aa4c7a8a72a233c7c0d28495a4be09e4d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_nothrow_copy_assignable&lt; T &gt;</type>
        <definition>using zmbt::is_nothrow_copy_assignable = typedef std:: is_nothrow_copy_assignable &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_nothrow_copy_assignable</name>
        <qualifiedname>zmbt::is_nothrow_copy_assignable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="115" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a9ded33aca977c7f147a9f2006ba38373" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_move_assignable&lt; T &gt;</type>
        <definition>using zmbt::is_move_assignable = typedef std:: is_move_assignable &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_move_assignable</name>
        <qualifiedname>zmbt::is_move_assignable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="116" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aa18275c661714b307a84e48d62f864b0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_trivially_move_assignable&lt; T &gt;</type>
        <definition>using zmbt::is_trivially_move_assignable = typedef std:: is_trivially_move_assignable &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_trivially_move_assignable</name>
        <qualifiedname>zmbt::is_trivially_move_assignable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="117" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ad5899364aa69e11a9b33d51abab078aa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_nothrow_move_assignable&lt; T &gt;</type>
        <definition>using zmbt::is_nothrow_move_assignable = typedef std:: is_nothrow_move_assignable &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>is_nothrow_move_assignable</name>
        <qualifiedname>zmbt::is_nothrow_move_assignable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="118" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ae662fd652b174e28be338d00f4398413" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; A, B &gt;</type>
        <definition>using zmbt::is_same = typedef std:: is_same &lt;A, B&gt;</definition>
        <argsstring></argsstring>
        <name>is_same</name>
        <qualifiedname>zmbt::is_same</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="121" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aea46689333eea56d407a56fd193511f9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>std::is_base_of&lt; A, B &gt;</type>
        <definition>using zmbt::is_base_of = typedef std:: is_base_of &lt;A, B&gt;</definition>
        <argsstring></argsstring>
        <name>is_base_of</name>
        <qualifiedname>zmbt::is_base_of</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="122" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a2c63697364fef1c92e4c0e4ce5230e44" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>std::is_convertible&lt; A, B &gt;</type>
        <definition>using zmbt::is_convertible = typedef std:: is_convertible &lt;A, B&gt;</definition>
        <argsstring></argsstring>
        <name>is_convertible</name>
        <qualifiedname>zmbt::is_convertible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="123" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aa4e624150a5d9b0308d628e2081d3213" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>std::is_assignable&lt; A, B &gt;</type>
        <definition>using zmbt::is_assignable = typedef std:: is_assignable &lt;A, B&gt;</definition>
        <argsstring></argsstring>
        <name>is_assignable</name>
        <qualifiedname>zmbt::is_assignable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="125" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aae3ea2884bd2eb05d6e67194bcba4665" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>std::is_trivially_assignable&lt; A, B &gt;</type>
        <definition>using zmbt::is_trivially_assignable = typedef std:: is_trivially_assignable &lt;A, B&gt;</definition>
        <argsstring></argsstring>
        <name>is_trivially_assignable</name>
        <qualifiedname>zmbt::is_trivially_assignable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="126" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a8f05f563bd250c52dc11024fe95aaa80" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>std::is_nothrow_assignable&lt; A, B &gt;</type>
        <definition>using zmbt::is_nothrow_assignable = typedef std:: is_nothrow_assignable &lt;A, B&gt;</definition>
        <argsstring></argsstring>
        <name>is_nothrow_assignable</name>
        <qualifiedname>zmbt::is_nothrow_assignable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="127" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a1242ffd7ecf6107150822f890419c3fa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::remove_cv&lt; T &gt;</type>
        <definition>using zmbt::remove_cv = typedef std:: remove_cv &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>remove_cv</name>
        <qualifiedname>zmbt::remove_cv</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="130" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ae66838e2760e9772aa0f8089e984577a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename remove_cv&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::remove_cv_t = typedef typename remove_cv &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_cv_t</name>
        <qualifiedname>zmbt::remove_cv_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="130" column="41" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a2146c65e50f54491ca2f61e148f2dfb2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::remove_const&lt; T &gt;</type>
        <definition>using zmbt::remove_const = typedef std:: remove_const &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>remove_const</name>
        <qualifiedname>zmbt::remove_const</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="131" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1adc0cbaac15b6579adaefc9c5076b0c09" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename remove_const&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::remove_const_t = typedef typename remove_const &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_const_t</name>
        <qualifiedname>zmbt::remove_const_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="131" column="44" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ab651adc52beb9d3deb258cae94c7e263" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::remove_volatile&lt; T &gt;</type>
        <definition>using zmbt::remove_volatile = typedef std:: remove_volatile &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>remove_volatile</name>
        <qualifiedname>zmbt::remove_volatile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="132" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a7e856f2a7e73aa273585656cbd2ba718" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename remove_volatile&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::remove_volatile_t = typedef typename remove_volatile &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_volatile_t</name>
        <qualifiedname>zmbt::remove_volatile_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="132" column="47" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1abd95d6629a3f12f835c2ca92322648bf" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::add_cv&lt; T &gt;</type>
        <definition>using zmbt::add_cv = typedef std:: add_cv &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>add_cv</name>
        <qualifiedname>zmbt::add_cv</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="133" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ae3a71b1b268b362cf88f9955595c4049" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename add_cv&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::add_cv_t = typedef typename add_cv &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>add_cv_t</name>
        <qualifiedname>zmbt::add_cv_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="133" column="38" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a346bb9fa16f14e71e974d70afac3270f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::add_const&lt; T &gt;</type>
        <definition>using zmbt::add_const = typedef std:: add_const &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>add_const</name>
        <qualifiedname>zmbt::add_const</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="134" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a5f4d839f0a9d44eba2902751a363e2f4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename add_const&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::add_const_t = typedef typename add_const &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>add_const_t</name>
        <qualifiedname>zmbt::add_const_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="134" column="41" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aa85fce9ba908ed3557ffe1f6c1fd41f4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::add_volatile&lt; T &gt;</type>
        <definition>using zmbt::add_volatile = typedef std:: add_volatile &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>add_volatile</name>
        <qualifiedname>zmbt::add_volatile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="135" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a41b13041181e7a48f77ed855c3b30c8c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename add_volatile&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::add_volatile_t = typedef typename add_volatile &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>add_volatile_t</name>
        <qualifiedname>zmbt::add_volatile_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="135" column="44" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a2905048fdeede9f2a6c6a90a7e60639b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::remove_reference&lt; T &gt;</type>
        <definition>using zmbt::remove_reference = typedef std:: remove_reference &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>remove_reference</name>
        <qualifiedname>zmbt::remove_reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="136" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a33bf781252a75c87a3a9a8a6d4edf5b5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename remove_reference&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::remove_reference_t = typedef typename remove_reference &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_reference_t</name>
        <qualifiedname>zmbt::remove_reference_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="136" column="48" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ad03340199af8d3a9ee333bb79263be19" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::add_lvalue_reference&lt; T &gt;</type>
        <definition>using zmbt::add_lvalue_reference = typedef std:: add_lvalue_reference &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>add_lvalue_reference</name>
        <qualifiedname>zmbt::add_lvalue_reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="137" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a6d6d175c310e530e136adbc3a29680a6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename add_lvalue_reference&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::add_lvalue_reference_t = typedef typename add_lvalue_reference &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>add_lvalue_reference_t</name>
        <qualifiedname>zmbt::add_lvalue_reference_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="137" column="52" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a844dfe3be893b59450747f0a9ca5404a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::add_rvalue_reference&lt; T &gt;</type>
        <definition>using zmbt::add_rvalue_reference = typedef std:: add_rvalue_reference &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>add_rvalue_reference</name>
        <qualifiedname>zmbt::add_rvalue_reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="138" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1afb91d0a6da6e14ed270d03500aded4f9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename add_rvalue_reference&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::add_rvalue_reference_t = typedef typename add_rvalue_reference &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>add_rvalue_reference_t</name>
        <qualifiedname>zmbt::add_rvalue_reference_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="138" column="52" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a29938f612b81e9ad8e01dfb82359dc2b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::remove_pointer&lt; T &gt;</type>
        <definition>using zmbt::remove_pointer = typedef std:: remove_pointer &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>remove_pointer</name>
        <qualifiedname>zmbt::remove_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="139" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1acf58e6016192ab83d14578759033bc4b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename remove_pointer&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::remove_pointer_t = typedef typename remove_pointer &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_pointer_t</name>
        <qualifiedname>zmbt::remove_pointer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="139" column="46" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ae6c9b64b0602201c3ccebd9db0effd39" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::add_pointer&lt; T &gt;</type>
        <definition>using zmbt::add_pointer = typedef std:: add_pointer &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>add_pointer</name>
        <qualifiedname>zmbt::add_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="140" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a982a15d1381c2a31346a0ce05a52fd58" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename add_pointer&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::add_pointer_t = typedef typename add_pointer &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>add_pointer_t</name>
        <qualifiedname>zmbt::add_pointer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="140" column="43" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a99a7c14272403aa75b81202bc3686d35" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::make_signed&lt; T &gt;</type>
        <definition>using zmbt::make_signed = typedef std:: make_signed &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>make_signed</name>
        <qualifiedname>zmbt::make_signed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="141" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a1386df917a755d3878edb74cf782259b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename make_signed&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::make_signed_t = typedef typename make_signed &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>make_signed_t</name>
        <qualifiedname>zmbt::make_signed_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="141" column="43" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a1ebdbb90071a6c403d37e45b69e527d5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::make_unsigned&lt; T &gt;</type>
        <definition>using zmbt::make_unsigned = typedef std:: make_unsigned &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>make_unsigned</name>
        <qualifiedname>zmbt::make_unsigned</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="142" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ac47e479962ce1060d00da04941d3ec66" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename make_unsigned&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::make_unsigned_t = typedef typename make_unsigned &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>make_unsigned_t</name>
        <qualifiedname>zmbt::make_unsigned_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="142" column="45" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a95fc9dffe758cc98746396f36b8e1b2c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::underlying_type&lt; T &gt;</type>
        <definition>using zmbt::underlying_type = typedef std:: underlying_type &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>underlying_type</name>
        <qualifiedname>zmbt::underlying_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="144" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a05700ab45df96540eebd8a885fd70f0a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename underlying_type&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::underlying_type_t = typedef typename underlying_type &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>underlying_type_t</name>
        <qualifiedname>zmbt::underlying_type_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="144" column="47" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1acd54e34b1a20aa37ac5f5408b3705a33" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::decay&lt; T &gt;</type>
        <definition>using zmbt::decay = typedef std:: decay &lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>decay</name>
        <qualifiedname>zmbt::decay</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="146" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a530796a5986b04caa83c02c9523ec933" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename decay&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::decay_t = typedef typename decay &lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>decay_t</name>
        <qualifiedname>zmbt::decay_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="146" column="37" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a6d72687f1a7e926aa2063455d5995b8f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::is_constructible&lt; T, Args... &gt;</type>
        <definition>using zmbt::is_constructible = typedef std::is_constructible&lt;T, Args...&gt;</definition>
        <argsstring></argsstring>
        <name>is_constructible</name>
        <qualifiedname>zmbt::is_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="150" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1afe683f34f8be076e4407e534626ef846" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::is_trivially_constructible&lt; T, Args... &gt;</type>
        <definition>using zmbt::is_trivially_constructible = typedef std::is_trivially_constructible&lt;T, Args...&gt;</definition>
        <argsstring></argsstring>
        <name>is_trivially_constructible</name>
        <qualifiedname>zmbt::is_trivially_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="153" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aaea57ef2d8940a5389f18624e5cf5b21" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::is_nothrow_constructible&lt; T, Args... &gt;</type>
        <definition>using zmbt::is_nothrow_constructible = typedef std::is_nothrow_constructible&lt;T, Args...&gt;</definition>
        <argsstring></argsstring>
        <name>is_nothrow_constructible</name>
        <qualifiedname>zmbt::is_nothrow_constructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="156" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1adb1c2e5803ecfd44d19a1ef832a18385" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>remove_cv_t&lt; remove_reference_t&lt; T &gt; &gt;</type>
        <definition>using zmbt::remove_cvref_t = typedef remove_cv_t&lt;remove_reference_t&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>remove_cvref_t</name>
        <qualifiedname>zmbt::remove_cvref_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="160" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a7533b338648617ab8ca36dd75be10c6a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>remove_cv_t&lt; remove_pointer_t&lt; T &gt; &gt;</type>
        <definition>using zmbt::remove_cvptr_t = typedef remove_cv_t&lt;remove_pointer_t&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>remove_cvptr_t</name>
        <qualifiedname>zmbt::remove_cvptr_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="163" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a02637318f27e06a87734278a0dc149c0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::conditional&lt; B, T, F &gt;</type>
        <definition>using zmbt::conditional = typedef std::conditional&lt;B, T, F&gt;</definition>
        <argsstring></argsstring>
        <name>conditional</name>
        <qualifiedname>zmbt::conditional</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="173" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a8584d7b11ecf89f810b35e780d2939d8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>typename conditional&lt; B, T, F &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::conditional_t = typedef typename conditional&lt;B, T, F&gt;::type</definition>
        <argsstring></argsstring>
        <name>conditional_t</name>
        <qualifiedname>zmbt::conditional_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="176" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a8475305710368da4a58bd658f78e9a31" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>std::common_type&lt; T... &gt;</type>
        <definition>using zmbt::common_type = typedef std::common_type&lt;T...&gt;</definition>
        <argsstring></argsstring>
        <name>common_type</name>
        <qualifiedname>zmbt::common_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="179" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a6cefc2fea8887e925e0d8f73149eeb4a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>typename common_type&lt; T... &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::common_type_t = typedef typename common_type&lt;T...&gt;::type</definition>
        <argsstring></argsstring>
        <name>common_type_t</name>
        <qualifiedname>zmbt::common_type_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="182" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1adf838ab9e530a2a68a46a063f9f781de" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class R</type>
          </param>
          <param>
            <type>class...</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>mp_if&lt; mp_all&lt; C... &gt;, R &gt;</type>
        <definition>using zmbt::first_if_t = typedef mp_if&lt;mp_all&lt;C...&gt;, R&gt;</definition>
        <argsstring></argsstring>
        <name>first_if_t</name>
        <qualifiedname>zmbt::first_if_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" line="21" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a001577e490efee951651cceea2d11192" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class R</type>
          </param>
          <param>
            <type>class...</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>mp_if&lt; mp_any&lt; C... &gt;, R &gt;</type>
        <definition>using zmbt::first_if_any_t = typedef mp_if&lt;mp_any&lt;C...&gt;, R&gt;</definition>
        <argsstring></argsstring>
        <name>first_if_any_t</name>
        <qualifiedname>zmbt::first_if_any_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" line="24" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1afe5bf78bbc1ebd8859c2abc50eb00367" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class R</type>
          </param>
          <param>
            <type>class...</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>mp_if&lt; mp_not&lt; mp_any&lt; C... &gt; &gt;, R &gt;</type>
        <definition>using zmbt::first_if_none_t = typedef mp_if&lt;mp_not&lt;mp_any&lt;C...&gt; &gt;, R&gt;</definition>
        <argsstring></argsstring>
        <name>first_if_none_t</name>
        <qualifiedname>zmbt::first_if_none_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" line="27" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a48e707d47d34ece69ef0ba53ff1a3195" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>mp_or&lt; mp_similar&lt; tuple&lt;&gt;, T &gt;, mp_similar&lt; std::pair&lt; void, void &gt;, T &gt; &gt;</type>
        <definition>using zmbt::is_tuple = typedef mp_or&lt; mp_similar&lt;tuple&lt;&gt;, T&gt;, mp_similar&lt;std::pair&lt;void, void&gt;, T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_tuple</name>
        <qualifiedname>zmbt::is_tuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" line="31" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ad364dfb1d35c1dfb090b7c050085f9c3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
        </templateparamlist>
        <type>mp_transform&lt; remove_cvref_t, L &gt;</type>
        <definition>using zmbt::tuple_unqf_t = typedef mp_transform&lt;remove_cvref_t, L&gt;</definition>
        <argsstring></argsstring>
        <name>tuple_unqf_t</name>
        <qualifiedname>zmbt::tuple_unqf_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" line="35" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1af37e5dea97b10421dbaa826881f17037" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class DecayedInterface</type>
            <defval>decay_t&lt;Interface&gt;</defval>
          </param>
        </templateparamlist>
        <type>is_member_function_pointer&lt; DecayedInterface &gt;</type>
        <definition>using zmbt::ifc_is_pmf_handle = typedef is_member_function_pointer&lt;DecayedInterface&gt;</definition>
        <argsstring></argsstring>
        <name>ifc_is_pmf_handle</name>
        <qualifiedname>zmbt::ifc_is_pmf_handle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="27" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aad5f73d5007e25ee3b15d4c88e56c817" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class DecayedInterface</type>
            <defval>decay_t&lt;Interface&gt;</defval>
          </param>
        </templateparamlist>
        <type>is_member_object_pointer&lt; DecayedInterface &gt;</type>
        <definition>using zmbt::ifc_is_pmd_handle = typedef is_member_object_pointer&lt;DecayedInterface&gt;</definition>
        <argsstring></argsstring>
        <name>ifc_is_pmd_handle</name>
        <qualifiedname>zmbt::ifc_is_pmd_handle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="30" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a95bdc0925a281c866c5f2ee5db3ec4ba" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class DecayedInterface</type>
            <defval>decay_t&lt;Interface&gt;</defval>
          </param>
        </templateparamlist>
        <type>is_member_pointer&lt; DecayedInterface &gt;</type>
        <definition>using zmbt::ifc_is_member_handle = typedef is_member_pointer&lt;DecayedInterface&gt;</definition>
        <argsstring></argsstring>
        <name>ifc_is_member_handle</name>
        <qualifiedname>zmbt::ifc_is_member_handle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="33" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ad58edad3b989bf627231768d393444ad" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class DecayedInterface</type>
            <defval>decay_t&lt;Interface&gt;</defval>
          </param>
        </templateparamlist>
        <type>mp_all&lt; is_lvalue_reference&lt; Interface &gt;, is_function&lt; remove_pointer_t&lt; DecayedInterface &gt; &gt; &gt;</type>
        <definition>using zmbt::ifc_is_fn_ref = typedef mp_all&lt; is_lvalue_reference&lt;Interface&gt;, is_function&lt;remove_pointer_t&lt;DecayedInterface&gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ifc_is_fn_ref</name>
        <qualifiedname>zmbt::ifc_is_fn_ref</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="36" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a32dd13e95ffb3d78c8805055e6b27324" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class DecayedInterface</type>
            <defval>decay_t&lt;Interface&gt;</defval>
          </param>
        </templateparamlist>
        <type>mp_all&lt; is_pointer&lt; Interface &gt;, is_function&lt; remove_pointer_t&lt; DecayedInterface &gt; &gt; &gt;</type>
        <definition>using zmbt::ifc_is_fn_ptr = typedef mp_all&lt; is_pointer&lt;Interface&gt;, is_function&lt;remove_pointer_t&lt;DecayedInterface&gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ifc_is_fn_ptr</name>
        <qualifiedname>zmbt::ifc_is_fn_ptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="42" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a806a8f542ba834836bc311d97e703561" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>mp_any&lt; ifc_is_fn_ref&lt; Interface &gt;, ifc_is_fn_ptr&lt; Interface &gt; &gt;</type>
        <definition>using zmbt::ifc_is_fn_handle = typedef mp_any&lt; ifc_is_fn_ref&lt;Interface&gt;, ifc_is_fn_ptr&lt;Interface&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ifc_is_fn_handle</name>
        <qualifiedname>zmbt::ifc_is_fn_handle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="48" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ac07dcf5bf2b333dec7b98428294c762b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class InterfacePointer</type>
            <defval>remove_reference_t&lt;Interface&gt;</defval>
          </param>
          <param>
            <type>class Functor</type>
            <defval>remove_pointer_t&lt;InterfacePointer&gt;</defval>
          </param>
        </templateparamlist>
        <type>mp_all&lt; is_pointer&lt; InterfacePointer &gt;, is_class&lt; Functor &gt;, detail::support_calltraits_function&lt; Functor &gt; &gt;</type>
        <definition>using zmbt::ifc_is_functor_ptr = typedef mp_all&lt; is_pointer&lt;InterfacePointer&gt;, is_class&lt;Functor&gt;, detail::support_calltraits_function&lt;Functor&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ifc_is_functor_ptr</name>
        <qualifiedname>zmbt::ifc_is_functor_ptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="65" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a30c2f36a070d4483299a7a61b8624ce3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class Functor</type>
            <defval>remove_reference_t&lt;Interface&gt;</defval>
          </param>
        </templateparamlist>
        <type>mp_all&lt; is_reference&lt; Interface &gt;, is_class&lt; Functor &gt;, detail::support_calltraits_function&lt; Functor &gt; &gt;</type>
        <definition>using zmbt::ifc_is_functor_ref = typedef mp_all&lt; is_reference&lt;Interface&gt;, is_class&lt;Functor&gt;, detail::support_calltraits_function&lt;Functor&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ifc_is_functor_ref</name>
        <qualifiedname>zmbt::ifc_is_functor_ref</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="71" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a1d0669fe497404e0c451afc13c912daf" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>mp_any&lt; ifc_is_functor_ptr&lt; Interface &gt;, ifc_is_functor_ref&lt; Interface &gt; &gt;</type>
        <definition>using zmbt::ifc_is_functor_handle = typedef mp_any&lt; ifc_is_functor_ptr&lt;Interface&gt;, ifc_is_functor_ref&lt;Interface&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ifc_is_functor_handle</name>
        <qualifiedname>zmbt::ifc_is_functor_handle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="77" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a2181b884801190af00dc83a14ba23101" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>mp_any&lt; ifc_is_pmf_handle&lt; Interface &gt;, ifc_is_pmd_handle&lt; Interface &gt;, ifc_is_fn_handle&lt; Interface &gt;, ifc_is_functor_handle&lt; Interface &gt; &gt;</type>
        <definition>using zmbt::is_ifc_handle = typedef mp_any&lt; ifc_is_pmf_handle&lt;Interface&gt;, ifc_is_pmd_handle&lt;Interface&gt;, ifc_is_fn_handle&lt;Interface&gt;, ifc_is_functor_handle&lt;Interface&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_ifc_handle</name>
        <qualifiedname>zmbt::is_ifc_handle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="84" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a32ad1157bc3ac5ad3751b5b99d39a69b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structzmbt_1_1ifc__pointer" kindref="compound">ifc_pointer</ref>&lt; Interface &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::ifc_pointer_t = typedef typename ifc_pointer&lt;Interface&gt;::type</definition>
        <argsstring></argsstring>
        <name>ifc_pointer_t</name>
        <qualifiedname>zmbt::ifc_pointer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="175" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aa760beeda4b7374330ff0ff6490fb3b0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structzmbt_1_1ifc__handle" kindref="compound">ifc_handle</ref>&lt; Interface &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::ifc_handle_t = typedef typename ifc_handle&lt;Interface&gt;::type</definition>
        <argsstring></argsstring>
        <name>ifc_handle_t</name>
        <qualifiedname>zmbt::ifc_handle_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="189" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a00b305a6d0a2e8d8c7a3f4384f0de396" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structzmbt_1_1ifc__host" kindref="compound">ifc_host</ref>&lt; Interface &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::ifc_host_t = typedef typename ifc_host&lt;Interface&gt;::type</definition>
        <argsstring></argsstring>
        <name>ifc_host_t</name>
        <qualifiedname>zmbt::ifc_host_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="209" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1abdfb37f855c4cd2b857ab67e7efad45d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structzmbt_1_1ifc__args" kindref="compound">ifc_args</ref>&lt; Interface &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::ifc_args_t = typedef typename ifc_args&lt;Interface&gt;::type</definition>
        <argsstring></argsstring>
        <name>ifc_args_t</name>
        <qualifiedname>zmbt::ifc_args_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="242" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a6e5fa57f7e7eab4a7c92a420ba285f2c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structzmbt_1_1ifc__return" kindref="compound">ifc_return</ref>&lt; Interface &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::ifc_return_t = typedef typename ifc_return&lt;Interface&gt;::type</definition>
        <argsstring></argsstring>
        <name>ifc_return_t</name>
        <qualifiedname>zmbt::ifc_return_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="251" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a77f9d2e7252fea73ff0733fb72236fff" prot="public" static="no">
        <type>std::function&lt; boost::json::array::iterator()&gt;</type>
        <definition>using zmbt::js_array_slice_gen = typedef std::function&lt;boost::json::array::iterator()&gt;</definition>
        <argsstring></argsstring>
        <name>js_array_slice_gen</name>
        <qualifiedname>zmbt::js_array_slice_gen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" line="35" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a922fa0b64284fda7e21a77c3db861671" prot="public" static="no">
        <type>std::function&lt; boost::json::array::const_iterator()&gt;</type>
        <definition>using zmbt::js_array_slice_const_gen = typedef std::function&lt;boost::json::array::const_iterator()&gt;</definition>
        <argsstring></argsstring>
        <name>js_array_slice_const_gen</name>
        <qualifiedname>zmbt::js_array_slice_const_gen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" line="36" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a8427ef4f57b8bfa4eb2dc936bdc1893a" prot="public" static="no">
        <type>std::function&lt; boost::json::string_view::const_iterator()&gt;</type>
        <definition>using zmbt::js_string_slice_gen = typedef std::function&lt;boost::json::string_view::const_iterator()&gt;</definition>
        <argsstring></argsstring>
        <name>js_string_slice_gen</name>
        <qualifiedname>zmbt::js_string_slice_gen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" line="37" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ab647dc0e600e886ccf43dc651e871cf9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename detail::tuple_indexator&lt; T &gt;<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">::type</ref></type>
        <definition>using zmbt::indexator_for = typedef typename detail::tuple_indexator&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>indexator_for</name>
        <qualifiedname>zmbt::indexator_for</qualifiedname>
        <briefdescription>
<para>Make indexator tuple for T. </para>
        </briefdescription>
        <detaileddescription>
<para>Create std::tuple of std::integral_constant with 0, ..., N-1 values for input tuple of size N <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>input tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/tuple_indexator.hpp" line="43" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/tuple_indexator.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a3bdb91b27f10aec38703e4a79550293d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>mp_similar&lt; decay_t&lt; T &gt;, <ref refid="structzmbt_1_1type__tag" kindref="compound">type_tag</ref>&lt; void &gt; &gt;</type>
        <definition>using zmbt::is_type_tag = typedef mp_similar&lt;decay_t&lt;T&gt;, type_tag&lt;void&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_type_tag</name>
        <qualifiedname>zmbt::is_type_tag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/type_tag.hpp" line="30" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/type_tag.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a23b712b3dd964162ad2d716f70655f06" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class R</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>mp_if&lt; boost::json::is_string_like&lt; T &gt;, R &gt;</type>
        <definition>using zmbt::require_str = typedef mp_if&lt;boost::json::is_string_like&lt;T&gt;, R&gt;</definition>
        <argsstring></argsstring>
        <name>require_str</name>
        <qualifiedname>zmbt::require_str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" line="45" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a3bda0c3ef1207eec84ce8e7fb4a2701d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class R</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>mp_if&lt; mp_not&lt; boost::json::is_string_like&lt; T &gt; &gt;, R &gt;</type>
        <definition>using zmbt::require_not_str = typedef mp_if&lt;mp_not&lt;boost::json::is_string_like&lt;T&gt; &gt;, R&gt;</definition>
        <argsstring></argsstring>
        <name>require_not_str</name>
        <qualifiedname>zmbt::require_not_str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" line="48" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1aa3a53837268543a2d8769ce4e738e9f2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class R</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>mp_if&lt; detail::is_cal&lt; T &gt;, R &gt;</type>
        <definition>using zmbt::require_cal = typedef mp_if&lt;detail::is_cal&lt;T&gt;, R&gt;</definition>
        <argsstring></argsstring>
        <name>require_cal</name>
        <qualifiedname>zmbt::require_cal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" line="51" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1ab0bc6f51e9e48c452f58581e969858c8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class R</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>mp_if&lt; detail::not_cal&lt; T &gt;, R &gt;</type>
        <definition>using zmbt::require_not_cal = typedef mp_if&lt;detail::not_cal&lt;T&gt;, R&gt;</definition>
        <argsstring></argsstring>
        <name>require_not_cal</name>
        <qualifiedname>zmbt::require_not_cal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" line="54" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1acfcd2afadc54af06a87c5b6a69c690fd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class R</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>mp_if&lt; detail::maybe_obj&lt; T &gt;, R &gt;</type>
        <definition>using zmbt::require_obj = typedef mp_if&lt;detail::maybe_obj&lt;T&gt;, R&gt;</definition>
        <argsstring></argsstring>
        <name>require_obj</name>
        <qualifiedname>zmbt::require_obj</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" line="57" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1abd332c1796d05099fd6eff41cd741e17" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class O</type>
          </param>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class R</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>mp_if&lt; mp_and&lt; detail::maybe_obj&lt; O &gt;, detail::is_cal&lt; I &gt; &gt;, R &gt;</type>
        <definition>using zmbt::require_literal = typedef mp_if&lt;mp_and&lt;detail::maybe_obj&lt;O&gt;, detail::is_cal&lt;I&gt; &gt;, R&gt;</definition>
        <argsstring></argsstring>
        <name>require_literal</name>
        <qualifiedname>zmbt::require_literal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" line="60" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a0b8a0ddfffbd76f07b70297bcbb8d7e5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class R</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>mp_if&lt; boost::json::has_value_from&lt; T &gt;, R &gt;</type>
        <definition>using zmbt::require_json_from = typedef mp_if&lt;boost::json::has_value_from&lt;T&gt;, R&gt;</definition>
        <argsstring></argsstring>
        <name>require_json_from</name>
        <qualifiedname>zmbt::require_json_from</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" line="63" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacezmbt_1a81a6c94e5a821acbeb0922b72f7708a1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class R</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>mp_if&lt; mp_not&lt; boost::json::has_value_from&lt; T &gt; &gt;, R &gt;</type>
        <definition>using zmbt::require_no_json_from = typedef mp_if&lt;mp_not&lt;boost::json::has_value_from&lt;T&gt; &gt;, R&gt;</definition>
        <argsstring></argsstring>
        <name>require_no_json_from</name>
        <qualifiedname>zmbt::require_no_json_from</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" line="66" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/traits.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacezmbt_1a91c9c57e7e39e4a5505aeee68c545acc" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr size_t</type>
        <definition>constexpr size_t zmbt::tuple_size_v</definition>
        <argsstring></argsstring>
        <name>tuple_size_v</name>
        <qualifiedname>zmbt::tuple_size_v</qualifiedname>
        <initializer>= tuple_size&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="57" column="25" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1ad9fbf47db3b7de7a7d7772fcc87d54f1" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_void_v</definition>
        <argsstring></argsstring>
        <name>is_void_v</name>
        <qualifiedname>zmbt::is_void_v</qualifiedname>
        <initializer>=  is_void &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="62" column="62" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a984599efba2d3e2870397763af26a28b" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_null_pointer_v</definition>
        <argsstring></argsstring>
        <name>is_null_pointer_v</name>
        <qualifiedname>zmbt::is_null_pointer_v</qualifiedname>
        <initializer>=  is_null_pointer &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="63" column="70" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1aa4570266acd2533f3e68f2fc95d34e22" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_integral_v</definition>
        <argsstring></argsstring>
        <name>is_integral_v</name>
        <qualifiedname>zmbt::is_integral_v</qualifiedname>
        <initializer>=  is_integral &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="64" column="66" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1acc61868fe95076267b688fdbe5e24d11" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_floating_point_v</definition>
        <argsstring></argsstring>
        <name>is_floating_point_v</name>
        <qualifiedname>zmbt::is_floating_point_v</qualifiedname>
        <initializer>=  is_floating_point &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="65" column="72" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1ae06e0bcd346473239b593619cbc6a688" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_array_v</definition>
        <argsstring></argsstring>
        <name>is_array_v</name>
        <qualifiedname>zmbt::is_array_v</qualifiedname>
        <initializer>=  is_array &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="66" column="63" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a9978f522dfe4a4e0866ea4908dd91725" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_enum_v</definition>
        <argsstring></argsstring>
        <name>is_enum_v</name>
        <qualifiedname>zmbt::is_enum_v</qualifiedname>
        <initializer>=  is_enum &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="67" column="62" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a1bf41c390061c969b238515f702fdc7f" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_union_v</definition>
        <argsstring></argsstring>
        <name>is_union_v</name>
        <qualifiedname>zmbt::is_union_v</qualifiedname>
        <initializer>=  is_union &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="68" column="63" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a629e28820cfaa2f25e96d8348ebe5cc1" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_class_v</definition>
        <argsstring></argsstring>
        <name>is_class_v</name>
        <qualifiedname>zmbt::is_class_v</qualifiedname>
        <initializer>=  is_class &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="69" column="63" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a3e50aac9571cc96f867e4d6ef5928935" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_function_v</definition>
        <argsstring></argsstring>
        <name>is_function_v</name>
        <qualifiedname>zmbt::is_function_v</qualifiedname>
        <initializer>=  is_function &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="70" column="66" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a3c54fcc681e1eac009c7c2b6724bd17f" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_pointer_v</definition>
        <argsstring></argsstring>
        <name>is_pointer_v</name>
        <qualifiedname>zmbt::is_pointer_v</qualifiedname>
        <initializer>=  is_pointer &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="71" column="65" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a66a44deedbc79fc9d09be17124a0d72e" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_lvalue_reference_v</definition>
        <argsstring></argsstring>
        <name>is_lvalue_reference_v</name>
        <qualifiedname>zmbt::is_lvalue_reference_v</qualifiedname>
        <initializer>=  is_lvalue_reference &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="72" column="74" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a9be49cf0a19189791e2be6d5b8ea7b9b" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_rvalue_reference_v</definition>
        <argsstring></argsstring>
        <name>is_rvalue_reference_v</name>
        <qualifiedname>zmbt::is_rvalue_reference_v</qualifiedname>
        <initializer>=  is_rvalue_reference &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="73" column="74" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a7582c0792067297ee8587042ccc799f5" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_member_object_pointer_v</definition>
        <argsstring></argsstring>
        <name>is_member_object_pointer_v</name>
        <qualifiedname>zmbt::is_member_object_pointer_v</qualifiedname>
        <initializer>=  is_member_object_pointer &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="74" column="79" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a4f0a6928c6dea6c8501bfe575a1032da" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_member_function_pointer_v</definition>
        <argsstring></argsstring>
        <name>is_member_function_pointer_v</name>
        <qualifiedname>zmbt::is_member_function_pointer_v</qualifiedname>
        <initializer>=  is_member_function_pointer &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="75" column="81" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1aa4adc86548be513118f05740db40c45d" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_fundamental_v</definition>
        <argsstring></argsstring>
        <name>is_fundamental_v</name>
        <qualifiedname>zmbt::is_fundamental_v</qualifiedname>
        <initializer>=  is_fundamental &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="76" column="69" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a6d2ddfe36ca13e581ad5aefb3010dbcc" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_arithmetic_v</definition>
        <argsstring></argsstring>
        <name>is_arithmetic_v</name>
        <qualifiedname>zmbt::is_arithmetic_v</qualifiedname>
        <initializer>=  is_arithmetic &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="77" column="68" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1acbadec4a9c1d6359554134676f742d8c" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_scalar_v</definition>
        <argsstring></argsstring>
        <name>is_scalar_v</name>
        <qualifiedname>zmbt::is_scalar_v</qualifiedname>
        <initializer>=  is_scalar &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="78" column="64" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1aa7abeb7a065f69dd90d73e9021e6ebb6" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_object_v</definition>
        <argsstring></argsstring>
        <name>is_object_v</name>
        <qualifiedname>zmbt::is_object_v</qualifiedname>
        <initializer>=  is_object &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="79" column="64" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a3afd075564d1acfb687b679d46004f5f" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_compound_v</definition>
        <argsstring></argsstring>
        <name>is_compound_v</name>
        <qualifiedname>zmbt::is_compound_v</qualifiedname>
        <initializer>=  is_compound &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="80" column="66" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a94563fbf4f778dca7269f5ee75b15bf4" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_reference_v</definition>
        <argsstring></argsstring>
        <name>is_reference_v</name>
        <qualifiedname>zmbt::is_reference_v</qualifiedname>
        <initializer>=  is_reference &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="81" column="67" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1ac38e6def503e525aeb1746e4fdc6ab64" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_member_pointer_v</definition>
        <argsstring></argsstring>
        <name>is_member_pointer_v</name>
        <qualifiedname>zmbt::is_member_pointer_v</qualifiedname>
        <initializer>=  is_member_pointer &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="82" column="72" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1aaae406133deefd46e57090def1139f32" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_const_v</definition>
        <argsstring></argsstring>
        <name>is_const_v</name>
        <qualifiedname>zmbt::is_const_v</qualifiedname>
        <initializer>=  is_const &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="83" column="63" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a1c2cf766388548a5f2bb715c83793aa2" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_volatile_v</definition>
        <argsstring></argsstring>
        <name>is_volatile_v</name>
        <qualifiedname>zmbt::is_volatile_v</qualifiedname>
        <initializer>=  is_volatile &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="84" column="66" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1ac6dbd05bacf676cd44fecd030e157340" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_trivial_v</definition>
        <argsstring></argsstring>
        <name>is_trivial_v</name>
        <qualifiedname>zmbt::is_trivial_v</qualifiedname>
        <initializer>=  is_trivial &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="85" column="65" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a4d7b9026d50c241848e98f36f1ec5795" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_trivially_copyable_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_copyable_v</name>
        <qualifiedname>zmbt::is_trivially_copyable_v</qualifiedname>
        <initializer>=  is_trivially_copyable &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="86" column="76" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1ae5b99b42f47e2af4176ff77eede5b6ca" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_standard_layout_v</definition>
        <argsstring></argsstring>
        <name>is_standard_layout_v</name>
        <qualifiedname>zmbt::is_standard_layout_v</qualifiedname>
        <initializer>=  is_standard_layout &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="87" column="73" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a1bfeeb5564ba7cc6ef94ece79ff32d50" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_empty_v</definition>
        <argsstring></argsstring>
        <name>is_empty_v</name>
        <qualifiedname>zmbt::is_empty_v</qualifiedname>
        <initializer>=  is_empty &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="88" column="63" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1afeb3e7fa892b65aa15c289bcf2c3a064" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_polymorphic_v</definition>
        <argsstring></argsstring>
        <name>is_polymorphic_v</name>
        <qualifiedname>zmbt::is_polymorphic_v</qualifiedname>
        <initializer>=  is_polymorphic &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="89" column="69" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a92a8be2d24f4c0409da2c17bc5822dcf" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_abstract_v</definition>
        <argsstring></argsstring>
        <name>is_abstract_v</name>
        <qualifiedname>zmbt::is_abstract_v</qualifiedname>
        <initializer>=  is_abstract &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="90" column="66" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a93dc31eb25acac5909a2ec909c9bc71b" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_final_v</definition>
        <argsstring></argsstring>
        <name>is_final_v</name>
        <qualifiedname>zmbt::is_final_v</qualifiedname>
        <initializer>=  is_final &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="91" column="63" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a4d1aecf78e4d9cc543e069b4e846be9e" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_signed_v</definition>
        <argsstring></argsstring>
        <name>is_signed_v</name>
        <qualifiedname>zmbt::is_signed_v</qualifiedname>
        <initializer>=  is_signed &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="92" column="64" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a60427039e17c40d609c10ebb1f71f543" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_unsigned_v</definition>
        <argsstring></argsstring>
        <name>is_unsigned_v</name>
        <qualifiedname>zmbt::is_unsigned_v</qualifiedname>
        <initializer>=  is_unsigned &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="93" column="66" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1abb4d1320e675a0c4b386a15392117869" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_default_constructible_v</definition>
        <argsstring></argsstring>
        <name>is_default_constructible_v</name>
        <qualifiedname>zmbt::is_default_constructible_v</qualifiedname>
        <initializer>=  is_default_constructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="95" column="79" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1aeccc3d4ad044054e517a1f67d78f673d" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_trivially_default_constructible_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_default_constructible_v</name>
        <qualifiedname>zmbt::is_trivially_default_constructible_v</qualifiedname>
        <initializer>=  is_trivially_default_constructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="96" column="89" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a84b242399876dd0c629a7e8cac7ea465" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_nothrow_default_constructible_v</definition>
        <argsstring></argsstring>
        <name>is_nothrow_default_constructible_v</name>
        <qualifiedname>zmbt::is_nothrow_default_constructible_v</qualifiedname>
        <initializer>=  is_nothrow_default_constructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="97" column="87" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a0e2498feb74e3d91753ee1ad72034d57" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_copy_constructible_v</definition>
        <argsstring></argsstring>
        <name>is_copy_constructible_v</name>
        <qualifiedname>zmbt::is_copy_constructible_v</qualifiedname>
        <initializer>=  is_copy_constructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="99" column="76" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a9bd7c2a3bbdeb4d389f5c53670123519" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_trivially_copy_constructible_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_copy_constructible_v</name>
        <qualifiedname>zmbt::is_trivially_copy_constructible_v</qualifiedname>
        <initializer>=  is_trivially_copy_constructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="100" column="86" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a5fb15b0d4e9adc25ce334119984d49a3" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_nothrow_copy_constructible_v</definition>
        <argsstring></argsstring>
        <name>is_nothrow_copy_constructible_v</name>
        <qualifiedname>zmbt::is_nothrow_copy_constructible_v</qualifiedname>
        <initializer>=  is_nothrow_copy_constructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="101" column="84" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a9d837bba28ce5634d8efdd7a2e6ef308" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_move_constructible_v</definition>
        <argsstring></argsstring>
        <name>is_move_constructible_v</name>
        <qualifiedname>zmbt::is_move_constructible_v</qualifiedname>
        <initializer>=  is_move_constructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="103" column="76" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1af96b1d1d95ceeb25edfbe94a0c67535a" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_trivially_move_constructible_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_move_constructible_v</name>
        <qualifiedname>zmbt::is_trivially_move_constructible_v</qualifiedname>
        <initializer>=  is_trivially_move_constructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="104" column="86" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a26c60cabb2edb1a2e0fad7baf1703f68" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_nothrow_move_constructible_v</definition>
        <argsstring></argsstring>
        <name>is_nothrow_move_constructible_v</name>
        <qualifiedname>zmbt::is_nothrow_move_constructible_v</qualifiedname>
        <initializer>=  is_nothrow_move_constructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="105" column="84" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a4876d0889867c5a16fbf1628446e6873" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_destructible_v</definition>
        <argsstring></argsstring>
        <name>is_destructible_v</name>
        <qualifiedname>zmbt::is_destructible_v</qualifiedname>
        <initializer>=  is_destructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="107" column="70" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a66dc93eb1614f27cdf38235ba67420c8" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_trivially_destructible_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_destructible_v</name>
        <qualifiedname>zmbt::is_trivially_destructible_v</qualifiedname>
        <initializer>=  is_trivially_destructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="108" column="80" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a4a6c424af7f25955daa920f5f4270de0" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_nothrow_destructible_v</definition>
        <argsstring></argsstring>
        <name>is_nothrow_destructible_v</name>
        <qualifiedname>zmbt::is_nothrow_destructible_v</qualifiedname>
        <initializer>=  is_nothrow_destructible &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="109" column="78" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a201b218dca9f873f7846b9f62c64bcf0" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::has_virtual_destructor_v</definition>
        <argsstring></argsstring>
        <name>has_virtual_destructor_v</name>
        <qualifiedname>zmbt::has_virtual_destructor_v</qualifiedname>
        <initializer>=  has_virtual_destructor &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="111" column="77" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a999e12d70fd13b1d190dc241f299959a" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_copy_assignable_v</definition>
        <argsstring></argsstring>
        <name>is_copy_assignable_v</name>
        <qualifiedname>zmbt::is_copy_assignable_v</qualifiedname>
        <initializer>=  is_copy_assignable &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="113" column="73" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1aef8352da11b5fb03b5ff0f42b69bf81b" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_trivially_copy_assignable_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_copy_assignable_v</name>
        <qualifiedname>zmbt::is_trivially_copy_assignable_v</qualifiedname>
        <initializer>=  is_trivially_copy_assignable &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="114" column="83" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1ad5ca7dea639c226d9a63f53668ff2bab" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_nothrow_copy_assignable_v</definition>
        <argsstring></argsstring>
        <name>is_nothrow_copy_assignable_v</name>
        <qualifiedname>zmbt::is_nothrow_copy_assignable_v</qualifiedname>
        <initializer>=  is_nothrow_copy_assignable &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="115" column="81" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a6e43b46dad7895a5f067ea0411b2439a" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_move_assignable_v</definition>
        <argsstring></argsstring>
        <name>is_move_assignable_v</name>
        <qualifiedname>zmbt::is_move_assignable_v</qualifiedname>
        <initializer>=  is_move_assignable &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="116" column="73" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a2b6e47585b3c3eefe71cd33e127b4467" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_trivially_move_assignable_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_move_assignable_v</name>
        <qualifiedname>zmbt::is_trivially_move_assignable_v</qualifiedname>
        <initializer>=  is_trivially_move_assignable &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="117" column="83" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1ad7036e9fa92efa6a8b7440dd3c85b8c4" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_nothrow_move_assignable_v</definition>
        <argsstring></argsstring>
        <name>is_nothrow_move_assignable_v</name>
        <qualifiedname>zmbt::is_nothrow_move_assignable_v</qualifiedname>
        <initializer>=  is_nothrow_move_assignable &lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="118" column="81" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a5ffdf766f162b7ea42bac8a01d4ccd14" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_same_v</definition>
        <argsstring></argsstring>
        <name>is_same_v</name>
        <qualifiedname>zmbt::is_same_v</qualifiedname>
        <initializer>=  is_same &lt;A, B&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="121" column="66" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1ae81ad16dc57c00d5cb64d6ccc62e48fa" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_base_of_v</definition>
        <argsstring></argsstring>
        <name>is_base_of_v</name>
        <qualifiedname>zmbt::is_base_of_v</qualifiedname>
        <initializer>=  is_base_of &lt;A, B&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="122" column="69" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1ad744288957196c2e1b73b06432484eec" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_convertible_v</definition>
        <argsstring></argsstring>
        <name>is_convertible_v</name>
        <qualifiedname>zmbt::is_convertible_v</qualifiedname>
        <initializer>=  is_convertible &lt;A, B&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="123" column="73" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a82dccc23149184362d7e1c8415488383" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_assignable_v</definition>
        <argsstring></argsstring>
        <name>is_assignable_v</name>
        <qualifiedname>zmbt::is_assignable_v</qualifiedname>
        <initializer>=  is_assignable &lt;A, B&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="125" column="72" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1a862f0e91946567f3238486f366ea4208" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_trivially_assignable_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_assignable_v</name>
        <qualifiedname>zmbt::is_trivially_assignable_v</qualifiedname>
        <initializer>=  is_trivially_assignable &lt;A, B&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="126" column="82" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1aae7eb33eb8387cd511e7141ed7f459c3" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool zmbt::is_nothrow_assignable_v</definition>
        <argsstring></argsstring>
        <name>is_nothrow_assignable_v</name>
        <qualifiedname>zmbt::is_nothrow_assignable_v</qualifiedname>
        <initializer>=  is_nothrow_assignable &lt;A, B&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" line="127" column="80" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/aliases.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1adc01b626dc1a700a7098a42dee5c824d" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>constexpr add_pointer_t&lt; remove_reference_t&lt; ifc_host_t&lt; Interface &gt; &gt; &gt;</type>
        <definition>constexpr add_pointer_t&lt;remove_reference_t&lt;ifc_host_t&lt;Interface&gt; &gt; &gt; zmbt::ifc_host_nullptr</definition>
        <argsstring></argsstring>
        <name>ifc_host_nullptr</name>
        <qualifiedname>zmbt::ifc_host_nullptr</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
<para>Resolves to H*{} for member function pointers of H, or to nullptr_t for other callables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="214" column="25" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="214" bodyend="214"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1ae94f7c46ac51c74c2f524f19c93e981d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr detail::emplace_shared_tag</type>
        <definition>constexpr detail::emplace_shared_tag zmbt::emplace_shared</definition>
        <argsstring></argsstring>
        <name>emplace_shared</name>
        <qualifiedname>zmbt::emplace_shared</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/shared_resource.hpp" line="22" column="45" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/shared_resource.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structzmbt_1_1type__tag" kindref="compound">type_tag</ref>&lt; T &gt; const</type>
        <definition>constexpr type_tag&lt;T&gt; const zmbt::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>zmbt::type</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
<para>type tag value </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/type_tag.hpp" line="27" column="26" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/type_tag.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacezmbt_1a1f8b1e33a88cc943fde9da9034504f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmbt::InitZmbt</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>InitZmbt</name>
        <qualifiedname>zmbt::InitZmbt</qualifiedname>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Initialize test application. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/application/init.hpp" line="13" column="6" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/application/init.hpp" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a127ed0c317817085db3ee42df8e9eeb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmbt::format_failure_report</definition>
        <argsstring>(std::ostream &amp;os, boost::json::value const &amp;report)</argsstring>
        <name>format_failure_report</name>
        <qualifiedname>zmbt::format_failure_report</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>boost::json::value const &amp;</type>
          <declname>report</declname>
        </param>
        <briefdescription>
<para>default failure report formatter </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/application/test_failure.hpp" line="20" column="6" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/application/test_failure.hpp" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1ab558f561832f47da45707725386e7e86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmbt::default_test_failure</definition>
        <argsstring>(boost::json::value const &amp;report)</argsstring>
        <name>default_test_failure</name>
        <qualifiedname>zmbt::default_test_failure</qualifiedname>
        <param>
          <type>boost::json::value const &amp;</type>
          <declname>report</declname>
        </param>
        <briefdescription>
<para>default test failure handler </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/application/test_failure.hpp" line="23" column="6" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/application/test_failure.hpp" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a27aff7704ea2378b6c88d30933d8841f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class E</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void zmbt::throw_exception</definition>
        <argsstring>(E &amp;&amp;e)</argsstring>
        <name>throw_exception</name>
        <qualifiedname>zmbt::throw_exception</qualifiedname>
        <param>
          <type>E &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/exceptions.hpp" line="48" column="6" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/exceptions.hpp" bodystart="48" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a1a35075f9ef1258ab12df19db116662f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string zmbt::format</definition>
        <argsstring>(boost::json::string_view fmtstr, A &amp;&amp;... arg)</argsstring>
        <name>format</name>
        <qualifiedname>zmbt::format</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>boost::format wrapper with printf-like api </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/format_string.hpp" line="25" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/format_string.hpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1ab09da35f45d8bc48bff56c39443ecbbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T zmbt::construct_or_default</definition>
        <argsstring>(A &amp;&amp;... args)</argsstring>
        <name>construct_or_default</name>
        <qualifiedname>zmbt::construct_or_default</qualifiedname>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct T from the given arguments or return default T if construction is invalid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" line="76" column="3" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/generic_traits.hpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a74dd67dc46fc328f29cb46133f29c719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string zmbt::get_tid</definition>
        <argsstring>()</argsstring>
        <name>get_tid</name>
        <qualifiedname>zmbt::get_tid</qualifiedname>
        <briefdescription>
<para>get thread id in string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/get_info.hpp" line="17" column="13" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/get_info.hpp" declline="17" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a590bfe28b6a53b18fc85dbdc077d6e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string zmbt::tid2str</definition>
        <argsstring>(std::thread::id const tid)</argsstring>
        <name>tid2str</name>
        <qualifiedname>zmbt::tid2str</qualifiedname>
        <param>
          <type>std::thread::id const</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>thread id to string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/get_info.hpp" line="20" column="13" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/get_info.hpp" declline="20" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a21bee2c45c13d3cc71567e0a430d1ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t zmbt::get_ts</definition>
        <argsstring>()</argsstring>
        <name>get_ts</name>
        <qualifiedname>zmbt::get_ts</qualifiedname>
        <briefdescription>
<para>get timestamp </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/get_info.hpp" line="23" column="13" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/get_info.hpp" declline="23" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a0dff225558397ba430b1962fde361e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class Result</type>
            <defval>decay_t&lt;Interface&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto zmbt::get_ifc_pointer</definition>
        <argsstring>(Interface x) -&gt; first_if_t&lt; Result, ifc_is_member_handle&lt; Interface &gt; &gt;</argsstring>
        <name>get_ifc_pointer</name>
        <qualifiedname>zmbt::get_ifc_pointer</qualifiedname>
        <param>
          <type>Interface</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Get pointer to callable object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="95" column="6" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="95" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1aaea1c4a1641b432399f90f505ee5eabe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class Result</type>
            <defval>add_pointer_t&lt;remove_reference_t&lt;Interface&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto zmbt::get_ifc_pointer</definition>
        <argsstring>(Interface *x) -&gt; first_if_t&lt; Result, ifc_is_functor_ptr&lt; Interface * &gt; &gt;</argsstring>
        <name>get_ifc_pointer</name>
        <qualifiedname>zmbt::get_ifc_pointer</qualifiedname>
        <param>
          <type>Interface *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="111" column="6" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a3b41636e5471d377b38453b53cdb33b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class Result</type>
            <defval>add_pointer_t&lt;remove_reference_t&lt;Interface&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto zmbt::get_ifc_pointer</definition>
        <argsstring>(Interface &amp;x) -&gt; first_if_t&lt; Result, ifc_is_functor_ref&lt; Interface &amp; &gt; &gt;</argsstring>
        <name>get_ifc_pointer</name>
        <qualifiedname>zmbt::get_ifc_pointer</qualifiedname>
        <param>
          <type>Interface &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="119" column="6" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a6c0df5d9a6ee52e2b3f925ddd5d32650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class Result</type>
            <defval>decay_t&lt;Interface&gt; const</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto zmbt::get_ifc_handle</definition>
        <argsstring>(Interface const x) -&gt; first_if_t&lt; Result, ifc_is_member_handle&lt; Interface &gt; &gt;</argsstring>
        <name>get_ifc_handle</name>
        <qualifiedname>zmbt::get_ifc_handle</qualifiedname>
        <param>
          <type>Interface const</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Get reference to callable object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="131" column="6" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a496ecbd46811996140e9617c0e9ee6df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class Result</type>
            <defval>add_lvalue_reference_t&lt;Interface&gt; const</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto zmbt::get_ifc_handle</definition>
        <argsstring>(Interface *x) -&gt; first_if_t&lt; Result, ifc_is_functor_ptr&lt; Interface * &gt; &gt;</argsstring>
        <name>get_ifc_handle</name>
        <qualifiedname>zmbt::get_ifc_handle</qualifiedname>
        <param>
          <type>Interface *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="147" column="6" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a69179b9ff3a9b1fb6db4b15bf23c97a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class Result</type>
            <defval>add_lvalue_reference_t&lt;Interface&gt; const</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto zmbt::get_ifc_handle</definition>
        <argsstring>(Interface &amp;x) -&gt; first_if_t&lt; Result, ifc_is_functor_ref&lt; Interface &amp; &gt; &gt;</argsstring>
        <name>get_ifc_handle</name>
        <qualifiedname>zmbt::get_ifc_handle</qualifiedname>
        <param>
          <type>Interface &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" line="155" column="6" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/interface_traits.hpp" bodystart="155" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a136d39067fcf3ed9e884c41216a3f73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::real_to_number</definition>
        <argsstring>(double value)</argsstring>
        <name>real_to_number</name>
        <qualifiedname>zmbt::real_to_number</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a double to a JSON number, storing result as uint64_t or int64_t if possible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_number_cast.hpp" line="18" column="20" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_number_cast.hpp" declline="18" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a1d37ca4b1e29fa8a7cd216cdcba267ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::real_to_number</definition>
        <argsstring>(std::int64_t value)</argsstring>
        <name>real_to_number</name>
        <qualifiedname>zmbt::real_to_number</qualifiedname>
        <param>
          <type>std::int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a signed integer to JSON number, storing result as uint64_t if possible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_number_cast.hpp" line="22" column="20" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_number_cast.hpp" declline="22" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a74fe359921659c30e79f4f012c83aef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::maybe_real_to_number</definition>
        <argsstring>(boost::json::value const &amp;value)</argsstring>
        <name>maybe_real_to_number</name>
        <qualifiedname>zmbt::maybe_real_to_number</qualifiedname>
        <param>
          <type>boost::json::value const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_number_cast.hpp" line="24" column="20" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_number_cast.hpp" declline="24" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1aa4f08b5e24b4824b7f3354fa2df49aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::maybe_real_to_number_inplace</definition>
        <argsstring>(boost::json::value &amp;value)</argsstring>
        <name>maybe_real_to_number_inplace</name>
        <qualifiedname>zmbt::maybe_real_to_number_inplace</qualifiedname>
        <param>
          <type>boost::json::value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a signed integer to JSON number in place, storing result as uint64_t if possible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_number_cast.hpp" line="28" column="6" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_number_cast.hpp" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1aef4239e28a2fcd0370d330fe40f1e45a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; zmbt::pretty_print</definition>
        <argsstring>(std::ostream &amp;os, boost::json::value const &amp;jv, int const indent=0)</argsstring>
        <name>pretty_print</name>
        <qualifiedname>zmbt::pretty_print</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>boost::json::value const &amp;</type>
          <declname>jv</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>indent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Pretty print JSON data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jv</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indent</parametername>
</parameternamelist>
<parameterdescription>
<para>initial indent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::ostream&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_pretty_print.hpp" line="25" column="14" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_pretty_print.hpp" declline="25" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a963af5b235bc9bee1809eddc2eab6b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::array</type>
        <definition>boost::json::array zmbt::slice</definition>
        <argsstring>(boost::json::array const &amp;src, boost::json::string_view jp, std::int64_t const start=0, std::int64_t const stop=-1, std::int64_t const step=1)</argsstring>
        <name>slice</name>
        <qualifiedname>zmbt::slice</qualifiedname>
        <param>
          <type>boost::json::array const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>boost::json::string_view</type>
          <declname>jp</declname>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>stop</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Slice array with inclusive boundaries and subsignal cherry-pick. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jp</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON Pointer for subsignal cherry-pick </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>start index, 0-based, inclusive; negative value yields reverse index; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>stop index, 0-based, inclusive; negative value yields reverse index; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>step value, negative value yields reverse iteration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slice array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" line="23" column="20" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" declline="23" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a1c2cfbd35f1bb44de8a82cd13b415602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::array</type>
        <definition>boost::json::array zmbt::slice</definition>
        <argsstring>(boost::json::array const &amp;src, std::int64_t const start=0, std::int64_t const stop=-1, std::int64_t const step=1)</argsstring>
        <name>slice</name>
        <qualifiedname>zmbt::slice</qualifiedname>
        <param>
          <type>boost::json::array const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>stop</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Slice array with inclusive boundaries. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>start index, 0-based, inclusive; negative value yields reverse index; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>stop index, 0-based, inclusive; negative value yields reverse index; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>step value, negative value yields reverse iteration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slice array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" line="31" column="20" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" declline="31" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1aa19fdebc374d7c1bf2b8bf8a9ee03032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::string</type>
        <definition>boost::json::string zmbt::slice</definition>
        <argsstring>(boost::json::string_view const src, std::int64_t const start=0, std::int64_t const stop=-1, std::int64_t const step=1)</argsstring>
        <name>slice</name>
        <qualifiedname>zmbt::slice</qualifiedname>
        <param>
          <type>boost::json::string_view const</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>stop</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" line="33" column="21" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" declline="33" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a9018dfefd7d2552956d560cce27dfca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>js_array_slice_gen</type>
        <definition>js_array_slice_gen zmbt::make_slice_generator</definition>
        <argsstring>(boost::json::array &amp;src, std::int64_t const start=0, std::int64_t const stop=-1, std::int64_t const step=1)</argsstring>
        <name>make_slice_generator</name>
        <qualifiedname>zmbt::make_slice_generator</qualifiedname>
        <param>
          <type>boost::json::array &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>stop</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" line="39" column="32" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" declline="39" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1ac322afe275a3c725d0cb34b57646a2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>js_array_slice_const_gen</type>
        <definition>js_array_slice_const_gen zmbt::make_slice_const_generator</definition>
        <argsstring>(boost::json::array const &amp;src, std::int64_t const start=0, std::int64_t const stop=-1, std::int64_t const step=1)</argsstring>
        <name>make_slice_const_generator</name>
        <qualifiedname>zmbt::make_slice_const_generator</qualifiedname>
        <param>
          <type>boost::json::array const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>stop</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" line="40" column="26" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" declline="40" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a9efe31d3ca247afa39ac659d6efe3456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>js_string_slice_gen</type>
        <definition>js_string_slice_gen zmbt::make_slice_const_generator</definition>
        <argsstring>(boost::json::string_view const src, std::int64_t const start=0, std::int64_t const stop=-1, std::int64_t const step=1)</argsstring>
        <name>make_slice_const_generator</name>
        <qualifiedname>zmbt::make_slice_const_generator</qualifiedname>
        <param>
          <type>boost::json::string_view const</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>stop</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>std::int64_t const</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" line="41" column="26" declfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/slice.hpp" declline="41" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1acd8547b6d395cc3ccf51fdfdf59e06ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T zmbt::convert_tuple_to</definition>
        <argsstring>(tuple&lt; A... &gt; &amp;source)</argsstring>
        <name>convert_tuple_to</name>
        <qualifiedname>zmbt::convert_tuple_to</qualifiedname>
        <param>
          <type>tuple&lt; A... &gt; &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Convert given tuple to a tuple of type T. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>target tuple type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>source tuple parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>input tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/tuple_conversion.hpp" line="50" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/tuple_conversion.hpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1aaf3f41a7841ed7a8de74c7684f68a1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void zmbt::tuple_exchange</definition>
        <argsstring>(T1 &amp;target, T2 const &amp;src)</argsstring>
        <name>tuple_exchange</name>
        <qualifiedname>zmbt::tuple_exchange</qualifiedname>
        <param>
          <type>T1 &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>T2 const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/tuple_exchange.hpp" line="39" column="6" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/tuple_exchange.hpp" bodystart="39" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1ab4a3e681113e47ce6c37a247fa253a45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string zmbt::type_name</definition>
        <argsstring>()</argsstring>
        <name>type_name</name>
        <qualifiedname>zmbt::type_name</qualifiedname>
        <briefdescription>
<para>Prettified typename. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/type_info.hpp" line="28" column="20" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/type_info.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a29b78b40a45b43ec2dc07b21b5d7fca3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string zmbt::type_name</definition>
        <argsstring>(T)</argsstring>
        <name>type_name</name>
        <qualifiedname>zmbt::type_name</qualifiedname>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
<para>Prettified typename. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/type_info.hpp" line="40" column="20" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/type_info.hpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1ab2939838766296487adab545be82a54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type><ref refid="classzmbt_1_1Environment_1_1TypedInterfaceHandle" kindref="compound">Environment::TypedInterfaceHandle</ref>&lt; Interface &gt;</type>
        <definition>Environment::TypedInterfaceHandle&lt; Interface &gt; zmbt::InterfaceRecord</definition>
        <argsstring>(Interface const &amp;interface, object_id const &amp;obj={ifc_host_nullptr&lt; Interface &gt;})</argsstring>
        <name>InterfaceRecord</name>
        <qualifiedname>zmbt::InterfaceRecord</qualifiedname>
        <param>
          <type>Interface const &amp;</type>
          <declname>interface</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref> const &amp;</type>
          <declname>obj</declname>
          <defval>{<ref refid="namespacezmbt_1adc01b626dc1a700a7098a42dee5c824d" kindref="member">ifc_host_nullptr</ref>&lt; Interface &gt;}</defval>
        </param>
        <briefdescription>
<para>Make TypedInterfaceHandle instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Interface</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TypedInterfaceHandle&lt;Interface&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment_interface_record.hpp" line="312" column="35" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment_interface_record.hpp" bodystart="312" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1af92e5402647a5f30cfe7befd53289227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::param_transform</definition>
        <argsstring>(Param const &amp;param, boost::json::array const &amp;pointers, T &amp;&amp;value)</argsstring>
        <name>param_transform</name>
        <qualifiedname>zmbt::param_transform</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1Param" kindref="compound">Param</ref> const &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type>boost::json::array const &amp;</type>
          <declname>pointers</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Transform <ref refid="classzmbt_1_1Param" kindref="compound">Param</ref> value of type T to json value and handle type-specific environment effects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/param_transform.hpp" line="174" column="20" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/param_transform.hpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a3fb47ebc0935012a1e71ae0bc5df054c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class TT</type>
            <defval>remove_cvref_t&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>reflect::detail::disable_hermetic_serialization&lt; TT, boost::json::value &gt;</type>
        <definition>reflect::detail::disable_hermetic_serialization&lt; TT, boost::json::value &gt; zmbt::json_from</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>json_from</name>
        <qualifiedname>zmbt::json_from</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" line="149" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a118585787bf01cb87d244c475e845f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>reflect::detail::disable_hermetic_serialization&lt; T, T &gt;</type>
        <definition>reflect::detail::disable_hermetic_serialization&lt; T, T &gt; zmbt::dejsonize</definition>
        <argsstring>(boost::json::value const &amp;v)</argsstring>
        <name>dejsonize</name>
        <qualifiedname>zmbt::dejsonize</qualifiedname>
        <param>
          <type>boost::json::value const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" line="156" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a93b093d9f679ec8c38bbc73cd7746291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class TT</type>
            <defval>remove_cvref_t&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>reflect::detail::enable_hermetic_serialization&lt; TT, boost::json::value &gt;</type>
        <definition>reflect::detail::enable_hermetic_serialization&lt; TT, boost::json::value &gt; zmbt::json_from</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>json_from</name>
        <qualifiedname>zmbt::json_from</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" line="163" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1af82da7f42634da96666f1a871ae2ad45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>reflect::detail::enable_hermetic_serialization&lt; T, T &gt;</type>
        <definition>reflect::detail::enable_hermetic_serialization&lt; T, T &gt; zmbt::dejsonize</definition>
        <argsstring>(boost::json::value const &amp;v)</argsstring>
        <name>dejsonize</name>
        <qualifiedname>zmbt::dejsonize</qualifiedname>
        <param>
          <type>boost::json::value const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" line="170" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1acb065dcec03b0c1d0f78357554fce075" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::json_from</definition>
        <argsstring>(std::tuple&lt;&gt;)</argsstring>
        <name>json_from</name>
        <qualifiedname>zmbt::json_from</qualifiedname>
        <param>
          <type>std::tuple&lt;&gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" line="177" column="27" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a937bbd17f73887823d81c4c7df046ae0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void zmbt::dejsonize&lt; void &gt;</definition>
        <argsstring>(boost::json::value const &amp;)</argsstring>
        <name>dejsonize&lt; void &gt;</name>
        <qualifiedname>zmbt::dejsonize&lt; void &gt;</qualifiedname>
        <param>
          <type>boost::json::value const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" line="189" column="19" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" bodystart="189" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1ac92e4be6c7f7715837ebdedf11647447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::json_from_array</definition>
        <argsstring>(T const (&amp;array)[N])</argsstring>
        <name>json_from_array</name>
        <qualifiedname>zmbt::json_from_array</qualifiedname>
        <param>
          <type>T const (&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" line="199" column="20" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" bodystart="199" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespacezmbt_1a000882756c4ac77855ddadbb6a2e0fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void zmbt::dejsonize_array</definition>
        <argsstring>(boost::json::array const &amp;jarr, T(&amp;array)[N])</argsstring>
        <name>dejsonize_array</name>
        <qualifiedname>zmbt::dejsonize_array</qualifiedname>
        <param>
          <type>boost::json::array const &amp;</type>
          <declname>jarr</declname>
        </param>
        <param>
          <type>T(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" line="212" column="6" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/reflect/serialization.hpp" bodystart="212" bodyend="225"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>ZMBT root namespace. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>(c) Copyright 2022-2023 Volvo Car Corporation </para>
</simplesect>
<simplesect kind="copyright"><para>(c) Copyright 2024 Zenseact AB </para>
</simplesect>
<simplesect kind="par"><title>License</title><para>SPDX-License-Identifier: Apache-2.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/api/model_test.hpp" line="17" column="1"/>
  </compounddef>
</doxygen>
