<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classzmbt_1_1lang_1_1ExpressionView" kind="class" language="C++" prot="public">
    <compoundname>zmbt::lang::ExpressionView</compoundname>
    <derivedcompoundref refid="classzmbt_1_1lang_1_1Expression" prot="public" virt="non-virtual">zmbt::lang::Expression</derivedcompoundref>
    <includes refid="expression_8hpp" local="no">expression.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classzmbt_1_1lang_1_1ExpressionView_1a32a2b1ba185e83e3ec6b20bbf040512f" prot="public" static="no">
        <type>boost::json::value</type>
        <definition>using zmbt::lang::ExpressionView::V =  boost::json::value</definition>
        <argsstring></argsstring>
        <name>V</name>
        <qualifiedname>zmbt::lang::ExpressionView::V</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="35" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzmbt_1_1lang_1_1ExpressionView_1a25dbbec3030a9c67d47468346efafbcd" prot="public" static="no">
        <type><ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287b" kindref="member">lang::Keyword</ref></type>
        <definition>using zmbt::lang::ExpressionView::Keyword =  lang::Keyword</definition>
        <argsstring></argsstring>
        <name>Keyword</name>
        <qualifiedname>zmbt::lang::ExpressionView::Keyword</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="36" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classzmbt_1_1lang_1_1ExpressionView_1aad6d07d77257a959c943eb971251443b" prot="protected" static="no" mutable="no">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView" kindref="compound">EncodingView</ref></type>
        <definition>EncodingView zmbt::lang::ExpressionView::encoding_view_</definition>
        <argsstring></argsstring>
        <name>encoding_view_</name>
        <qualifiedname>zmbt::lang::ExpressionView::encoding_view_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="326" column="18" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmbt_1_1lang_1_1ExpressionView_1a933b423c91b64ba0824b07b0491522bc" prot="protected" static="no" mutable="yes">
        <type>std::shared_ptr&lt; <ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Expression&gt; zmbt::lang::ExpressionView::const_predicate_cache_</definition>
        <argsstring></argsstring>
        <name>const_predicate_cache_</name>
        <qualifiedname>zmbt::lang::ExpressionView::const_predicate_cache_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="327" column="29" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="327" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1adba8cc8e5eaaaf19c0b302dbaeb27ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zmbt::lang::ExpressionView::ExpressionView</definition>
        <argsstring>()</argsstring>
        <name>ExpressionView</name>
        <qualifiedname>zmbt::lang::ExpressionView::ExpressionView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="42" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1af45902f2a82f47f73f831484dcf8a028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zmbt::lang::ExpressionView::ExpressionView</definition>
        <argsstring>(ExpressionView const &amp;)=default</argsstring>
        <name>ExpressionView</name>
        <qualifiedname>zmbt::lang::ExpressionView::ExpressionView</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="44" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a56f6fcbca65541322d05b3d62bd19b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zmbt::lang::ExpressionView::ExpressionView</definition>
        <argsstring>(ExpressionView &amp;&amp;)=default</argsstring>
        <name>ExpressionView</name>
        <qualifiedname>zmbt::lang::ExpressionView::ExpressionView</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="45" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a2f30046b49ff5df47e9f7065450c1488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &amp;</type>
        <definition>ExpressionView &amp; zmbt::lang::ExpressionView::operator=</definition>
        <argsstring>(ExpressionView const &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>zmbt::lang::ExpressionView::operator=</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="46" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a488f7c11cdeb1f6c9c4d1d22c2c39d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &amp;</type>
        <definition>ExpressionView &amp; zmbt::lang::ExpressionView::operator=</definition>
        <argsstring>(ExpressionView &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>zmbt::lang::ExpressionView::operator=</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="47" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a501db33215f7f8e732a921675fa44371" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::lang::ExpressionView::ExpressionView</definition>
        <argsstring>(EncodingView v)</argsstring>
        <name>ExpressionView</name>
        <qualifiedname>zmbt::lang::ExpressionView::ExpressionView</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1EncodingView" kindref="compound">EncodingView</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="49" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1aca4d36784259811c0227ae869dc12419" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::lang::ExpressionView::ExpressionView</definition>
        <argsstring>(Encoding enc)</argsstring>
        <name>ExpressionView</name>
        <qualifiedname>zmbt::lang::ExpressionView::ExpressionView</qualifiedname>
        <param>
          <type><ref refid="structzmbt_1_1lang_1_1Encoding" kindref="compound">Encoding</ref></type>
          <declname>enc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="54" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1ab6ec0446f55b1b322c5363814a363d71" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual zmbt::lang::ExpressionView::~ExpressionView</definition>
        <argsstring>()=default</argsstring>
        <name>~ExpressionView</name>
        <qualifiedname>zmbt::lang::ExpressionView::~ExpressionView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="59" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1aa49f7b2cebffa9250af01e3b7c56770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView" kindref="compound">EncodingView</ref></type>
        <definition>EncodingView zmbt::lang::ExpressionView::encoding_view</definition>
        <argsstring>() const</argsstring>
        <name>encoding_view</name>
        <qualifiedname>zmbt::lang::ExpressionView::encoding_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="61" column="18" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1aa73769da9122718d72721a488725cff9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::lang::ExpressionView::to_json</definition>
        <argsstring>() const</argsstring>
        <name>to_json</name>
        <qualifiedname>zmbt::lang::ExpressionView::to_json</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="66" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1afb2717100789a49159c9e80a08156b2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::operator==</definition>
        <argsstring>(ExpressionView const &amp;o) const</argsstring>
        <name>operator==</name>
        <qualifiedname>zmbt::lang::ExpressionView::operator==</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="74" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a0e7b2ae56198bba772ee1c2a6b0acba3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::operator!=</definition>
        <argsstring>(ExpressionView const &amp;o) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>zmbt::lang::ExpressionView::operator!=</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="79" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1ab0da28ba5578a88216a3865d37f1bd72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::has_subexpr</definition>
        <argsstring>() const</argsstring>
        <name>has_subexpr</name>
        <qualifiedname>zmbt::lang::ExpressionView::has_subexpr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="90" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a38eb7f148af1c972fa0a207c28a09dd5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;</type>
        <definition>std::list&lt; ExpressionView &gt; zmbt::lang::ExpressionView::subexpressions_list</definition>
        <argsstring>() const</argsstring>
        <name>subexpressions_list</name>
        <qualifiedname>zmbt::lang::ExpressionView::subexpressions_list</qualifiedname>
        <briefdescription>
<para>Subexpressions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="96" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1af7013f7c586a2d653205464723339144" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;</type>
        <definition>std::list&lt; ExpressionView &gt; zmbt::lang::ExpressionView::tuple_parameters</definition>
        <argsstring>() const</argsstring>
        <name>tuple_parameters</name>
        <qualifiedname>zmbt::lang::ExpressionView::tuple_parameters</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="98" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a6ee5bea06fe516c546990f9662a93a40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value const &amp;</type>
        <definition>boost::json::value const  &amp; zmbt::lang::ExpressionView::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <qualifiedname>zmbt::lang::ExpressionView::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="105" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a5ebffd81df5b03c36e6ab907a9c963a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::string const &amp;</type>
        <definition>boost::json::string const  &amp; zmbt::lang::ExpressionView::as_string</definition>
        <argsstring>() const</argsstring>
        <name>as_string</name>
        <qualifiedname>zmbt::lang::ExpressionView::as_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="107" column="31" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a260effcfc4891ddc08c34d7f7a9506bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::array const &amp;</type>
        <definition>boost::json::array const  &amp; zmbt::lang::ExpressionView::as_array</definition>
        <argsstring>() const</argsstring>
        <name>as_array</name>
        <qualifiedname>zmbt::lang::ExpressionView::as_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="112" column="30" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a37094dead81ca9b37a835328fcb4779c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::object const &amp;</type>
        <definition>boost::json::object const  &amp; zmbt::lang::ExpressionView::as_object</definition>
        <argsstring>() const</argsstring>
        <name>as_object</name>
        <qualifiedname>zmbt::lang::ExpressionView::as_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="117" column="31" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a24756321d3dfdb6ad31501049604925b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::as_bool</definition>
        <argsstring>() const</argsstring>
        <name>as_bool</name>
        <qualifiedname>zmbt::lang::ExpressionView::as_bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="122" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a6a852e7030eb499e83000bbb535cd21c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::string const *</type>
        <definition>boost::json::string const  * zmbt::lang::ExpressionView::if_string</definition>
        <argsstring>() const</argsstring>
        <name>if_string</name>
        <qualifiedname>zmbt::lang::ExpressionView::if_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="127" column="31" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a69b7b83b83b5239cd2f57d3c383de290" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::array const *</type>
        <definition>boost::json::array const  * zmbt::lang::ExpressionView::if_array</definition>
        <argsstring>() const</argsstring>
        <name>if_array</name>
        <qualifiedname>zmbt::lang::ExpressionView::if_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="132" column="30" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1ac1bae282486148b6df97e08a1e425d06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::object const *</type>
        <definition>boost::json::object const  * zmbt::lang::ExpressionView::if_object</definition>
        <argsstring>() const</argsstring>
        <name>if_object</name>
        <qualifiedname>zmbt::lang::ExpressionView::if_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="137" column="31" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1ae3974ee6ffe1fec8006a467208c983eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool const *</type>
        <definition>bool const  * zmbt::lang::ExpressionView::if_bool</definition>
        <argsstring>() const</argsstring>
        <name>if_bool</name>
        <qualifiedname>zmbt::lang::ExpressionView::if_bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="142" column="16" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a141f01d9a011769b18ceea615badedd2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_null</definition>
        <argsstring>() const</argsstring>
        <name>is_null</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_null</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="147" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a2107afcab243b460e50460d998b64e74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string zmbt::lang::ExpressionView::serialize</definition>
        <argsstring>() const</argsstring>
        <name>serialize</name>
        <qualifiedname>zmbt::lang::ExpressionView::serialize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="153" column="17" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a43c87f44f16337814fcef3b2c85e4bb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::string_view</type>
        <definition>boost::json::string_view zmbt::lang::ExpressionView::keyword_to_str</definition>
        <argsstring>() const</argsstring>
        <name>keyword_to_str</name>
        <qualifiedname>zmbt::lang::ExpressionView::keyword_to_str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="158" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a88237279806fcbddca915fed6d67ce62" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287b" kindref="member">Keyword</ref></type>
        <definition>Keyword zmbt::lang::ExpressionView::keyword</definition>
        <argsstring>() const</argsstring>
        <name>keyword</name>
        <qualifiedname>zmbt::lang::ExpressionView::keyword</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="165" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a9d0ad02065145ebf3c44a3ba35c13c20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is</definition>
        <argsstring>(Keyword const kwrd) const</argsstring>
        <name>is</name>
        <qualifiedname>zmbt::lang::ExpressionView::is</qualifiedname>
        <param>
          <type><ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287b" kindref="member">Keyword</ref> const</type>
          <declname>kwrd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="170" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1ab4ffedc7175a62a5d1dfeb17d67ae2d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_compose</definition>
        <argsstring>() const</argsstring>
        <name>is_compose</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_compose</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="175" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1aa1284e9445bd3f1e502a4f3daee26764" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_fork</definition>
        <argsstring>() const</argsstring>
        <name>is_fork</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_fork</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="180" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a79ee99969ec807892400cb6f59803a29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_tuple</definition>
        <argsstring>() const</argsstring>
        <name>is_tuple</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_tuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="185" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1abd0d52ee3e8fe7545d8760853738302e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_literal</definition>
        <argsstring>() const</argsstring>
        <name>is_literal</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_literal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="190" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a5b69b96e4c4ee741597f15738921069f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_preproc</definition>
        <argsstring>() const</argsstring>
        <name>is_preproc</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_preproc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="195" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a52a094ef7340fa6d398c7d570db1f679" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_link</definition>
        <argsstring>() const</argsstring>
        <name>is_link</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_link</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="200" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1ae74d0c496ea05520dee09d8a855765cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_noop</definition>
        <argsstring>() const</argsstring>
        <name>is_noop</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_noop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="205" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a956045e86517e92eac3f70a58616117e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_error</definition>
        <argsstring>() const</argsstring>
        <name>is_error</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_error</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="210" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1aea2455ba17bbae2724d37ee502696d1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string zmbt::lang::ExpressionView::error_id</definition>
        <argsstring>() const</argsstring>
        <name>error_id</name>
        <qualifiedname>zmbt::lang::ExpressionView::error_id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal error identifier. Returns empty string when is_error() equals false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="217" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1aeff244c64d5e8cd3654e20ed6247183e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_complete_flip</definition>
        <argsstring>() const</argsstring>
        <name>is_complete_flip</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_complete_flip</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="219" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a251fdebfdd64cf21de2db96785c9638e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_const</definition>
        <argsstring>() const</argsstring>
        <name>is_const</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_const</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="229" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a81d4bcc7d11bc3838039e9e79e62729a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_boolean</definition>
        <argsstring>() const</argsstring>
        <name>is_boolean</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_boolean</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="231" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a52c7a7683ba81001389dbd04cffdcd6e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_valid_link</definition>
        <argsstring>() const</argsstring>
        <name>is_valid_link</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_valid_link</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="233" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="233" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a66bbf3dc1cfd344741aea1be70a0a8a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_infix_pipe</definition>
        <argsstring>() const</argsstring>
        <name>is_infix_pipe</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_infix_pipe</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="239" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a83fd5618ebaf45c4d189e1d675e3a2c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_infix_tuple</definition>
        <argsstring>() const</argsstring>
        <name>is_infix_tuple</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_infix_tuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="244" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a7fb9aba326207265e930b6ed16529f68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::is_infix_fork</definition>
        <argsstring>() const</argsstring>
        <name>is_infix_fork</name>
        <qualifiedname>zmbt::lang::ExpressionView::is_infix_fork</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="249" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a79962fd97199af0005867084e55776f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string zmbt::lang::ExpressionView::prettify</definition>
        <argsstring>() const</argsstring>
        <name>prettify</name>
        <qualifiedname>zmbt::lang::ExpressionView::prettify</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="263" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1af1d5d5540a555ad43dfba37ebd5c2a61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; zmbt::lang::ExpressionView::prettify_to</definition>
        <argsstring>(std::ostream &amp;os) const</argsstring>
        <name>prettify_to</name>
        <qualifiedname>zmbt::lang::ExpressionView::prettify_to</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="264" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a1c9c2075756786288a61357797c3f8cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void zmbt::lang::ExpressionView::prettify_to</definition>
        <argsstring>(char(&amp;buff)[N]) const</argsstring>
        <name>prettify_to</name>
        <qualifiedname>zmbt::lang::ExpressionView::prettify_to</qualifiedname>
        <param>
          <type>char(&amp;)</type>
          <declname>buff</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="267" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1aa5f6f2d4313b75e5d422e77f2c3589d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmbt::lang::ExpressionView::prettify_to</definition>
        <argsstring>(char *buff, std::size_t n) const</argsstring>
        <name>prettify_to</name>
        <qualifiedname>zmbt::lang::ExpressionView::prettify_to</qualifiedname>
        <param>
          <type>char *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="272" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a020a3932f951f1eba636ea1d6316cacd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::pair&lt; std::string, std::string &gt; &gt;</type>
        <definition>std::list&lt; std::pair&lt; std::string, std::string &gt; &gt; zmbt::lang::ExpressionView::preprocessing_parameters</definition>
        <argsstring>() const</argsstring>
        <name>preprocessing_parameters</name>
        <qualifiedname>zmbt::lang::ExpressionView::preprocessing_parameters</qualifiedname>
        <briefdescription>
<para>List of [param, json ptr]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="284" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a5b959417671934a903314517741ad96e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref></type>
        <definition>Expression zmbt::lang::ExpressionView::eval_e</definition>
        <argsstring>(ExpressionView const &amp;x, EvalContext ctx) const</argsstring>
        <name>eval_e</name>
        <qualifiedname>zmbt::lang::ExpressionView::eval_e</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structzmbt_1_1lang_1_1EvalContext" kindref="compound">EvalContext</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Evaluate expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>run-time argument </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>evaluation context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="295" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a8e9117cdba54e38686fe2bb1402fd794" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::eval_as_predicate</definition>
        <argsstring>(ExpressionView const &amp;x, Expression &amp;err_sts, EvalContext ctx) const</argsstring>
        <name>eval_as_predicate</name>
        <qualifiedname>zmbt::lang::ExpressionView::eval_as_predicate</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>err_sts</declname>
        </param>
        <param>
          <type><ref refid="structzmbt_1_1lang_1_1EvalContext" kindref="compound">EvalContext</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Eval const expressions as <ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287ba3718b5ecf60aa0dba49e150e96cb1fc3" kindref="member">Eq(expr)</ref>, except for Noop, otherwise eval expr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="300" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1ae309f88e54c6dd6dc641d01f049a2361" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::eval_as_predicate</definition>
        <argsstring>(boost::json::value const &amp;x, Expression &amp;err_sts, EvalContext ctx) const</argsstring>
        <name>eval_as_predicate</name>
        <qualifiedname>zmbt::lang::ExpressionView::eval_as_predicate</qualifiedname>
        <param>
          <type>boost::json::value const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>err_sts</declname>
        </param>
        <param>
          <type><ref refid="structzmbt_1_1lang_1_1EvalContext" kindref="compound">EvalContext</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Eval const expressions as <ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287ba3718b5ecf60aa0dba49e150e96cb1fc3" kindref="member">Eq(expr)</ref>, except for Noop, otherwise eval expr. Store result in arg reference and return error status. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="304" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a5bece0613adf6905e8290aa3977e841b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref></type>
        <definition>Expression zmbt::lang::ExpressionView::eval_maybe_predicate</definition>
        <argsstring>(ExpressionView const &amp;x, EvalContext ctx) const</argsstring>
        <name>eval_maybe_predicate</name>
        <qualifiedname>zmbt::lang::ExpressionView::eval_maybe_predicate</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structzmbt_1_1lang_1_1EvalContext" kindref="compound">EvalContext</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="306" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a9c4254847bfc0189d8a0a2e5bd6f5eed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::lang::ExpressionView::eval</definition>
        <argsstring>(boost::json::value const &amp;x=nullptr, EvalContext ctx={}) const</argsstring>
        <name>eval</name>
        <qualifiedname>zmbt::lang::ExpressionView::eval</qualifiedname>
        <param>
          <type>boost::json::value const &amp;</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structzmbt_1_1lang_1_1EvalContext" kindref="compound">EvalContext</ref></type>
          <declname>ctx</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Evaluate expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>run-time argument </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>evaluation context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="312" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1ExpressionView_1a0db40880d0c5d7ee2198c63babf0b11d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::ExpressionView::match</definition>
        <argsstring>(boost::json::value const &amp;x, Operator const &amp;op={}) const</argsstring>
        <name>match</name>
        <qualifiedname>zmbt::lang::ExpressionView::match</qualifiedname>
        <param>
          <type>boost::json::value const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Operator" kindref="compound">Operator</ref> const &amp;</type>
          <declname>op</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Eval and cast to boolean, return false on error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="315" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classzmbt_1_1lang_1_1ExpressionView_1a4279c6acdeff7a3cd3b1bdbf25b3aa5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, ExpressionView const &amp;expr)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>zmbt::lang::ExpressionView::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="274" column="12"/>
      </memberdef>
      <memberdef kind="friend" id="classzmbt_1_1lang_1_1ExpressionView_1a315bfe1f85b3ad2fd2b57fb9ebc71e70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1Logger" kindref="compound">zmbt::Logger</ref> &amp;</type>
        <definition>zmbt::Logger &amp; operator&lt;&lt;</definition>
        <argsstring>(zmbt::Logger &amp;logger, ExpressionView const &amp;expr)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>zmbt::lang::ExpressionView::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1Logger" kindref="compound">zmbt::Logger</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="275" column="12"/>
      </memberdef>
      <memberdef kind="friend" id="classzmbt_1_1lang_1_1ExpressionView_1ac69052d359380a67f9fb456540436987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>V</type>
        <definition>V operator*</definition>
        <argsstring>(ExpressionView expr, ExpressionView const &amp;x)</argsstring>
        <name>operator*</name>
        <qualifiedname>zmbt::lang::ExpressionView::operator*</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Evaluate x to lhs expression. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to expr.eval(x). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="319" column="14"/>
      </memberdef>
      <memberdef kind="friend" id="classzmbt_1_1lang_1_1ExpressionView_1af87b81852c531f0444b3395a2c86176a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>V</type>
        <definition>V operator*</definition>
        <argsstring>(ExpressionView expr)</argsstring>
        <name>operator*</name>
        <qualifiedname>zmbt::lang::ExpressionView::operator*</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Evaluate expression. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to expr.eval(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="323" column="14"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref> Language implementation class.</para>
<para><simplesect kind="see"><para><ulink url="/user-guide/expressions/">Expression Language documentation</ulink>. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>zmbt::lang::SignatureBase&lt; Keyword::Err &gt;</label>
        <link refid="structzmbt_1_1lang_1_1SignatureBase"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>zmbt::lang::SignatureBase&lt; Keyword::Op &gt;</label>
        <link refid="structzmbt_1_1lang_1_1SignatureBase"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>zmbt::lang::SignatureBase&lt; Keyword::PreProc &gt;</label>
        <link refid="structzmbt_1_1lang_1_1SignatureBase"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>zmbt::lang::SignatureBinary&lt; Keyword::Cast &gt;</label>
        <link refid="structzmbt_1_1lang_1_1SignatureBinary"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>zmbt::lang::SignatureBinary&lt; Keyword::Uncast &gt;</label>
        <link refid="structzmbt_1_1lang_1_1SignatureBinary"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>zmbt::Param</label>
        <link refid="classzmbt_1_1Param"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>zmbt::lang::Expression</label>
        <link refid="classzmbt_1_1lang_1_1Expression"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>zmbt::lang::Expression::Subexpression</label>
        <link refid="classzmbt_1_1lang_1_1Expression_1_1Subexpression"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>zmbt::lang::ExpressionView</label>
        <link refid="classzmbt_1_1lang_1_1ExpressionView"/>
      </node>
      <node id="11">
        <label>zmbt::lang::SignatureBase&lt; K &gt;</label>
        <link refid="structzmbt_1_1lang_1_1SignatureBase"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>zmbt::lang::SignatureBinary&lt; K &gt;</label>
        <link refid="structzmbt_1_1lang_1_1SignatureBinary"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>zmbt::lang::SignatureBinary&lt; Keyword::PreProc &gt;</label>
        <link refid="structzmbt_1_1lang_1_1SignatureBinary_3_01Keyword_1_1PreProc_01_4"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>zmbt::lang::SignatureCast</label>
        <link refid="structzmbt_1_1lang_1_1SignatureCast"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>zmbt::lang::SignatureConst&lt; K &gt;</label>
        <link refid="structzmbt_1_1lang_1_1SignatureConst"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>zmbt::lang::SignatureErr</label>
        <link refid="structzmbt_1_1lang_1_1SignatureErr"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>zmbt::lang::SignatureOp</label>
        <link refid="structzmbt_1_1lang_1_1SignatureOp"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>zmbt::lang::SignatureUnary&lt; K &gt;</label>
        <link refid="structzmbt_1_1lang_1_1SignatureUnary"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>zmbt::lang::SignatureUncast</label>
        <link refid="structzmbt_1_1lang_1_1SignatureUncast"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>zmbt::lang::SignatureVariadic&lt; K &gt;</label>
        <link refid="structzmbt_1_1lang_1_1SignatureVariadic"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>zmbt::lang::EncodingView</label>
        <link refid="classzmbt_1_1lang_1_1EncodingView"/>
      </node>
      <node id="1">
        <label>zmbt::lang::ExpressionView</label>
        <link refid="classzmbt_1_1lang_1_1ExpressionView"/>
        <childnode refid="2" relation="usage">
          <edgelabel>encoding_view_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" line="31" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression.hpp" bodystart="32" bodyend="328"/>
    <listofallmembers>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a260effcfc4891ddc08c34d7f7a9506bf" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>as_array</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a24756321d3dfdb6ad31501049604925b" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>as_bool</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a37094dead81ca9b37a835328fcb4779c" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>as_object</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a5ebffd81df5b03c36e6ab907a9c963a2" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>as_string</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a933b423c91b64ba0824b07b0491522bc" prot="protected" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>const_predicate_cache_</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a6ee5bea06fe516c546990f9662a93a40" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>data</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1aa49f7b2cebffa9250af01e3b7c56770c" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>encoding_view</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1aad6d07d77257a959c943eb971251443b" prot="protected" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>encoding_view_</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1aea2455ba17bbae2724d37ee502696d1c" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>error_id</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a9c4254847bfc0189d8a0a2e5bd6f5eed" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>eval</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a8e9117cdba54e38686fe2bb1402fd794" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>eval_as_predicate</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1ae309f88e54c6dd6dc641d01f049a2361" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>eval_as_predicate</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a5b959417671934a903314517741ad96e" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>eval_e</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a5bece0613adf6905e8290aa3977e841b" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>eval_maybe_predicate</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1adba8cc8e5eaaaf19c0b302dbaeb27ca3" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>ExpressionView</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1af45902f2a82f47f73f831484dcf8a028" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>ExpressionView</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a56f6fcbca65541322d05b3d62bd19b3f" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>ExpressionView</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a501db33215f7f8e732a921675fa44371" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>ExpressionView</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1aca4d36784259811c0227ae869dc12419" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>ExpressionView</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1ab0da28ba5578a88216a3865d37f1bd72" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>has_subexpr</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a69b7b83b83b5239cd2f57d3c383de290" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>if_array</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1ae3974ee6ffe1fec8006a467208c983eb" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>if_bool</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1ac1bae282486148b6df97e08a1e425d06" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>if_object</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a6a852e7030eb499e83000bbb535cd21c" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>if_string</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a9d0ad02065145ebf3c44a3ba35c13c20" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a81d4bcc7d11bc3838039e9e79e62729a" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_boolean</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1aeff244c64d5e8cd3654e20ed6247183e" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_complete_flip</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1ab4ffedc7175a62a5d1dfeb17d67ae2d0" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_compose</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a251fdebfdd64cf21de2db96785c9638e" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_const</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a956045e86517e92eac3f70a58616117e" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_error</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1aa1284e9445bd3f1e502a4f3daee26764" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_fork</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a7fb9aba326207265e930b6ed16529f68" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_infix_fork</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a66bbf3dc1cfd344741aea1be70a0a8a9" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_infix_pipe</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a83fd5618ebaf45c4d189e1d675e3a2c6" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_infix_tuple</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a52a094ef7340fa6d398c7d570db1f679" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_link</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1abd0d52ee3e8fe7545d8760853738302e" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_literal</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1ae74d0c496ea05520dee09d8a855765cb" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_noop</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a141f01d9a011769b18ceea615badedd2" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_null</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a5b69b96e4c4ee741597f15738921069f" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_preproc</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a79ee99969ec807892400cb6f59803a29" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_tuple</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a52c7a7683ba81001389dbd04cffdcd6e" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>is_valid_link</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a25dbbec3030a9c67d47468346efafbcd" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>Keyword</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a88237279806fcbddca915fed6d67ce62" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>keyword</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a43c87f44f16337814fcef3b2c85e4bb1" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>keyword_to_str</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a0db40880d0c5d7ee2198c63babf0b11d" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>match</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a0e7b2ae56198bba772ee1c2a6b0acba3" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>operator!=</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1ac69052d359380a67f9fb456540436987" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>operator*</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1af87b81852c531f0444b3395a2c86176a" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>operator*</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a4279c6acdeff7a3cd3b1bdbf25b3aa5d" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>operator&lt;&lt;</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a315bfe1f85b3ad2fd2b57fb9ebc71e70" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>operator&lt;&lt;</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a2f30046b49ff5df47e9f7065450c1488" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>operator=</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a488f7c11cdeb1f6c9c4d1d22c2c39d1f" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>operator=</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1afb2717100789a49159c9e80a08156b2d" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>operator==</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a020a3932f951f1eba636ea1d6316cacd" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>preprocessing_parameters</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a79962fd97199af0005867084e55776f1" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>prettify</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1af1d5d5540a555ad43dfba37ebd5c2a61" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>prettify_to</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a1c9c2075756786288a61357797c3f8cd" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>prettify_to</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1aa5f6f2d4313b75e5d422e77f2c3589d3" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>prettify_to</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a2107afcab243b460e50460d998b64e74" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>serialize</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a38eb7f148af1c972fa0a207c28a09dd5" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>subexpressions_list</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1aa73769da9122718d72721a488725cff9" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>to_json</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1af7013f7c586a2d653205464723339144" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>tuple_parameters</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1a32a2b1ba185e83e3ec6b20bbf040512f" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionView</scope><name>V</name></member>
      <member refid="classzmbt_1_1lang_1_1ExpressionView_1ab6ec0446f55b1b322c5363814a363d71" prot="public" virt="virtual"><scope>zmbt::lang::ExpressionView</scope><name>~ExpressionView</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
