<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="api__signatures_8hpp" kind="file" language="C++">
    <compoundname>api_signatures.hpp</compoundname>
    <includes local="no">cstddef</includes>
    <includes local="no">initializer_list</includes>
    <includes local="no">boost/json.hpp</includes>
    <includes refid="serialization_8hpp" local="yes">zmbt/reflect/serialization.hpp</includes>
    <includes refid="keyword_8hpp" local="yes">keyword.hpp</includes>
    <includes refid="expression_8hpp" local="yes">expression.hpp</includes>
    <includedby refid="expr_8hpp" local="yes">zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr.hpp</includedby>
    <includedby refid="expr_2api_8hpp" local="yes">zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/api.hpp</includedby>
    <incdepgraph>
      <node id="67">
        <label>zmbt/application/log.hpp</label>
        <link refid="log_8hpp"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>zmbt/core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>core/aliases.hpp</label>
        <link refid="aliases_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>core/entity_id.hpp</label>
        <link refid="entity__id_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>core/exceptions.hpp</label>
        <link refid="core_2exceptions_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>core/file_parser.hpp</label>
        <link refid="file__parser_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>format_string.hpp</label>
        <link refid="format__string_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>core/generic_traits.hpp</label>
        <link refid="generic__traits_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>core/get_info.hpp</label>
        <link refid="get__info_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>core/interface_id.hpp</label>
        <link refid="interface__id_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>core/interface_traits.hpp</label>
        <link refid="interface__traits_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>core/json_iter.hpp</label>
        <link refid="json__iter_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>core/json_node.hpp</label>
        <link refid="json__node_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>core/json_number_cast.hpp</label>
        <link refid="json__number__cast_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>core/json_pretty_print.hpp</label>
        <link refid="json__pretty__print_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>core/json_traverse.hpp</label>
        <link refid="json__traverse_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>core/object_id.hpp</label>
        <link refid="object__id_8hpp"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>core/operator_traits.hpp</label>
        <link refid="operator__traits_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>zmbt/core/preprocessor.hpp</label>
        <link refid="preprocessor_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>core/shared_resource.hpp</label>
        <link refid="shared__resource_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>core/slice.hpp</label>
        <link refid="slice_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>core/tuple_conversion.hpp</label>
        <link refid="tuple__conversion_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>core/tuple_exchange.hpp</label>
        <link refid="tuple__exchange_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>core/tuple_indexator.hpp</label>
        <link refid="tuple__indexator_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>type_info.hpp</label>
        <link refid="type__info_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>core/type_tag.hpp</label>
        <link refid="type__tag_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/api_signatures.hpp</label>
        <link refid="api__signatures_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>attributes.hpp</label>
        <link refid="attributes_8hpp"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>encoding.hpp</label>
        <link refid="encoding_8hpp"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>eval_context.hpp</label>
        <link refid="eval__context_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>eval_log.hpp</label>
        <link refid="eval__log_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>expression.hpp</label>
        <link refid="expression_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>keyword.hpp</label>
        <link refid="keyword_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>keyword_grammar.hpp</label>
        <link refid="keyword__grammar_8hpp"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>lazy_param.hpp</label>
        <link refid="lazy__param_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>operator.hpp</label>
        <link refid="operator_8hpp"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>zmbt/reflect.hpp</label>
        <link refid="reflect_8hpp"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>ducktyping_traits_pp.hpp</label>
        <link refid="ducktyping__traits__pp_8hpp"/>
      </node>
      <node id="63">
        <label>reflect/invocation.hpp</label>
        <link refid="invocation_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>reflect/prototypes.hpp</label>
        <link refid="prototypes_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>zmbt/reflect/serialization.hpp</label>
        <link refid="serialization_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>serialization_defaults.hpp</label>
        <link refid="serialization__defaults_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>signal_traits.hpp</label>
        <link refid="signal__traits_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>algorithm</label>
      </node>
      <node id="22">
        <label>array</label>
      </node>
      <node id="12">
        <label>boost/callable_traits.hpp</label>
      </node>
      <node id="74">
        <label>boost/current_function.hpp</label>
      </node>
      <node id="59">
        <label>boost/describe.hpp</label>
      </node>
      <node id="4">
        <label>boost/json.hpp</label>
      </node>
      <node id="13">
        <label>boost/mp11.hpp</label>
      </node>
      <node id="54">
        <label>boost/mp11/tuple.hpp</label>
      </node>
      <node id="73">
        <label>boost/optional.hpp</label>
      </node>
      <node id="77">
        <label>boost/phoenix/operator.hpp</label>
      </node>
      <node id="8">
        <label>boost/preprocessor.hpp</label>
      </node>
      <node id="76">
        <label>boost/spirit/include/qi.hpp</label>
      </node>
      <node id="15">
        <label>boost/throw_exception.hpp</label>
      </node>
      <node id="20">
        <label>boost/type_index.hpp</label>
      </node>
      <node id="42">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="68">
        <label>chrono</label>
      </node>
      <node id="60">
        <label>complex</label>
      </node>
      <node id="2">
        <label>cstddef</label>
      </node>
      <node id="49">
        <label>cstdint</label>
      </node>
      <node id="52">
        <label>cstring</label>
      </node>
      <node id="27">
        <label>functional</label>
      </node>
      <node id="3">
        <label>initializer_list</label>
      </node>
      <node id="69">
        <label>iomanip</label>
      </node>
      <node id="30">
        <label>iostream</label>
      </node>
      <node id="71">
        <label>limits</label>
      </node>
      <node id="80">
        <label>list</label>
      </node>
      <node id="37">
        <label>map</label>
      </node>
      <node id="31">
        <label>memory</label>
      </node>
      <node id="66">
        <label>ostream</label>
      </node>
      <node id="38">
        <label>set</label>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="25">
        <label>thread</label>
      </node>
      <node id="11">
        <label>tuple</label>
      </node>
      <node id="6">
        <label>type_traits</label>
      </node>
      <node id="50">
        <label>typeindex</label>
      </node>
      <node id="53">
        <label>typeinfo</label>
      </node>
      <node id="39">
        <label>unordered_map</label>
      </node>
      <node id="40">
        <label>unordered_set</label>
      </node>
      <node id="18">
        <label>utility</label>
      </node>
      <node id="41">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zenseact-mbt.hpp</label>
        <link refid="zenseact-mbt_8hpp"/>
      </node>
      <node id="3">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/all.hpp</label>
        <link refid="all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/api.hpp</label>
        <link refid="api_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/api/model_test.hpp</label>
        <link refid="model__test_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/api/ns.hpp</label>
        <link refid="ns_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr.hpp</label>
        <link refid="expr_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/api.hpp</label>
        <link refid="expr_2api_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/api_signatures.hpp</label>
        <link refid="api__signatures_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/mapping.hpp</label>
        <link refid="mapping_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/mapping/channel_handle.hpp</label>
        <link refid="channel__handle_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/mapping/model_definition.hpp</label>
        <link refid="model__definition_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/mapping/model_definition_helper.hpp</label>
        <link refid="model__definition__helper_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/mapping/model_definition_main.hpp</label>
        <link refid="model__definition__main_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/mapping/model_definition_node.hpp</label>
        <link refid="model__definition__node_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/mapping/model_definition_states.hpp</label>
        <link refid="model__definition__states_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/mapping/model_definition_transitions.hpp</label>
        <link refid="model__definition__transitions_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/mapping/pipe_handle.hpp</label>
        <link refid="pipe__handle_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/mapping/test_parameter_resolver.hpp</label>
        <link refid="test__parameter__resolver_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp</label>
        <link refid="environment_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment_data.hpp</label>
        <link refid="environment__data_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment_interface_record.hpp</label>
        <link refid="environment__interface__record_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/generator.hpp</label>
        <link refid="generator_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/injection_table.hpp</label>
        <link refid="injection__table_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/param_transform.hpp</label>
        <link refid="param__transform_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/parameter.hpp</label>
        <link refid="parameter_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structzmbt_1_1lang_1_1SignatureBase" prot="public">zmbt::lang::SignatureBase</innerclass>
    <innerclass refid="structzmbt_1_1lang_1_1SignatureConst" prot="public">zmbt::lang::SignatureConst</innerclass>
    <innerclass refid="structzmbt_1_1lang_1_1SignatureUnary" prot="public">zmbt::lang::SignatureUnary</innerclass>
    <innerclass refid="structzmbt_1_1lang_1_1SignatureBinary" prot="public">zmbt::lang::SignatureBinary</innerclass>
    <innerclass refid="structzmbt_1_1lang_1_1SignatureBinary_3_01Keyword_1_1PreProc_01_4" prot="public">zmbt::lang::SignatureBinary&lt; Keyword::PreProc &gt;</innerclass>
    <innerclass refid="structzmbt_1_1lang_1_1SignatureVariadic" prot="public">zmbt::lang::SignatureVariadic</innerclass>
    <innerclass refid="structzmbt_1_1lang_1_1SignatureOp" prot="public">zmbt::lang::SignatureOp</innerclass>
    <innerclass refid="structzmbt_1_1lang_1_1SignatureCast" prot="public">zmbt::lang::SignatureCast</innerclass>
    <innerclass refid="structzmbt_1_1lang_1_1SignatureUncast" prot="public">zmbt::lang::SignatureUncast</innerclass>
    <innerclass refid="structzmbt_1_1lang_1_1SignatureErr" prot="public">zmbt::lang::SignatureErr</innerclass>
    <innernamespace refid="namespacezmbt">zmbt</innernamespace>
    <innernamespace refid="namespacezmbt_1_1lang">zmbt::lang</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>(c) Copyright 2024-2025 Zenseact AB </para>
</simplesect>
<simplesect kind="par"><title>License</title><para>SPDX-License-Identifier: Apache-2.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZMBT_EXPR_EXPRESSION_API_SIGNATURES_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZMBT_EXPR_EXPRESSION_API_SIGNATURES_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="serialization_8hpp" kindref="compound">zmbt/reflect/serialization.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="keyword_8hpp" kindref="compound">keyword.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="expression_8hpp" kindref="compound">expression.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezmbt" kindref="compound">zmbt</ref><sp/>{</highlight></codeline>
<codeline lineno="21" refid="namespacezmbt_1_1lang" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">lang<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::json::value<sp/>handle_list_init(std::initializer_list&lt;Expression&gt;<sp/>set);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Keyword<sp/>K&gt;</highlight></codeline>
<codeline lineno="27" refid="structzmbt_1_1lang_1_1SignatureBase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>()<sp/>:<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(encodeNested(K,<sp/>{}))</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>boost::json::value()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>allowing<sp/>implicit<sp/>on<sp/>expr::*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expression::operator<sp/>boost::json::value();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Keyword<sp/>K&gt;</highlight></codeline>
<codeline lineno="44" refid="structzmbt_1_1lang_1_1SignatureConst" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureConst" kindref="compound">SignatureConst</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;K&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;K&gt;::SignatureBase;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Keyword<sp/>K&gt;</highlight></codeline>
<codeline lineno="56" refid="structzmbt_1_1lang_1_1SignatureUnary" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureUnary" kindref="compound">SignatureUnary</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;K&gt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;K&gt;::SignatureBase;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Keyword<sp/>K&gt;</highlight></codeline>
<codeline lineno="75" refid="structzmbt_1_1lang_1_1SignatureBinary" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBinary" kindref="compound">SignatureBinary</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;K&gt;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;K&gt;::SignatureBase;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="structzmbt_1_1lang_1_1SignatureBinary_1a515d1aea9ad3ccfa02e33dfbad67ccaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBinary_1a515d1aea9ad3ccfa02e33dfbad67ccaf" kindref="member">operator()</ref>(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="81"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(Expression::encodeNested(K,<sp/>{param}));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBinary_1a515d1aea9ad3ccfa02e33dfbad67ccaf" kindref="member">operator()</ref>(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>&amp;&amp;<sp/>param)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="86"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(Expression::encodeNested(K,<sp/>{std::move(param)}));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structzmbt_1_1lang_1_1SignatureBinary_1ab33a2c077b2878fa15339864d9a70527" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBinary_1ab33a2c077b2878fa15339864d9a70527" kindref="member">operator()</ref>(std::initializer_list&lt;Expression&gt;<sp/>param)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="93"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(Expression::encodeNested(K,<sp/>{detail::handle_list_init(param)}));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="99" refid="structzmbt_1_1lang_1_1SignatureBinary_3_01Keyword_1_1PreProc_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBinary" kindref="compound">SignatureBinary</ref>&lt;<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287b" kindref="member">Keyword</ref>::<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287bac1ce9699b6d0c3aaf60ba82af48fa37e" kindref="member">PreProc</ref>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;Keyword::PreProc&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287bac1ce9699b6d0c3aaf60ba82af48fa37e" kindref="member">Keyword::PreProc</ref>&gt;::SignatureBase;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="structzmbt_1_1lang_1_1SignatureBinary_3_01Keyword_1_1PreProc_01_4_1a22ba9f884ac1e607604194852e7965ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBinary_3_01Keyword_1_1PreProc_01_4_1a22ba9f884ac1e607604194852e7965ea" kindref="member">operator()</ref>(boost::json::string_view<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>param)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="105"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(Expression::encodePreProc(<ref refid="namespacezmbt_1a1a35075f9ef1258ab12df19db116662f" kindref="member">zmbt::format</ref>(</highlight><highlight class="stringliteral">&quot;$[%s]&quot;</highlight><highlight class="normal">,<sp/>param).c_str()));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="structzmbt_1_1lang_1_1SignatureBinary_3_01Keyword_1_1PreProc_01_4_1a7f2bde04c1b281fa8b6682c8820fc337" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBinary_3_01Keyword_1_1PreProc_01_4_1a7f2bde04c1b281fa8b6682c8820fc337" kindref="member">operator()</ref>(std::size_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>param)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="111"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(Expression::encodePreProc(<ref refid="namespacezmbt_1a1a35075f9ef1258ab12df19db116662f" kindref="member">zmbt::format</ref>(</highlight><highlight class="stringliteral">&quot;$[%s]&quot;</highlight><highlight class="normal">,<sp/>param).c_str()));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Keyword<sp/>K&gt;</highlight></codeline>
<codeline lineno="123" refid="structzmbt_1_1lang_1_1SignatureVariadic" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureVariadic" kindref="compound">SignatureVariadic</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;K&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>encodeVariadic(std::initializer_list&lt;zmbt::lang::Expression&gt;<sp/>params)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(Expression::encodeNested(K,<sp/><sp/>params));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;K&gt;::SignatureBase;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/>=<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encodeVariadic({});</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encodeVariadic({p0});</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p0,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encodeVariadic({p0,<sp/>p1});</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p0,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p1,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encodeVariadic({p0,<sp/>p1,<sp/>p2});</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p0,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p1,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p2,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p3)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encodeVariadic({p0,<sp/>p1,<sp/>p2,<sp/>p3});</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p0,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p1,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p2,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p3,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p4)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encodeVariadic({p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4});</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p0,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p1,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p2,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p3,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p4,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p5)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encodeVariadic({p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5});</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p0,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p1,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p2,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p3,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p4,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p5,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p6)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encodeVariadic({p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6});</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p0,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p1,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p2,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p3,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p4,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p5,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p6,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p7)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encodeVariadic({p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7});</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p0,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p1,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p2,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p3,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p4,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p5,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p6,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">E</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p7,<sp/>T&amp;&amp;...<sp/>rest)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encodeVariadic({p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7,<sp/>zmbt::json_from(rest)...});</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal">};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="structzmbt_1_1lang_1_1SignatureOp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureOp" kindref="compound">SignatureOp</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;Keyword::Op&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287ba38c4658d5308897a92cef9e113aefc3a" kindref="member">Keyword::Op</ref>&gt;::SignatureBase;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(<ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">type</ref>,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="namespacezmbt_1_1expr" kindref="compound">expr</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="177"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(Expression::encodeNested(<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287ba38c4658d5308897a92cef9e113aefc3a" kindref="member">Keyword::Op</ref>,<sp/>{<ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">type</ref><sp/>+<sp/><ref refid="namespacezmbt_1_1expr" kindref="compound">expr</ref>}));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(type_tag&lt;T&gt;<sp/>tag,<sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="namespacezmbt_1_1expr" kindref="compound">expr</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="183"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Operator" kindref="compound">Operator</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>op{tag};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(Expression::encodeNested(<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287ba38c4658d5308897a92cef9e113aefc3a" kindref="member">Keyword::Op</ref>,<sp/>{op.annotation()<sp/>+<sp/><ref refid="namespacezmbt_1_1expr" kindref="compound">expr</ref>}));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal">};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="structzmbt_1_1lang_1_1SignatureCast" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureCast" kindref="compound">SignatureCast</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBinary" kindref="compound">SignatureBinary</ref>&lt;Keyword::Cast&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBinary" kindref="compound">SignatureBinary</ref>&lt;<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287ba4cd9f3996d60790cd11c04f842ebc43c" kindref="member">Keyword::Cast</ref>&gt;::SignatureBinary;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBinary" kindref="compound">SignatureBinary</ref>&lt;<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287ba4cd9f3996d60790cd11c04f842ebc43c" kindref="member">Keyword::Cast</ref>&gt;::operator();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(type_tag&lt;T&gt;<sp/>tag)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="197"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Operator" kindref="compound">Operator</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>op{tag};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(Expression::encodeNested(<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287ba4cd9f3996d60790cd11c04f842ebc43c" kindref="member">Keyword::Cast</ref>,<sp/>{op.annotation()}));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal">};</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="structzmbt_1_1lang_1_1SignatureUncast" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureUncast" kindref="compound">SignatureUncast</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBinary" kindref="compound">SignatureBinary</ref>&lt;Keyword::Uncast&gt;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBinary" kindref="compound">SignatureBinary</ref>&lt;<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287ba35f9accbd9124475f84f3e99f8728519" kindref="member">Keyword::Uncast</ref>&gt;::SignatureBinary;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBinary" kindref="compound">SignatureBinary</ref>&lt;<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287ba35f9accbd9124475f84f3e99f8728519" kindref="member">Keyword::Uncast</ref>&gt;::operator();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(type_tag&lt;T&gt;<sp/>tag)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="210"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Operator" kindref="compound">Operator</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>op{tag};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(Expression::encodeNested(<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287ba35f9accbd9124475f84f3e99f8728519" kindref="member">Keyword::Uncast</ref>,<sp/>{op.annotation()}));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal">};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="structzmbt_1_1lang_1_1SignatureErr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureErr" kindref="compound">SignatureErr</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;Keyword::Err&gt;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structzmbt_1_1lang_1_1SignatureBase" kindref="compound">SignatureBase</ref>&lt;<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287bab47f6a6092c5d7e4bffec12dff309c3b" kindref="member">Keyword::Err</ref>&gt;::SignatureBase;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>operator()(boost::json::object<sp/>payload)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="221"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref>(Expression::encodeNested(<ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287bab47f6a6092c5d7e4bffec12dff309c3b" kindref="member">Keyword::Err</ref>,<sp/>{payload}));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="structzmbt_1_1lang_1_1SignatureErr_1ac271ef148425afb642ba71f5ae02b586" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/><ref refid="structzmbt_1_1lang_1_1SignatureErr_1ac271ef148425afb642ba71f5ae02b586" kindref="member">operator()</ref>(boost::json::string_view<sp/>msg,<sp/>boost::json::string_view<sp/>ctx<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="227"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_error(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>msg,<sp/>ctx);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="234" refid="structzmbt_1_1lang_1_1SignatureErr_1a19aefa7f7c2ffcdad378421f9bcb816f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/><ref refid="structzmbt_1_1lang_1_1SignatureErr_1a19aefa7f7c2ffcdad378421f9bcb816f" kindref="member">operator()</ref>(type_tag&lt;T&gt;,<sp/>boost::json::string<sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>boost::json::string<sp/>ctx<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="235"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_base_of&lt;std::exception,<sp/>T&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>type<sp/>is<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>e<sp/>=<sp/>make_error(zmbt::type_name&lt;T&gt;(),<sp/>msg,<sp/>ctx);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_throw_action(e.error_id(),<sp/>[msg]{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>T(msg.c_str());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(e);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_throw_action(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;<sp/>f)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">Expression</ref><sp/>make_error(boost::json::string_view<sp/><ref refid="namespacezmbt_1aa6dbe066c6a84f4ab7134b8d2ed20359" kindref="member">type</ref>,<sp/>boost::json::string_view<sp/>msg,<sp/>boost::json::string_view<sp/>ctx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lang</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>zmbt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>ZMBT_EXPR_EXPRESSION_API_SIGNATURES_HPP_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/api_signatures.hpp"/>
  </compounddef>
</doxygen>
