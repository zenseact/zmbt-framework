<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classzmbt_1_1JsonNode" kind="class" language="C++" prot="public">
    <compoundname>zmbt::JsonNode</compoundname>
    <includes refid="json__node_8hpp" local="no">json_node.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzmbt_1_1JsonNode_1a0aaeb708248c47340180d0a4bed1d444" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; boost::json::value &gt;</type>
        <definition>std::shared_ptr&lt;boost::json::value&gt; zmbt::JsonNode::root_</definition>
        <argsstring></argsstring>
        <name>root_</name>
        <qualifiedname>zmbt::JsonNode::root_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="55" column="21" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmbt_1_1JsonNode_1a991ad2da732994be8d5181a97a1d7659" prot="private" static="no" mutable="no">
        <type>boost::json::string</type>
        <definition>boost::json::string zmbt::JsonNode::node_ptr_</definition>
        <argsstring></argsstring>
        <name>node_ptr_</name>
        <qualifiedname>zmbt::JsonNode::node_ptr_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="56" column="25" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1aca8ff9ea9035bec94957330f12e72764" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value &amp;</type>
        <definition>boost::json::value &amp; zmbt::JsonNode::get_or_create</definition>
        <argsstring>(boost::json::string_view json_ptr)</argsstring>
        <name>get_or_create</name>
        <qualifiedname>zmbt::JsonNode::get_or_create</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>json_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="58" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1aa0ce5921e5b0cc2487e480ccfa48ddb5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::string_view</type>
        <definition>boost::json::string_view zmbt::JsonNode::validate_jptr</definition>
        <argsstring>(boost::json::string_view query) const</argsstring>
        <name>validate_jptr</name>
        <qualifiedname>zmbt::JsonNode::validate_jptr</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="60" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a2a6c111d9ee1247b2ecfbf1ea910a25d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value &amp;</type>
        <definition>boost::json::value &amp; zmbt::JsonNode::get_or_create_as</definition>
        <argsstring>(boost::json::kind request_kind, boost::json::string_view json_ptr)</argsstring>
        <name>get_or_create_as</name>
        <qualifiedname>zmbt::JsonNode::get_or_create_as</qualifiedname>
        <param>
          <type>boost::json::kind</type>
          <declname>request_kind</declname>
        </param>
        <param>
          <type>boost::json::string_view</type>
          <declname>json_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="62" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a7e558bddac7183180a7f1d58817f6890" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zmbt::JsonNode::JsonNode</definition>
        <argsstring>(boost::json::string_view node_ptr, std::shared_ptr&lt; boost::json::value &gt; root)</argsstring>
        <name>JsonNode</name>
        <qualifiedname>zmbt::JsonNode::JsonNode</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>node_ptr</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; boost::json::value &gt;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="64" column="5"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a6d3cffc0dd6c3feab259cfa0ffd1bf85" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::JsonNode::~JsonNode</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~JsonNode</name>
        <qualifiedname>zmbt::JsonNode::~JsonNode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="69" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1ab1929b0da0ed38eb455e3295c0f93a1b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::JsonNode::JsonNode</definition>
        <argsstring>(std::shared_ptr&lt; boost::json::value &gt; root)</argsstring>
        <name>JsonNode</name>
        <qualifiedname>zmbt::JsonNode::JsonNode</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; boost::json::value &gt;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="71" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a81cf9a6fcda3456e86660fe9f130118d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::JsonNode::JsonNode</definition>
        <argsstring>()</argsstring>
        <name>JsonNode</name>
        <qualifiedname>zmbt::JsonNode::JsonNode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="76" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1aeed6b0e14c9bac2c1d4aa5faab6009dd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::JsonNode::JsonNode</definition>
        <argsstring>(boost::json::storage_ptr sp)</argsstring>
        <name>JsonNode</name>
        <qualifiedname>zmbt::JsonNode::JsonNode</qualifiedname>
        <param>
          <type>boost::json::storage_ptr</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="81" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1ae936e6e7fd44fc281c880f15f5f9e3b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::JsonNode::JsonNode</definition>
        <argsstring>(JsonNode const &amp;o)</argsstring>
        <name>JsonNode</name>
        <qualifiedname>zmbt::JsonNode::JsonNode</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="86" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a6794ff21d339c8e49042354ff7618f62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::JsonNode::JsonNode</definition>
        <argsstring>(JsonNode &amp;o)</argsstring>
        <name>JsonNode</name>
        <qualifiedname>zmbt::JsonNode::JsonNode</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="91" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a2a0f6272e205408e0a909f08dcb7ac5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::JsonNode::JsonNode</definition>
        <argsstring>(JsonNode &amp;&amp;o)</argsstring>
        <name>JsonNode</name>
        <qualifiedname>zmbt::JsonNode::JsonNode</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="96" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1ade415037edc763de41deb299d83de9a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::JsonNode::JsonNode</definition>
        <argsstring>(boost::json::value const &amp;v)</argsstring>
        <name>JsonNode</name>
        <qualifiedname>zmbt::JsonNode::JsonNode</qualifiedname>
        <param>
          <type>boost::json::value const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="102" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1abd4cffe0325484f72c472db126496c19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::JsonNode::JsonNode</definition>
        <argsstring>(boost::json::value &amp;&amp;v)</argsstring>
        <name>JsonNode</name>
        <qualifiedname>zmbt::JsonNode::JsonNode</qualifiedname>
        <param>
          <type>boost::json::value &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="103" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1ab8f3696de96257be1277611e0c55ff9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; boost::json::value &gt; const &amp;</type>
        <definition>std::shared_ptr&lt; boost::json::value &gt; const  &amp; zmbt::JsonNode::root</definition>
        <argsstring>() const</argsstring>
        <name>root</name>
        <qualifiedname>zmbt::JsonNode::root</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="105" column="27" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a32ba0b38fdc68e641952cb4ff9a337d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref></type>
        <definition>JsonNode zmbt::JsonNode::root_node</definition>
        <argsstring>() const</argsstring>
        <name>root_node</name>
        <qualifiedname>zmbt::JsonNode::root_node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="107" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a8621a347159275efd6d91f02dd1b12cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::string_view</type>
        <definition>boost::json::string_view zmbt::JsonNode::node_ptr</definition>
        <argsstring>() const</argsstring>
        <name>node_ptr</name>
        <qualifiedname>zmbt::JsonNode::node_ptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="109" column="30" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1aa0832310d1b8f4574565b9f081e82163" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref></type>
        <definition>JsonNode zmbt::JsonNode::copy</definition>
        <argsstring>() const</argsstring>
        <name>copy</name>
        <qualifiedname>zmbt::JsonNode::copy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="111" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a94322f50fd1c8bbc463e09a5b455ac9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::value const *</type>
        <definition>boost::json::value const  * zmbt::JsonNode::node</definition>
        <argsstring>(boost::json::error_code &amp;ec) const</argsstring>
        <name>node</name>
        <qualifiedname>zmbt::JsonNode::node</qualifiedname>
        <param>
          <type>boost::json::error_code &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="116" column="30" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a7509b7f65c59801d3e559afed944cebe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::value *</type>
        <definition>boost::json::value * zmbt::JsonNode::node</definition>
        <argsstring>(boost::json::error_code &amp;ec)</argsstring>
        <name>node</name>
        <qualifiedname>zmbt::JsonNode::node</qualifiedname>
        <param>
          <type>boost::json::error_code &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="121" column="24" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1ac172c62ca3e9e5f8c7e7d2d548af17e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::value const &amp;</type>
        <definition>boost::json::value const  &amp; zmbt::JsonNode::node</definition>
        <argsstring>() const</argsstring>
        <name>node</name>
        <qualifiedname>zmbt::JsonNode::node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="127" column="30" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a2ba6f51fd77a24a14bf4e20e9c72aa7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::value &amp;</type>
        <definition>boost::json::value &amp; zmbt::JsonNode::node</definition>
        <argsstring>()</argsstring>
        <name>node</name>
        <qualifiedname>zmbt::JsonNode::node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="131" column="24" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1ab991000693b56652624b1e8249118905" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::array const &amp;</type>
        <definition>boost::json::array const  &amp; zmbt::JsonNode::as_array</definition>
        <argsstring>() const</argsstring>
        <name>as_array</name>
        <qualifiedname>zmbt::JsonNode::as_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="137" column="30" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1add81f85ab5830070da8168dcdbe5fded" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::array &amp;</type>
        <definition>boost::json::array &amp; zmbt::JsonNode::as_array</definition>
        <argsstring>()</argsstring>
        <name>as_array</name>
        <qualifiedname>zmbt::JsonNode::as_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="141" column="24" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1aabe2669aa79480fd61775da1aa841f0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::object const &amp;</type>
        <definition>boost::json::object const  &amp; zmbt::JsonNode::as_object</definition>
        <argsstring>() const</argsstring>
        <name>as_object</name>
        <qualifiedname>zmbt::JsonNode::as_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="147" column="31" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1ad00991df4ff2c47ccbb7ee3c8617a2be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::object &amp;</type>
        <definition>boost::json::object &amp; zmbt::JsonNode::as_object</definition>
        <argsstring>()</argsstring>
        <name>as_object</name>
        <qualifiedname>zmbt::JsonNode::as_object</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="151" column="25" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a8a10686f9f00b412a81842cf8dc55938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref> &amp;</type>
        <definition>JsonNode &amp; zmbt::JsonNode::operator=</definition>
        <argsstring>(JsonNode const &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>zmbt::JsonNode::operator=</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="156" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1ae055519def003074cf2b0f6092dde352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref> &amp;</type>
        <definition>JsonNode &amp; zmbt::JsonNode::operator=</definition>
        <argsstring>(JsonNode &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>zmbt::JsonNode::operator=</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="157" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a6150c8a285b1bb50d84f162265b90532" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value const &amp;</type>
        <definition>boost::json::value const  &amp; zmbt::JsonNode::at</definition>
        <argsstring>(boost::json::string_view json_ptr) const</argsstring>
        <name>at</name>
        <qualifiedname>zmbt::JsonNode::at</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>json_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="160" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a84933878fdd337ebc9e2b86354249eca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>boost::json::value const &amp;</type>
        <definition>boost::json::value const  &amp; zmbt::JsonNode::at</definition>
        <argsstring>(boost::json::string_view fmtstr, T &amp;&amp;first, A &amp;&amp;... rest) const</argsstring>
        <name>at</name>
        <qualifiedname>zmbt::JsonNode::at</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="163" column="30" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a1ba68dbe2e115d73f01450f10cc28ffe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::value const *</type>
        <definition>boost::json::value const  * zmbt::JsonNode::find_pointer</definition>
        <argsstring>(boost::json::string_view json_ptr) const</argsstring>
        <name>find_pointer</name>
        <qualifiedname>zmbt::JsonNode::find_pointer</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>json_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="168" column="30" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="168" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a17406db67f118b3321d409c383dcd6b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>boost::json::value const *</type>
        <definition>boost::json::value const  * zmbt::JsonNode::find_pointer</definition>
        <argsstring>(boost::json::string_view fmtstr, T &amp;&amp;first, A &amp;&amp;... rest) const</argsstring>
        <name>find_pointer</name>
        <qualifiedname>zmbt::JsonNode::find_pointer</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="176" column="30" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1abedf50b9e9a1f53bc80d786361f3cb64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>boost::json::value *</type>
        <definition>boost::json::value * zmbt::JsonNode::find_pointer</definition>
        <argsstring>(boost::json::string_view fmtstr, T &amp;&amp;first, A &amp;&amp;... rest)</argsstring>
        <name>find_pointer</name>
        <qualifiedname>zmbt::JsonNode::find_pointer</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="182" column="24" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1abec8928b96c2d4ebed8e88ab6d266b49" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::JsonNode::contains</definition>
        <argsstring>(boost::json::string_view json_ptr) const</argsstring>
        <name>contains</name>
        <qualifiedname>zmbt::JsonNode::contains</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>json_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="188" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a989686a3af82488b5e084f7ab435bc10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool zmbt::JsonNode::contains</definition>
        <argsstring>(boost::json::string_view fmtstr, T &amp;&amp;first, A &amp;&amp;... rest) const</argsstring>
        <name>contains</name>
        <qualifiedname>zmbt::JsonNode::contains</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="194" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1aec1287d0eb7786bb31658b20aeb9f93c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::value &amp;</type>
        <definition>boost::json::value &amp; zmbt::JsonNode::operator()</definition>
        <argsstring>(boost::json::string_view json_ptr=&quot;&quot;)</argsstring>
        <name>operator()</name>
        <qualifiedname>zmbt::JsonNode::operator()</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>json_ptr</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="200" column="24" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a1cc6159664f9febde569a50064791af7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>boost::json::value &amp;</type>
        <definition>boost::json::value &amp; zmbt::JsonNode::operator()</definition>
        <argsstring>(boost::json::string_view fmtstr, T &amp;&amp;first, A &amp;&amp;... rest)</argsstring>
        <name>operator()</name>
        <qualifiedname>zmbt::JsonNode::operator()</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="206" column="24" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1ae50d670d04030282d803def6996170ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::value const &amp;</type>
        <definition>boost::json::value const  &amp; zmbt::JsonNode::operator()</definition>
        <argsstring>(boost::json::string_view json_ptr=&quot;&quot;) const</argsstring>
        <name>operator()</name>
        <qualifiedname>zmbt::JsonNode::operator()</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>json_ptr</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="212" column="30" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1affc7ca4faf96e71f4ef6ff81a78377d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>boost::json::value const &amp;</type>
        <definition>boost::json::value const  &amp; zmbt::JsonNode::operator()</definition>
        <argsstring>(boost::json::string_view fmtstr, T &amp;&amp;first, A &amp;&amp;... rest) const</argsstring>
        <name>operator()</name>
        <qualifiedname>zmbt::JsonNode::operator()</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="218" column="30" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a5357e07d5b5f3fda16e142c980cd1432" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::JsonNode::get_or_default</definition>
        <argsstring>(boost::json::string_view json_ptr, boost::json::value const &amp;dflt) const</argsstring>
        <name>get_or_default</name>
        <qualifiedname>zmbt::JsonNode::get_or_default</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>json_ptr</declname>
        </param>
        <param>
          <type>boost::json::value const &amp;</type>
          <declname>dflt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="223" column="24" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="223" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1af7424483d335e60ba0d60f1ee42ac29d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::array &amp;</type>
        <definition>boost::json::array &amp; zmbt::JsonNode::get_or_create_array</definition>
        <argsstring>(boost::json::string_view json_ptr=&quot;&quot;)</argsstring>
        <name>get_or_create_array</name>
        <qualifiedname>zmbt::JsonNode::get_or_create_array</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>json_ptr</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="229" column="24" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a368b5d4d5c762a250b00bac7d6b2337e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>boost::json::array &amp;</type>
        <definition>boost::json::array &amp; zmbt::JsonNode::get_or_create_array</definition>
        <argsstring>(boost::json::string_view fmtstr, T &amp;&amp;first, A &amp;&amp;... rest)</argsstring>
        <name>get_or_create_array</name>
        <qualifiedname>zmbt::JsonNode::get_or_create_array</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="234" column="24" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a7a2b6055d6430933ab6fe6b0f0a974fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::object &amp;</type>
        <definition>boost::json::object &amp; zmbt::JsonNode::get_or_create_object</definition>
        <argsstring>(boost::json::string_view json_ptr=&quot;&quot;)</argsstring>
        <name>get_or_create_object</name>
        <qualifiedname>zmbt::JsonNode::get_or_create_object</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>json_ptr</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="239" column="25" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a1abb3cee68b7b23cec5a6290f33ecaae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>boost::json::object &amp;</type>
        <definition>boost::json::object &amp; zmbt::JsonNode::get_or_create_object</definition>
        <argsstring>(boost::json::string_view fmtstr, T &amp;&amp;first, A &amp;&amp;... rest)</argsstring>
        <name>get_or_create_object</name>
        <qualifiedname>zmbt::JsonNode::get_or_create_object</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="246" column="25" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a93815db2518b660dbfb4c409b8b3eade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref></type>
        <definition>JsonNode zmbt::JsonNode::branch</definition>
        <argsstring>(boost::json::kind kind, boost::json::string_view subnode_ptr)</argsstring>
        <name>branch</name>
        <qualifiedname>zmbt::JsonNode::branch</qualifiedname>
        <param>
          <type>boost::json::kind</type>
          <declname>kind</declname>
        </param>
        <param>
          <type>boost::json::string_view</type>
          <declname>subnode_ptr</declname>
        </param>
        <briefdescription>
<para>create <ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref> proxy over subnode </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="259" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a1c8b21b122e463961453c43fedc78287" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref></type>
        <definition>JsonNode zmbt::JsonNode::branch</definition>
        <argsstring>(boost::json::string_view subnode_ptr)</argsstring>
        <name>branch</name>
        <qualifiedname>zmbt::JsonNode::branch</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>subnode_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="261" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a972055ba60f4e9d3b4ad5809c5f6a331" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref></type>
        <definition>JsonNode zmbt::JsonNode::branch</definition>
        <argsstring>(boost::json::kind kind, boost::json::string_view fmtstr, T &amp;&amp;first, A &amp;&amp;... rest)</argsstring>
        <name>branch</name>
        <qualifiedname>zmbt::JsonNode::branch</qualifiedname>
        <param>
          <type>boost::json::kind</type>
          <declname>kind</declname>
        </param>
        <param>
          <type>boost::json::string_view</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="267" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a752c9d5dcffb9bce8deeeb1f020ca811" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref></type>
        <definition>JsonNode zmbt::JsonNode::branch</definition>
        <argsstring>(boost::json::string_view fmtstr, T &amp;&amp;first, A &amp;&amp;... rest)</argsstring>
        <name>branch</name>
        <qualifiedname>zmbt::JsonNode::branch</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="273" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="273" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a6c1f9757db25d9dd9e0bbd4a751afae2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::JsonNode::is_null</definition>
        <argsstring>() const</argsstring>
        <name>is_null</name>
        <qualifiedname>zmbt::JsonNode::is_null</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="278" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1JsonNode_1a735bc6c05e12e0e30fa966beb85520db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t zmbt::JsonNode::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>zmbt::JsonNode::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="283" column="17" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="283" bodyend="297"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classzmbt_1_1JsonNode_1a885be49ca58d042a265cc0a53f2fcd6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, JsonNode const &amp;view)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>zmbt::JsonNode::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref> const &amp;</type>
          <declname>view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="252" column="12" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="252" bodyend="256"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Mutator/accessor wrapper over shared JSON value. </para>
    </briefdescription>
    <detaileddescription>
<para><bold>Provides</bold> read/write access to the referenced value internal structure via JSON Pointer. Each instance owns a shared pointer to the root value, so subnode proxies may prolong original object lifetime.</para>
<para><bold>Additions</bold> to the standard JSON Pointer syntax: At-the-end token: &apos;@&apos;. Points to the last element of an array. Queries with at-the-end token always results in creating a new node on empty array. Past-the-end token: &apos;+&apos;. Points to the new element of an array. Queries with past-the-end token always results in creating a new node.</para>
<para><bold>The</bold> rules for the additional tokens are:</para>
<para><bold>For</bold> each @ token<itemizedlist>
<listitem><para>if the node is null, the token substituted with 0; otherwise</para>
</listitem><listitem><para>if the node is an empty array, the token substituted with 0; otherwise</para>
</listitem><listitem><para>if the node is a non-empty array, the token substituted with node size - 1; otherwise</para>
</listitem><listitem><para>an error is produced.</para>
</listitem></itemizedlist>
</para>
<para><bold>For</bold> each + token<itemizedlist>
<listitem><para>if the node is null, the token substituted with 0; otherwise</para>
</listitem><listitem><para>if the node is an array, the token substituted with node size; otherwise</para>
</listitem><listitem><para>an error is produced. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" line="53" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/core/json_node.hpp" bodystart="54" bodyend="298"/>
    <listofallmembers>
      <member refid="classzmbt_1_1JsonNode_1ab991000693b56652624b1e8249118905" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>as_array</name></member>
      <member refid="classzmbt_1_1JsonNode_1add81f85ab5830070da8168dcdbe5fded" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>as_array</name></member>
      <member refid="classzmbt_1_1JsonNode_1aabe2669aa79480fd61775da1aa841f0b" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>as_object</name></member>
      <member refid="classzmbt_1_1JsonNode_1ad00991df4ff2c47ccbb7ee3c8617a2be" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>as_object</name></member>
      <member refid="classzmbt_1_1JsonNode_1a6150c8a285b1bb50d84f162265b90532" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>at</name></member>
      <member refid="classzmbt_1_1JsonNode_1a84933878fdd337ebc9e2b86354249eca" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>at</name></member>
      <member refid="classzmbt_1_1JsonNode_1a93815db2518b660dbfb4c409b8b3eade" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>branch</name></member>
      <member refid="classzmbt_1_1JsonNode_1a1c8b21b122e463961453c43fedc78287" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>branch</name></member>
      <member refid="classzmbt_1_1JsonNode_1a972055ba60f4e9d3b4ad5809c5f6a331" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>branch</name></member>
      <member refid="classzmbt_1_1JsonNode_1a752c9d5dcffb9bce8deeeb1f020ca811" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>branch</name></member>
      <member refid="classzmbt_1_1JsonNode_1abec8928b96c2d4ebed8e88ab6d266b49" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>contains</name></member>
      <member refid="classzmbt_1_1JsonNode_1a989686a3af82488b5e084f7ab435bc10" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>contains</name></member>
      <member refid="classzmbt_1_1JsonNode_1aa0832310d1b8f4574565b9f081e82163" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>copy</name></member>
      <member refid="classzmbt_1_1JsonNode_1a1ba68dbe2e115d73f01450f10cc28ffe" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>find_pointer</name></member>
      <member refid="classzmbt_1_1JsonNode_1a17406db67f118b3321d409c383dcd6b4" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>find_pointer</name></member>
      <member refid="classzmbt_1_1JsonNode_1abedf50b9e9a1f53bc80d786361f3cb64" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>find_pointer</name></member>
      <member refid="classzmbt_1_1JsonNode_1aca8ff9ea9035bec94957330f12e72764" prot="private" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>get_or_create</name></member>
      <member refid="classzmbt_1_1JsonNode_1af7424483d335e60ba0d60f1ee42ac29d" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>get_or_create_array</name></member>
      <member refid="classzmbt_1_1JsonNode_1a368b5d4d5c762a250b00bac7d6b2337e" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>get_or_create_array</name></member>
      <member refid="classzmbt_1_1JsonNode_1a2a6c111d9ee1247b2ecfbf1ea910a25d" prot="private" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>get_or_create_as</name></member>
      <member refid="classzmbt_1_1JsonNode_1a7a2b6055d6430933ab6fe6b0f0a974fe" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>get_or_create_object</name></member>
      <member refid="classzmbt_1_1JsonNode_1a1abb3cee68b7b23cec5a6290f33ecaae" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>get_or_create_object</name></member>
      <member refid="classzmbt_1_1JsonNode_1a5357e07d5b5f3fda16e142c980cd1432" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>get_or_default</name></member>
      <member refid="classzmbt_1_1JsonNode_1a6c1f9757db25d9dd9e0bbd4a751afae2" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>is_null</name></member>
      <member refid="classzmbt_1_1JsonNode_1a7e558bddac7183180a7f1d58817f6890" prot="private" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>JsonNode</name></member>
      <member refid="classzmbt_1_1JsonNode_1ab1929b0da0ed38eb455e3295c0f93a1b" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>JsonNode</name></member>
      <member refid="classzmbt_1_1JsonNode_1a81cf9a6fcda3456e86660fe9f130118d" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>JsonNode</name></member>
      <member refid="classzmbt_1_1JsonNode_1aeed6b0e14c9bac2c1d4aa5faab6009dd" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>JsonNode</name></member>
      <member refid="classzmbt_1_1JsonNode_1ae936e6e7fd44fc281c880f15f5f9e3b3" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>JsonNode</name></member>
      <member refid="classzmbt_1_1JsonNode_1a6794ff21d339c8e49042354ff7618f62" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>JsonNode</name></member>
      <member refid="classzmbt_1_1JsonNode_1a2a0f6272e205408e0a909f08dcb7ac5f" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>JsonNode</name></member>
      <member refid="classzmbt_1_1JsonNode_1ade415037edc763de41deb299d83de9a8" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>JsonNode</name></member>
      <member refid="classzmbt_1_1JsonNode_1abd4cffe0325484f72c472db126496c19" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>JsonNode</name></member>
      <member refid="classzmbt_1_1JsonNode_1a94322f50fd1c8bbc463e09a5b455ac9a" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>node</name></member>
      <member refid="classzmbt_1_1JsonNode_1a7509b7f65c59801d3e559afed944cebe" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>node</name></member>
      <member refid="classzmbt_1_1JsonNode_1ac172c62ca3e9e5f8c7e7d2d548af17e1" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>node</name></member>
      <member refid="classzmbt_1_1JsonNode_1a2ba6f51fd77a24a14bf4e20e9c72aa7f" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>node</name></member>
      <member refid="classzmbt_1_1JsonNode_1a8621a347159275efd6d91f02dd1b12cf" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>node_ptr</name></member>
      <member refid="classzmbt_1_1JsonNode_1a991ad2da732994be8d5181a97a1d7659" prot="private" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>node_ptr_</name></member>
      <member refid="classzmbt_1_1JsonNode_1aec1287d0eb7786bb31658b20aeb9f93c" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>operator()</name></member>
      <member refid="classzmbt_1_1JsonNode_1a1cc6159664f9febde569a50064791af7" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>operator()</name></member>
      <member refid="classzmbt_1_1JsonNode_1ae50d670d04030282d803def6996170ec" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>operator()</name></member>
      <member refid="classzmbt_1_1JsonNode_1affc7ca4faf96e71f4ef6ff81a78377d7" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>operator()</name></member>
      <member refid="classzmbt_1_1JsonNode_1a885be49ca58d042a265cc0a53f2fcd6f" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>operator&lt;&lt;</name></member>
      <member refid="classzmbt_1_1JsonNode_1a8a10686f9f00b412a81842cf8dc55938" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>operator=</name></member>
      <member refid="classzmbt_1_1JsonNode_1ae055519def003074cf2b0f6092dde352" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>operator=</name></member>
      <member refid="classzmbt_1_1JsonNode_1ab8f3696de96257be1277611e0c55ff9d" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>root</name></member>
      <member refid="classzmbt_1_1JsonNode_1a0aaeb708248c47340180d0a4bed1d444" prot="private" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>root_</name></member>
      <member refid="classzmbt_1_1JsonNode_1a32ba0b38fdc68e641952cb4ff9a337d3" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>root_node</name></member>
      <member refid="classzmbt_1_1JsonNode_1a735bc6c05e12e0e30fa966beb85520db" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>size</name></member>
      <member refid="classzmbt_1_1JsonNode_1aa0ce5921e5b0cc2487e480ccfa48ddb5" prot="private" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>validate_jptr</name></member>
      <member refid="classzmbt_1_1JsonNode_1a6d3cffc0dd6c3feab259cfa0ffd1bf85" prot="public" virt="non-virtual"><scope>zmbt::JsonNode</scope><name>~JsonNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
