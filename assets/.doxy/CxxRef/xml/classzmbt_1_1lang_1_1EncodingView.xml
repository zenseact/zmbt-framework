<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classzmbt_1_1lang_1_1EncodingView" kind="class" language="C++" prot="public">
    <compoundname>zmbt::lang::EncodingView</compoundname>
    <innerclass refid="structzmbt_1_1lang_1_1EncodingView_1_1ExprRow" prot="public">zmbt::lang::EncodingView::ExprRow</innerclass>
    <innerclass refid="classzmbt_1_1lang_1_1EncodingView_1_1Iterator" prot="public">zmbt::lang::EncodingView::Iterator</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classzmbt_1_1lang_1_1EncodingView_1ab39145daa6f4293b77969701d5c80972" prot="public" static="no">
        <type><ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287b" kindref="member">Keyword</ref></type>
        <definition>using zmbt::lang::EncodingView::K =  Keyword</definition>
        <argsstring></argsstring>
        <name>K</name>
        <qualifiedname>zmbt::lang::EncodingView::K</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="62" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzmbt_1_1lang_1_1EncodingView_1ac22b448ba973572f043bf4168ffd5c9a" prot="public" static="no">
        <type>boost::json::value</type>
        <definition>using zmbt::lang::EncodingView::V =  boost::json::value</definition>
        <argsstring></argsstring>
        <name>V</name>
        <qualifiedname>zmbt::lang::EncodingView::V</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="63" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzmbt_1_1lang_1_1EncodingView_1a7a1c62e422fe5d4fc69ad15ba37b7b0b" prot="public" static="no">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>using zmbt::lang::EncodingView::iterator =  Iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>zmbt::lang::EncodingView::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="123" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzmbt_1_1lang_1_1EncodingView_1aa47f037e4df0c0f129def7e716591a11" prot="public" static="no">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>using zmbt::lang::EncodingView::const_iterator =  Iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>zmbt::lang::EncodingView::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="124" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzmbt_1_1lang_1_1EncodingView_1a24352b49b714ce0a271261d3581b0dcd" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classzmbt_1_1lang_1_1EncodingView_1_1Iterator" kindref="compound">iterator</ref> &gt;</type>
        <definition>using zmbt::lang::EncodingView::reverse_iterator =  std::reverse_iterator&lt; iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <qualifiedname>zmbt::lang::EncodingView::reverse_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="125" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzmbt_1_1lang_1_1EncodingView_1a8208ae553a1936f9bb6febf2e9811d27" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classzmbt_1_1lang_1_1EncodingView_1_1Iterator" kindref="compound">const_iterator</ref> &gt;</type>
        <definition>using zmbt::lang::EncodingView::const_reverse_iterator =  std::reverse_iterator&lt;const_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <qualifiedname>zmbt::lang::EncodingView::const_reverse_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="126" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzmbt_1_1lang_1_1EncodingView_1a67b6bf8b23ddb9982428ddd32abb0f8a" prot="private" static="no" mutable="no">
        <type><ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287b" kindref="member">K</ref> const  *</type>
        <definition>K const* zmbt::lang::EncodingView::keywords_</definition>
        <argsstring></argsstring>
        <name>keywords_</name>
        <qualifiedname>zmbt::lang::EncodingView::keywords_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="215" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmbt_1_1lang_1_1EncodingView_1ad09fb4d84845c454f1bd0514e9e7df9d" prot="private" static="no" mutable="no">
        <type>std::size_t const  *</type>
        <definition>std::size_t const* zmbt::lang::EncodingView::depth_</definition>
        <argsstring></argsstring>
        <name>depth_</name>
        <qualifiedname>zmbt::lang::EncodingView::depth_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="216" column="23" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmbt_1_1lang_1_1EncodingView_1ab7fa3a8b4b9a4f60aed25c354e13a8d6" prot="private" static="no" mutable="no">
        <type>V const  *</type>
        <definition>V const* zmbt::lang::EncodingView::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>zmbt::lang::EncodingView::data_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="217" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmbt_1_1lang_1_1EncodingView_1a9d2f534dcd44fab3a4af1d88def715f0" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t zmbt::lang::EncodingView::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <qualifiedname>zmbt::lang::EncodingView::size_</qualifiedname>
        <initializer>= 0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="218" column="17" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmbt_1_1lang_1_1EncodingView_1a78e4c8574f725fb87de62a4ff600fc8e" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t zmbt::lang::EncodingView::index_offset_</definition>
        <argsstring></argsstring>
        <name>index_offset_</name>
        <qualifiedname>zmbt::lang::EncodingView::index_offset_</qualifiedname>
        <initializer>= 0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="219" column="17" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a4292af22d93fab687806589b8d9ffbf8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView_1_1Iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator zmbt::lang::EncodingView::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>zmbt::lang::EncodingView::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="128" column="20" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a0f1a348c6479fe783781dadfe1dc8165" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView_1_1Iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator zmbt::lang::EncodingView::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>zmbt::lang::EncodingView::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="129" column="20" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1ae45cb52591d938a20bc7bb8ae351f8f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView_1_1Iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator zmbt::lang::EncodingView::cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <qualifiedname>zmbt::lang::EncodingView::cbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="130" column="20" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a407b6c4694e996d09a37e197dd104513" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView_1_1Iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator zmbt::lang::EncodingView::cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <qualifiedname>zmbt::lang::EncodingView::cend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="131" column="20" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a7674e396f2500566b5549db5a57ee84d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator zmbt::lang::EncodingView::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <qualifiedname>zmbt::lang::EncodingView::rbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="133" column="28" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a80d0292b9b6c51f3107e4e1a393b1207" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator zmbt::lang::EncodingView::rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <qualifiedname>zmbt::lang::EncodingView::rend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="134" column="28" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1af4528845ce3d237bf54a18686919a424" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator zmbt::lang::EncodingView::crbegin</definition>
        <argsstring>() const</argsstring>
        <name>crbegin</name>
        <qualifiedname>zmbt::lang::EncodingView::crbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="135" column="28" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a4602a8b430808811c1d029d361d88995" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator zmbt::lang::EncodingView::crend</definition>
        <argsstring>() const</argsstring>
        <name>crend</name>
        <qualifiedname>zmbt::lang::EncodingView::crend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="136" column="28" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1ac7dfbca00ad7da85b34b1f15735fb7ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zmbt::lang::EncodingView::EncodingView</definition>
        <argsstring>(Encoding &amp;&amp;root)=delete</argsstring>
        <name>EncodingView</name>
        <qualifiedname>zmbt::lang::EncodingView::EncodingView</qualifiedname>
        <param>
          <type><ref refid="structzmbt_1_1lang_1_1Encoding" kindref="compound">Encoding</ref> &amp;&amp;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="138" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1aae4ac4b027b735e90fef301ea7b3d6b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zmbt::lang::EncodingView::EncodingView</definition>
        <argsstring>()=default</argsstring>
        <name>EncodingView</name>
        <qualifiedname>zmbt::lang::EncodingView::EncodingView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="140" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a1bfb552283ab4212c701e714a46c5c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zmbt::lang::EncodingView::EncodingView</definition>
        <argsstring>(K const *k, std::size_t const *d, V const *v, std::size_t sz, std::size_t index_offset)</argsstring>
        <name>EncodingView</name>
        <qualifiedname>zmbt::lang::EncodingView::EncodingView</qualifiedname>
        <param>
          <type><ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287b" kindref="member">K</ref> const *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::size_t const *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>V const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>index_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="143" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a657fba8bbec1a2c01100d2dc6419dcf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zmbt::lang::EncodingView::EncodingView</definition>
        <argsstring>(Encoding const &amp;root)</argsstring>
        <name>EncodingView</name>
        <qualifiedname>zmbt::lang::EncodingView::EncodingView</qualifiedname>
        <param>
          <type><ref refid="structzmbt_1_1lang_1_1Encoding" kindref="compound">Encoding</ref> const &amp;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="146" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a9afb813ff231fd69a9c2ab7d427dc6bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t zmbt::lang::EncodingView::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>zmbt::lang::EncodingView::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="148" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1aa8f60f02838e09ff14c4c9fae996c72b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::EncodingView::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>zmbt::lang::EncodingView::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="149" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1ac800590900bee5aed4e6b410f2cfbbdb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t zmbt::lang::EncodingView::index_offset</definition>
        <argsstring>() const</argsstring>
        <name>index_offset</name>
        <qualifiedname>zmbt::lang::EncodingView::index_offset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="151" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1adabeef1a686d37b8b3cfcb1a6c8e819f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t zmbt::lang::EncodingView::depth_offset</definition>
        <argsstring>() const</argsstring>
        <name>depth_offset</name>
        <qualifiedname>zmbt::lang::EncodingView::depth_offset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="152" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a499778ff0f74f5697cc0a1be65a3986d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structzmbt_1_1lang_1_1EncodingView_1_1ExprRow" kindref="compound">ExprRow</ref></type>
        <definition>ExprRow zmbt::lang::EncodingView::front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <qualifiedname>zmbt::lang::EncodingView::front</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="155" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a8d93fbb9330de4a6c70aa3e981cf31f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structzmbt_1_1lang_1_1EncodingView_1_1ExprRow" kindref="compound">ExprRow</ref></type>
        <definition>ExprRow zmbt::lang::EncodingView::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <qualifiedname>zmbt::lang::EncodingView::back</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="156" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1ac9273c68403981636865c1fd5e16f2d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structzmbt_1_1lang_1_1EncodingView_1_1ExprRow" kindref="compound">ExprRow</ref></type>
        <definition>ExprRow zmbt::lang::EncodingView::at</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>at</name>
        <qualifiedname>zmbt::lang::EncodingView::at</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get node at index i Throws std::range_error if out of bounds </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="160" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a7d30ed38fc553dee1f1fcb7b50833384" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structzmbt_1_1lang_1_1EncodingView_1_1ExprRow" kindref="compound">ExprRow</ref></type>
        <definition>ExprRow zmbt::lang::EncodingView::operator[]</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>zmbt::lang::EncodingView::operator[]</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="163" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a329b9385df6e2a987b7a3939826cc5e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::EncodingView::operator==</definition>
        <argsstring>(EncodingView const &amp;o) const</argsstring>
        <name>operator==</name>
        <qualifiedname>zmbt::lang::EncodingView::operator==</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1EncodingView" kindref="compound">EncodingView</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="168" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1ad1adbebbdd7c9695a988f15f3363b016" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::EncodingView::operator!=</definition>
        <argsstring>(EncodingView const &amp;o) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>zmbt::lang::EncodingView::operator!=</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1EncodingView" kindref="compound">EncodingView</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="170" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a0a061cbef86b491dd36ac23b990db681" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structzmbt_1_1lang_1_1Encoding" kindref="compound">Encoding</ref></type>
        <definition>Encoding zmbt::lang::EncodingView::freeze</definition>
        <argsstring>() const</argsstring>
        <name>freeze</name>
        <qualifiedname>zmbt::lang::EncodingView::freeze</qualifiedname>
        <briefdescription>
<para>Hardcopy referenced encoding subview. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="173" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1aef826fe319ddb34856ca4df2cb81b60d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::lang::EncodingView::to_json</definition>
        <argsstring>() const</argsstring>
        <name>to_json</name>
        <qualifiedname>zmbt::lang::EncodingView::to_json</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="175" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a076eabc050bb53f5d1a502a1cb68c1b2" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView" kindref="compound">EncodingView</ref></type>
        <definition>EncodingView zmbt::lang::EncodingView::slice</definition>
        <argsstring>(std::size_t start, std::size_t count) const noexcept</argsstring>
        <name>slice</name>
        <qualifiedname>zmbt::lang::EncodingView::slice</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Create a subview [start, start+count) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="178" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a67142966b16cacb952b57873b1cffbb3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView" kindref="compound">EncodingView</ref></type>
        <definition>EncodingView zmbt::lang::EncodingView::subtree</definition>
        <argsstring>(std::size_t const node) const noexcept</argsstring>
        <name>subtree</name>
        <qualifiedname>zmbt::lang::EncodingView::subtree</qualifiedname>
        <param>
          <type>std::size_t const</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Get a subview at specified node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="181" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a312643dee0001562b30f0074701ca192" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView" kindref="compound">EncodingView</ref></type>
        <definition>EncodingView zmbt::lang::EncodingView::traverse_subtrees</definition>
        <argsstring>(std::size_t const node, std::size_t &amp;next) const noexcept</argsstring>
        <name>traverse_subtrees</name>
        <qualifiedname>zmbt::lang::EncodingView::traverse_subtrees</qualifiedname>
        <param>
          <type>std::size_t const</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::size_t &amp;</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Traverse subtrees from starting position. <computeroutput>next</computeroutput> arg points to the next subtree index at the same depth, or to size() if none. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="186" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1ae00f5b3dc2902b6d5471df1de67df329" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="classzmbt_1_1lang_1_1EncodingView" kindref="compound">EncodingView</ref> &gt;</type>
        <definition>std::list&lt; EncodingView &gt; zmbt::lang::EncodingView::children</definition>
        <argsstring>() const</argsstring>
        <name>children</name>
        <qualifiedname>zmbt::lang::EncodingView::children</qualifiedname>
        <briefdescription>
<para>Children subviews. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="189" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1adc6cebcac0a57fe70c94ee9ed4283b25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t zmbt::lang::EncodingView::arity</definition>
        <argsstring>() const</argsstring>
        <name>arity</name>
        <qualifiedname>zmbt::lang::EncodingView::arity</qualifiedname>
        <briefdescription>
<para>Number of children. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="192" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a076ce57798900746cbe45ab5f30c389e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287b" kindref="member">Keyword</ref></type>
        <definition>Keyword zmbt::lang::EncodingView::head</definition>
        <argsstring>() const noexcept</argsstring>
        <name>head</name>
        <qualifiedname>zmbt::lang::EncodingView::head</qualifiedname>
        <briefdescription>
<para>Root node keyword. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="195" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1abf86042a801342e0f062506700e2f8a9" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t zmbt::lang::EncodingView::child_idx</definition>
        <argsstring>(int ord) const noexcept</argsstring>
        <name>child_idx</name>
        <qualifiedname>zmbt::lang::EncodingView::child_idx</qualifiedname>
        <param>
          <type>int</type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get child # ord node index. Negative ord resolves as reverse. If not found, returns size() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="200" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1ad669e4749374711cd98c3a9c2dd190cd" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1lang_1_1EncodingView" kindref="compound">EncodingView</ref></type>
        <definition>EncodingView zmbt::lang::EncodingView::child</definition>
        <argsstring>(int ord) const noexcept</argsstring>
        <name>child</name>
        <qualifiedname>zmbt::lang::EncodingView::child</qualifiedname>
        <param>
          <type>int</type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get subview on child # ord If not found, returns empty view </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="204" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a506830c07d014fe47718a801c3583237" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::EncodingView::is_const</definition>
        <argsstring>() const</argsstring>
        <name>is_const</name>
        <qualifiedname>zmbt::lang::EncodingView::is_const</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="206" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a5e862bb1e47bf4f315c1f5f126d701d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::lang::EncodingView::is_boolean</definition>
        <argsstring>() const</argsstring>
        <name>is_boolean</name>
        <qualifiedname>zmbt::lang::EncodingView::is_boolean</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="207" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1ab9f563b23862e94e4c763385d812d69b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacezmbt_1_1lang_1a5a7dfa16b02bf75f82915d9893e8287b" kindref="member">K</ref> const *</type>
        <definition>K const  * zmbt::lang::EncodingView::if_keywords</definition>
        <argsstring>() const</argsstring>
        <name>if_keywords</name>
        <qualifiedname>zmbt::lang::EncodingView::if_keywords</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="209" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a37fb567a8ec3bf2b37ab8fb37266d271" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t const *</type>
        <definition>std::size_t const  * zmbt::lang::EncodingView::if_depth</definition>
        <argsstring>() const</argsstring>
        <name>if_depth</name>
        <qualifiedname>zmbt::lang::EncodingView::if_depth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="210" column="23" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1lang_1_1EncodingView_1a222c328fa228f0ca9e22c83d94232c64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>V const *</type>
        <definition>V const  * zmbt::lang::EncodingView::if_data</definition>
        <argsstring>() const</argsstring>
        <name>if_data</name>
        <qualifiedname>zmbt::lang::EncodingView::if_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="211" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="211" bodyend="211"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" line="60" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/encoding.hpp" bodystart="60" bodyend="220"/>
    <listofallmembers>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1adc6cebcac0a57fe70c94ee9ed4283b25" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>arity</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ac9273c68403981636865c1fd5e16f2d6" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>at</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a8d93fbb9330de4a6c70aa3e981cf31f7" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>back</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a4292af22d93fab687806589b8d9ffbf8" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>begin</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ae45cb52591d938a20bc7bb8ae351f8f1" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>cbegin</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a407b6c4694e996d09a37e197dd104513" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>cend</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ad669e4749374711cd98c3a9c2dd190cd" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>child</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1abf86042a801342e0f062506700e2f8a9" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>child_idx</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ae00f5b3dc2902b6d5471df1de67df329" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>children</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1aa47f037e4df0c0f129def7e716591a11" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>const_iterator</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a8208ae553a1936f9bb6febf2e9811d27" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>const_reverse_iterator</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1af4528845ce3d237bf54a18686919a424" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>crbegin</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a4602a8b430808811c1d029d361d88995" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>crend</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ab7fa3a8b4b9a4f60aed25c354e13a8d6" prot="private" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>data_</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ad09fb4d84845c454f1bd0514e9e7df9d" prot="private" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>depth_</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1adabeef1a686d37b8b3cfcb1a6c8e819f" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>depth_offset</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1aa8f60f02838e09ff14c4c9fae996c72b" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>empty</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ac7dfbca00ad7da85b34b1f15735fb7ee" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>EncodingView</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1aae4ac4b027b735e90fef301ea7b3d6b3" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>EncodingView</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a1bfb552283ab4212c701e714a46c5c4c" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>EncodingView</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a657fba8bbec1a2c01100d2dc6419dcf3" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>EncodingView</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a0f1a348c6479fe783781dadfe1dc8165" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>end</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a0a061cbef86b491dd36ac23b990db681" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>freeze</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a499778ff0f74f5697cc0a1be65a3986d" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>front</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a076ce57798900746cbe45ab5f30c389e" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>head</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a222c328fa228f0ca9e22c83d94232c64" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>if_data</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a37fb567a8ec3bf2b37ab8fb37266d271" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>if_depth</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ab9f563b23862e94e4c763385d812d69b" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>if_keywords</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ac800590900bee5aed4e6b410f2cfbbdb" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>index_offset</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a78e4c8574f725fb87de62a4ff600fc8e" prot="private" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>index_offset_</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a5e862bb1e47bf4f315c1f5f126d701d2" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>is_boolean</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a506830c07d014fe47718a801c3583237" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>is_const</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a7a1c62e422fe5d4fc69ad15ba37b7b0b" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>iterator</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ab39145daa6f4293b77969701d5c80972" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>K</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a67b6bf8b23ddb9982428ddd32abb0f8a" prot="private" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>keywords_</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ad1adbebbdd7c9695a988f15f3363b016" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>operator!=</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a329b9385df6e2a987b7a3939826cc5e8" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>operator==</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a7d30ed38fc553dee1f1fcb7b50833384" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>operator[]</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a7674e396f2500566b5549db5a57ee84d" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>rbegin</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a80d0292b9b6c51f3107e4e1a393b1207" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>rend</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a24352b49b714ce0a271261d3581b0dcd" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>reverse_iterator</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a9afb813ff231fd69a9c2ab7d427dc6bd" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>size</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a9d2f534dcd44fab3a4af1d88def715f0" prot="private" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>size_</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a076eabc050bb53f5d1a502a1cb68c1b2" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>slice</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a67142966b16cacb952b57873b1cffbb3" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>subtree</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1aef826fe319ddb34856ca4df2cb81b60d" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>to_json</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1a312643dee0001562b30f0074701ca192" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>traverse_subtrees</name></member>
      <member refid="classzmbt_1_1lang_1_1EncodingView_1ac22b448ba973572f043bf4168ffd5c9a" prot="public" virt="non-virtual"><scope>zmbt::lang::EncodingView</scope><name>V</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
