<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classzmbt_1_1Environment" kind="class" language="C++" prot="public">
    <compoundname>zmbt::Environment</compoundname>
    <includes refid="environment_8hpp" local="no">environment.hpp</includes>
    <innerclass refid="classzmbt_1_1Environment_1_1InterfaceHandle" prot="public">zmbt::Environment::InterfaceHandle</innerclass>
    <innerclass refid="classzmbt_1_1Environment_1_1TypedInterfaceHandle" prot="public">zmbt::Environment::TypedInterfaceHandle</innerclass>
    <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classzmbt_1_1Environment_1a42229f9be181baba2863e445b2eddb4f" prot="protected" static="no">
        <type>typename EnvironmentData::lock_t</type>
        <definition>using zmbt::Environment::lock_t =  typename EnvironmentData::lock_t</definition>
        <argsstring></argsstring>
        <name>lock_t</name>
        <qualifiedname>zmbt::Environment::lock_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="57" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzmbt_1_1Environment_1a3c684b8036031095ad32ccefb1c45900" prot="protected" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacezmbt_1_1reflect_1af2f57a48f2123b00a20e762360c16b8b" kindref="member">reflect::invocation_ret_t</ref>&lt; ifc_pointer_t&lt; Interface &gt; &gt;</type>
        <definition>using zmbt::Environment::return_t =  reflect::invocation_ret_t&lt;ifc_pointer_t&lt;Interface&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>return_t</name>
        <qualifiedname>zmbt::Environment::return_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="60" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzmbt_1_1Environment_1a6ef7f5da87d58acc80f65b76cc7d551f" prot="protected" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacezmbt_1_1reflect_1a8b48be14f24e67dd05fd6b9fdde421ca" kindref="member">reflect::invocation_args_unqf_t</ref>&lt; ifc_pointer_t&lt; Interface &gt; &gt;</type>
        <definition>using zmbt::Environment::unqf_args_t =  reflect::invocation_args_unqf_t&lt;ifc_pointer_t&lt;Interface&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>unqf_args_t</name>
        <qualifiedname>zmbt::Environment::unqf_args_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="63" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzmbt_1_1Environment_1a3a8c1b393c48c1f7d162f476c8771455" prot="protected" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacezmbt_1_1reflect_1a787b05eb9dd32f21a83f5867ce751585" kindref="member">reflect::invocation_args_t</ref>&lt; ifc_pointer_t&lt; Interface &gt; &gt;</type>
        <definition>using zmbt::Environment::argsref_t =  reflect::invocation_args_t&lt;ifc_pointer_t&lt;Interface&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>argsref_t</name>
        <qualifiedname>zmbt::Environment::argsref_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="67" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzmbt_1_1Environment_1ab2924a360d6d5c03d329ec3f26ad2c3f" prot="protected" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>mp_if&lt; std::is_rvalue_reference&lt; T &gt;, std::remove_reference_t&lt; T &gt;, T &gt;</type>
        <definition>using zmbt::Environment::rvref_to_val =  mp_if&lt;std::is_rvalue_reference&lt;T&gt;, std::remove_reference_t&lt;T&gt;, T&gt;</definition>
        <argsstring></argsstring>
        <name>rvref_to_val</name>
        <qualifiedname>zmbt::Environment::rvref_to_val</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="70" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzmbt_1_1Environment_1aaa81dcce721238029068948bfceec877" prot="protected" static="no">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>mp_transform&lt; rvref_to_val, argsref_t&lt; Interface &gt; &gt;</type>
        <definition>using zmbt::Environment::hookout_args_t =  mp_transform&lt;rvref_to_val, argsref_t&lt;Interface&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>hookout_args_t</name>
        <qualifiedname>zmbt::Environment::hookout_args_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="73" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classzmbt_1_1Environment_1a4f5dd637325316f34e6aa419e43232a5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class OutputRecorder</definition>
        <argsstring></argsstring>
        <name>OutputRecorder</name>
        <qualifiedname>zmbt::Environment::OutputRecorder</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1OutputRecorder" kindref="compound">OutputRecorder</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="54" column="18" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classzmbt_1_1Environment_1a43154554da11ab09fc7c409b2142295d" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structzmbt_1_1EnvironmentData" kindref="compound">EnvironmentData</ref> &gt;</type>
        <definition>std::shared_ptr&lt;EnvironmentData&gt; zmbt::Environment::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>zmbt::Environment::data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="75" column="21" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmbt_1_1Environment_1ae7abee088a88907c7a9ec11c673bc503" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structzmbt_1_1PermanentEnvData" kindref="compound">PermanentEnvData</ref> &gt;</type>
        <definition>std::shared_ptr&lt;PermanentEnvData&gt; zmbt::Environment::permanent_data_</definition>
        <argsstring></argsstring>
        <name>permanent_data_</name>
        <qualifiedname>zmbt::Environment::permanent_data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="76" column="21" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classzmbt_1_1Environment_1ab2979c081939a3f98eb4172190b3846d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmbt::Environment::SetTestError</definition>
        <argsstring>(boost::json::value &amp;&amp;msg)</argsstring>
        <name>SetTestError</name>
        <qualifiedname>zmbt::Environment::SetTestError</qualifiedname>
        <param>
          <type>boost::json::value &amp;&amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="78" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classzmbt_1_1Environment_1adf59c79cee3dca2a7243fe1c9a84a7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value const &amp;</type>
        <definition>boost::json::value const  &amp; zmbt::Environment::TestError</definition>
        <argsstring>()</argsstring>
        <name>TestError</name>
        <qualifiedname>zmbt::Environment::TestError</qualifiedname>
        <briefdescription>
<para>Current test error payload, null if none. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="87" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1aeae26cc5dd8243317ceac1085adb754b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::Environment::HasTestError</definition>
        <argsstring>()</argsstring>
        <name>HasTestError</name>
        <qualifiedname>zmbt::Environment::HasTestError</qualifiedname>
        <briefdescription>
<para>Current test error payload, null if none. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="90" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1ab75e621b6fba642e42bce746d931de89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref> &amp;</type>
        <definition>JsonNode &amp; zmbt::Environment::json_data</definition>
        <argsstring>()</argsstring>
        <name>json_data</name>
        <qualifiedname>zmbt::Environment::json_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="92" column="14" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a2e286724f164e7c429df86eb4b2dd26b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1reflect_1_1Prototypes" kindref="compound">reflect::Prototypes</ref></type>
        <definition>reflect::Prototypes zmbt::Environment::GetPrototypes</definition>
        <argsstring>(interface_id const &amp;id) const</argsstring>
        <name>GetPrototypes</name>
        <qualifiedname>zmbt::Environment::GetPrototypes</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1interface__id" kindref="compound">interface_id</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="97" column="25" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="97" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a165ad9f439f4713c6bdf661947f0f52a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1JsonNode" kindref="compound">JsonNode</ref> const &amp;</type>
        <definition>JsonNode const  &amp; zmbt::Environment::json_data</definition>
        <argsstring>() const</argsstring>
        <name>json_data</name>
        <qualifiedname>zmbt::Environment::json_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="107" column="20" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1af311177d6523da8596b007d8ffc0ea11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>lock_t</type>
        <definition>lock_t zmbt::Environment::Lock</definition>
        <argsstring>() const</argsstring>
        <name>Lock</name>
        <qualifiedname>zmbt::Environment::Lock</qualifiedname>
        <briefdescription>
<para>Get the <ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> thread lock. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="113" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1af2cf6d5acaf0c48005da8f2f78eb1073" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>lock_t</type>
        <definition>lock_t zmbt::Environment::TryLock</definition>
        <argsstring>() const</argsstring>
        <name>TryLock</name>
        <qualifiedname>zmbt::Environment::TryLock</qualifiedname>
        <briefdescription>
<para>Get the <ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> thread lock with std::try_to_lock tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="116" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a0d29714781092ea8c5f6d5302122fb6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>lock_t</type>
        <definition>lock_t zmbt::Environment::DeferLock</definition>
        <argsstring>() const</argsstring>
        <name>DeferLock</name>
        <qualifiedname>zmbt::Environment::DeferLock</qualifiedname>
        <briefdescription>
<para>Get the <ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> thread lock with std::defer_lock tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="119" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1ad81c9d34b56cce6b0023a0ab8a6ab83e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zmbt::Environment::Environment</definition>
        <argsstring>()</argsstring>
        <name>Environment</name>
        <qualifiedname>zmbt::Environment::Environment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="121" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1ab82984c4532a84dfa13c37f4d10bbcc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zmbt::Environment::Environment</definition>
        <argsstring>(Environment &amp;&amp;)=default</argsstring>
        <name>Environment</name>
        <qualifiedname>zmbt::Environment::Environment</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="123" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a3524d62737190302eb2dbc9a67826b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zmbt::Environment::Environment</definition>
        <argsstring>(Environment const &amp;)=default</argsstring>
        <name>Environment</name>
        <qualifiedname>zmbt::Environment::Environment</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="125" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1adb48d45d537f72d04509d87a56e61496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;</type>
        <definition>Environment &amp; zmbt::Environment::operator=</definition>
        <argsstring>(Environment &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>zmbt::Environment::operator=</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="127" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a79ede9acac7319b78084784a468e99c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;</type>
        <definition>Environment &amp; zmbt::Environment::operator=</definition>
        <argsstring>(Environment const &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>zmbt::Environment::operator=</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="129" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a470a349befede8d08621ed275045e32e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual zmbt::Environment::~Environment</definition>
        <argsstring>()</argsstring>
        <name>~Environment</name>
        <qualifiedname>zmbt::Environment::~Environment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="132" column="13" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a4e40e3e7bb3872bcc5c5636600bd0c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmbt::Environment::DumpToJsonLog</definition>
        <argsstring>()</argsstring>
        <name>DumpToJsonLog</name>
        <qualifiedname>zmbt::Environment::DumpToJsonLog</qualifiedname>
        <briefdescription>
<para>Dump current environment state to JSON log. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="137" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1acf1c12d821f1b7f5f06fad50e9f5aa01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmbt::Environment::SetVar</definition>
        <argsstring>(lang::Expression const &amp;key_expr, boost::json::value var)</argsstring>
        <name>SetVar</name>
        <qualifiedname>zmbt::Environment::SetVar</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <param>
          <type>boost::json::value</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Set the environment variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_expr</parametername>
</parameternamelist>
<parameterdescription>
<para>key constant expression </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="148" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1aa35b443de937e8fdc2ccc6386cdbbf90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void zmbt::Environment::SetVar</definition>
        <argsstring>(lang::Expression const &amp;key_expr, T var)</argsstring>
        <name>SetVar</name>
        <qualifiedname>zmbt::Environment::SetVar</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <param>
          <type>T</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="151" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a5beb3a2fcc2fa77c5a02c0efe9be2cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::Environment::GetVarOrUpdate</definition>
        <argsstring>(lang::Expression const &amp;key_expr, boost::json::value update_value)</argsstring>
        <name>GetVarOrUpdate</name>
        <qualifiedname>zmbt::Environment::GetVarOrUpdate</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <param>
          <type>boost::json::value</type>
          <declname>update_value</declname>
        </param>
        <briefdescription>
<para>Get or update the environment variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>update_value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="168" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a1be7bd57c86b4cdae347513f93cfe1dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T zmbt::Environment::GetVarOrUpdate</definition>
        <argsstring>(lang::Expression const &amp;key_expr, T update_value)</argsstring>
        <name>GetVarOrUpdate</name>
        <qualifiedname>zmbt::Environment::GetVarOrUpdate</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <param>
          <type>T</type>
          <declname>update_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="171" column="7" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a6c829502ec0c87f895ba3a411e286c36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::Environment::GetVarOrDefault</definition>
        <argsstring>(lang::Expression const &amp;key_expr, boost::json::value default_value={})</argsstring>
        <name>GetVarOrDefault</name>
        <qualifiedname>zmbt::Environment::GetVarOrDefault</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <param>
          <type>boost::json::value</type>
          <declname>default_value</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get the environment variable or use default. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="188" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a216ef2cd15dbb32f8ab25d5cf9c44c05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T zmbt::Environment::GetVarOrDefault</definition>
        <argsstring>(lang::Expression const &amp;key_expr, T default_value=reflect::signal_traits&lt; T &gt;::init())</argsstring>
        <name>GetVarOrDefault</name>
        <qualifiedname>zmbt::Environment::GetVarOrDefault</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <param>
          <type>T</type>
          <declname>default_value</declname>
          <defval><ref refid="structzmbt_1_1reflect_1_1signal__traits" kindref="compound">reflect::signal_traits</ref>&lt; T &gt;::init()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="191" column="7" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a76d3d4c1bf2a7575be5cbd1ade6c0d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::value</type>
        <definition>boost::json::value zmbt::Environment::GetVar</definition>
        <argsstring>(lang::Expression const &amp;key_expr)</argsstring>
        <name>GetVar</name>
        <qualifiedname>zmbt::Environment::GetVar</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <briefdescription>
<para>Get the environment variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="207" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a36b3fb82903a8e838f5c2c3f9b742bcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T zmbt::Environment::GetVar</definition>
        <argsstring>(lang::Expression const &amp;key_expr)</argsstring>
        <name>GetVar</name>
        <qualifiedname>zmbt::Environment::GetVar</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="210" column="7" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1aea0ac4a4dfb4435c638fc43db5fb1f72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void zmbt::Environment::SetShared</definition>
        <argsstring>(lang::Expression const &amp;key_expr, std::shared_ptr&lt; T &gt; data)</argsstring>
        <name>SetShared</name>
        <qualifiedname>zmbt::Environment::SetShared</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; T &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set the shared data associated with key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_expr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="226" column="10" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="226" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a3ca454f5521c8f809d28df7f89d0fc99" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; T &gt;</type>
        <definition>std::shared_ptr&lt; T &gt; zmbt::Environment::GetShared</definition>
        <argsstring>(lang::Expression const &amp;key_expr) const</argsstring>
        <name>GetShared</name>
        <qualifiedname>zmbt::Environment::GetShared</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <briefdescription>
<para>Get the shared data associated with object and string key. </para>
        </briefdescription>
        <detaileddescription>
<para>Dynamic polymorphism is not supported, as the type safety is ensured by comparing typeid(T). If the type T is not exactly the same as was used on corresponding SetShared call, the method will throw <ref refid="structzmbt_1_1environment__error" kindref="compound">environment_error</ref>.</para>
<para>If corresponding data was not set, the metod return nullptr.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmtstr</parametername>
</parameternamelist>
<parameterdescription>
<para>key format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>key format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::shared_ptr&lt;T&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="258" column="21" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="258" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a80db41621ab5859e1e2be590d31f4a5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T &amp; zmbt::Environment::GetSharedRef</definition>
        <argsstring>(lang::Expression const &amp;key_expr, A &amp;&amp;... args)</argsstring>
        <name>GetSharedRef</name>
        <qualifiedname>zmbt::Environment::GetSharedRef</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Get reference to shared var, creating it if necessary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...A</parametername>
</parameternamelist>
<parameterdescription>
<para>Constructor args for initial value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_expr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="286" column="7" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="286" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1aa898a879e426de67da590d945785ed39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::Environment::ContainsShared</definition>
        <argsstring>(lang::Expression const &amp;key_expr) const</argsstring>
        <name>ContainsShared</name>
        <qualifiedname>zmbt::Environment::ContainsShared</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <briefdescription>
<para>Check if shared variable exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="313" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1ab7349ddc7226965351ca746e137c32c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmbt::Environment::ResetInterfaceData</definition>
        <argsstring>()</argsstring>
        <name>ResetInterfaceData</name>
        <qualifiedname>zmbt::Environment::ResetInterfaceData</qualifiedname>
        <briefdescription>
<para>Clear all interface data (accessed via ArgsFor/ReturnFor) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this will invalidate interface records </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="322" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a79231e17a6bc249776bd2ed96f2ed025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zmbt::Environment::ResetAll</definition>
        <argsstring>()</argsstring>
        <name>ResetAll</name>
        <qualifiedname>zmbt::Environment::ResetAll</qualifiedname>
        <briefdescription>
<para>Clear all data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="329" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a80616a69d750090e40c4886b0bdd29b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;</type>
        <definition>Environment &amp; zmbt::Environment::RegisterAction</definition>
        <argsstring>(lang::Expression const &amp;key_expr, std::function&lt; void()&gt; action)</argsstring>
        <name>RegisterAction</name>
        <qualifiedname>zmbt::Environment::RegisterAction</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="332" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1ae238513a43a48a413c3c32340fd05c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;</type>
        <definition>Environment &amp; zmbt::Environment::RunAction</definition>
        <argsstring>(lang::Expression const &amp;key_expr)</argsstring>
        <name>RunAction</name>
        <qualifiedname>zmbt::Environment::RunAction</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="335" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a78300474b84597fba808b9a8bbe98898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;</type>
        <definition>Environment &amp; zmbt::Environment::RunActionNoCatch</definition>
        <argsstring>(lang::Expression const &amp;key_expr)</argsstring>
        <name>RunActionNoCatch</name>
        <qualifiedname>zmbt::Environment::RunActionNoCatch</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1lang_1_1Expression" kindref="compound">lang::Expression</ref> const &amp;</type>
          <declname>key_expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="336" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1ad50d09473ea269e68266dee3e6ad7712" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type><ref refid="classzmbt_1_1interface__id" kindref="compound">interface_id</ref></type>
        <definition>interface_id zmbt::Environment::RegisterParametricTriggerIfc</definition>
        <argsstring>(Interface &amp;&amp;interface)</argsstring>
        <name>RegisterParametricTriggerIfc</name>
        <qualifiedname>zmbt::Environment::RegisterParametricTriggerIfc</qualifiedname>
        <param>
          <type>Interface &amp;&amp;</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="340" column="18" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="340" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1aeeafa9586525911e50516d99b6173460" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref></type>
        <definition>object_id zmbt::Environment::RegisterParametricTriggerObj</definition>
        <argsstring>(T &amp;&amp;obj)</argsstring>
        <name>RegisterParametricTriggerObj</name>
        <qualifiedname>zmbt::Environment::RegisterParametricTriggerObj</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="353" column="15" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="353" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a18919c43ac2b30cc25635d3b5ef684cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classzmbt_1_1OutputRecorder" kindref="compound">OutputRecorder</ref> &gt;</type>
        <definition>std::shared_ptr&lt; OutputRecorder &gt; zmbt::Environment::GetRecorder</definition>
        <argsstring>(Interface &amp;&amp;interface)</argsstring>
        <name>GetRecorder</name>
        <qualifiedname>zmbt::Environment::GetRecorder</qualifiedname>
        <param>
          <type>Interface &amp;&amp;</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="372" column="21" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a2bcacb88176685ef42868ab17e07af42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classzmbt_1_1OutputRecorder" kindref="compound">OutputRecorder</ref> &gt;</type>
        <definition>std::shared_ptr&lt; OutputRecorder &gt; zmbt::Environment::GetRecorder</definition>
        <argsstring>(interface_id const &amp;ifc_id, object_id const &amp;obj_id)</argsstring>
        <name>GetRecorder</name>
        <qualifiedname>zmbt::Environment::GetRecorder</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1interface__id" kindref="compound">interface_id</ref> const &amp;</type>
          <declname>ifc_id</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref> const &amp;</type>
          <declname>obj_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="377" column="21" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="377" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a640d278d03c29102319ada55f294ead2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::string</type>
        <definition>boost::json::string zmbt::Environment::GetOrRegisterParametricTrigger</definition>
        <argsstring>(object_id const &amp;obj_id, interface_id const &amp;ifc_id)</argsstring>
        <name>GetOrRegisterParametricTrigger</name>
        <qualifiedname>zmbt::Environment::GetOrRegisterParametricTrigger</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref> const &amp;</type>
          <declname>obj_id</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1interface__id" kindref="compound">interface_id</ref> const &amp;</type>
          <declname>ifc_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="393" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a90f55feda59884ce8a12c5d6c4e1262c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class H</type>
          </param>
        </templateparamlist>
        <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;</type>
        <definition>Environment &amp; zmbt::Environment::RegisterTrigger</definition>
        <argsstring>(boost::json::string_view key, Interface &amp;&amp;interface, H &amp;&amp;host)</argsstring>
        <name>RegisterTrigger</name>
        <qualifiedname>zmbt::Environment::RegisterTrigger</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>key</declname>
        </param>
        <param>
          <type>Interface &amp;&amp;</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>H &amp;&amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
<para>Register test trigger to enable FFI in the test model runners. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>H</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Interface</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>callable host object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>callable interface handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>string key, unique per environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="407" column="17" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="407" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a9e6e0fa81bd0820e8879cb8f74ee86ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;</type>
        <definition>Environment &amp; zmbt::Environment::RegisterTrigger</definition>
        <argsstring>(boost::json::string_view key, Interface &amp;&amp;interface)</argsstring>
        <name>RegisterTrigger</name>
        <qualifiedname>zmbt::Environment::RegisterTrigger</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>key</declname>
        </param>
        <param>
          <type>Interface &amp;&amp;</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="436" column="17" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1affd0ffbb3d79b0c6dd267ed49759cd13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
          <param>
            <type>class H</type>
          </param>
        </templateparamlist>
        <type>boost::json::string</type>
        <definition>boost::json::string zmbt::Environment::RegisterAnonymousTrigger</definition>
        <argsstring>(Interface &amp;&amp;interface, H &amp;&amp;host)</argsstring>
        <name>RegisterAnonymousTrigger</name>
        <qualifiedname>zmbt::Environment::RegisterAnonymousTrigger</qualifiedname>
        <param>
          <type>Interface &amp;&amp;</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>H &amp;&amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="443" column="25" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="443" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a322a8e7357c97a35cb2e379411ff1f06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::Environment::HasTrigger</definition>
        <argsstring>(boost::json::string_view key) const</argsstring>
        <name>HasTrigger</name>
        <qualifiedname>zmbt::Environment::HasTrigger</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="451" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a56de63db53a73115a20c0dbacb618716" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmbt::Environment::HasAction</definition>
        <argsstring>(boost::json::string_view key) const</argsstring>
        <name>HasAction</name>
        <qualifiedname>zmbt::Environment::HasAction</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="453" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a7c3db0242f6b8576cfa13b1f68a8a9f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;</type>
        <definition>Environment &amp; zmbt::Environment::InitializeInterfaceHandlers</definition>
        <argsstring>(Interface &amp;&amp;interface)</argsstring>
        <name>InitializeInterfaceHandlers</name>
        <qualifiedname>zmbt::Environment::InitializeInterfaceHandlers</qualifiedname>
        <param>
          <type>Interface &amp;&amp;</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="457" column="17" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="457" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1ac5cb569db6d5f58eeabe8cb792da6ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;</type>
        <definition>Environment &amp; zmbt::Environment::RegisterInterface</definition>
        <argsstring>(boost::json::string_view key, interface_id const &amp;ifc_id, object_id const &amp;obj_id)</argsstring>
        <name>RegisterInterface</name>
        <qualifiedname>zmbt::Environment::RegisterInterface</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1interface__id" kindref="compound">interface_id</ref> const &amp;</type>
          <declname>ifc_id</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref> const &amp;</type>
          <declname>obj_id</declname>
        </param>
        <briefdescription>
<para>Register interface to enable FFI in the test model runners. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj_id</parametername>
</parameternamelist>
<parameterdescription>
<para>object associated with callable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ifc_id</parametername>
</parameternamelist>
<parameterdescription>
<para>callable handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>string key, unique per environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="478" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a3560e1aa9381b5fb62e521f2631ce570" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp;</type>
        <definition>Environment &amp; zmbt::Environment::RegisterAnonymousInterface</definition>
        <argsstring>(interface_id const &amp;ifc_id, object_id const &amp;obj_id)</argsstring>
        <name>RegisterAnonymousInterface</name>
        <qualifiedname>zmbt::Environment::RegisterAnonymousInterface</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1interface__id" kindref="compound">interface_id</ref> const &amp;</type>
          <declname>ifc_id</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref> const &amp;</type>
          <declname>obj_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="480" column="17" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="480" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1ac8ef532c18b30d435aa1f2390dbafd7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_ifc_handle&lt; Interface &gt;::value, <ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp; &gt;</type>
        <definition>enable_if_t&lt; is_ifc_handle&lt; Interface &gt;::value, Environment &amp; &gt; zmbt::Environment::RegisterInterface</definition>
        <argsstring>(boost::json::string_view key, Interface &amp;&amp;interface, object_id const &amp;obj_id=object_id{ifc_host_nullptr&lt; Interface &gt;})</argsstring>
        <name>RegisterInterface</name>
        <qualifiedname>zmbt::Environment::RegisterInterface</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>key</declname>
        </param>
        <param>
          <type>Interface &amp;&amp;</type>
          <declname>interface</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref> const &amp;</type>
          <declname>obj_id</declname>
          <defval><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref>{<ref refid="namespacezmbt_1adc01b626dc1a700a7098a42dee5c824d" kindref="member">ifc_host_nullptr</ref>&lt; Interface &gt;}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="488" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="488" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a7496a91885401b2aaed28dbb5d97879f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Interface</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_ifc_handle&lt; Interface &gt;::value, <ref refid="classzmbt_1_1Environment" kindref="compound">Environment</ref> &amp; &gt;</type>
        <definition>enable_if_t&lt; is_ifc_handle&lt; Interface &gt;::value, Environment &amp; &gt; zmbt::Environment::RegisterAnonymousInterface</definition>
        <argsstring>(Interface &amp;&amp;interface, object_id const &amp;obj_id=object_id{ifc_host_nullptr&lt; Interface &gt;})</argsstring>
        <name>RegisterAnonymousInterface</name>
        <qualifiedname>zmbt::Environment::RegisterAnonymousInterface</qualifiedname>
        <param>
          <type>Interface &amp;&amp;</type>
          <declname>interface</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref> const &amp;</type>
          <declname>obj_id</declname>
          <defval><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref>{<ref refid="namespacezmbt_1adc01b626dc1a700a7098a42dee5c824d" kindref="member">ifc_host_nullptr</ref>&lt; Interface &gt;}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="496" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="496" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a2788c8cf91c42a7e6111a86bb26a2991" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref></type>
        <definition>object_id zmbt::Environment::ObjectId</definition>
        <argsstring>(boost::json::string_view interface_key) const</argsstring>
        <name>ObjectId</name>
        <qualifiedname>zmbt::Environment::ObjectId</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>interface_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="503" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1afa31bc89a076dcd5992195bf8e5de4ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1interface__id" kindref="compound">interface_id</ref></type>
        <definition>interface_id zmbt::Environment::InterfaceId</definition>
        <argsstring>(boost::json::string_view interface_key) const</argsstring>
        <name>InterfaceId</name>
        <qualifiedname>zmbt::Environment::InterfaceId</qualifiedname>
        <param>
          <type>boost::json::string_view</type>
          <declname>interface_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="505" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1a46907e7c9fb61ca1d7dd8cc7c6d8256a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::json::string</type>
        <definition>boost::json::string zmbt::Environment::GetOrRegisterInterface</definition>
        <argsstring>(object_id const &amp;obj_id, interface_id const &amp;ifc_id)</argsstring>
        <name>GetOrRegisterInterface</name>
        <qualifiedname>zmbt::Environment::GetOrRegisterInterface</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref> const &amp;</type>
          <declname>obj_id</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1interface__id" kindref="compound">interface_id</ref> const &amp;</type>
          <declname>ifc_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="507" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classzmbt_1_1Environment_1af617b07693bed0b49ab6b6db1907b76b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref></type>
        <definition>object_id zmbt::Environment::DefaultObjectId</definition>
        <argsstring>(interface_id const &amp;ifc_id) const</argsstring>
        <name>DefaultObjectId</name>
        <qualifiedname>zmbt::Environment::DefaultObjectId</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1interface__id" kindref="compound">interface_id</ref> const &amp;</type>
          <declname>ifc_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="509" column="15"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classzmbt_1_1Environment_1aed33246896219c66146ac97ba37511eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::json::string</type>
        <definition>static boost::json::string zmbt::Environment::autokey</definition>
        <argsstring>(object_id const &amp;obj_id, interface_id const &amp;ifc_id)</argsstring>
        <name>autokey</name>
        <qualifiedname>zmbt::Environment::autokey</qualifiedname>
        <param>
          <type><ref refid="classzmbt_1_1object__id" kindref="compound">object_id</ref> const &amp;</type>
          <declname>obj_id</declname>
        </param>
        <param>
          <type><ref refid="classzmbt_1_1interface__id" kindref="compound">interface_id</ref> const &amp;</type>
          <declname>ifc_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="365" column="32" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="365" bodyend="368"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Controlled environment data storage. </para>
    </briefdescription>
    <detaileddescription>
<para>Handles signal values and calls counters to/from environment, using interface pointers as keys <simplesect kind="see"><para><ulink url="/user-guide/environment/">Environment API</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" line="52" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/model/environment.hpp" bodystart="52" bodyend="511"/>
    <listofallmembers>
      <member refid="classzmbt_1_1Environment_1a3a8c1b393c48c1f7d162f476c8771455" prot="protected" virt="non-virtual"><scope>zmbt::Environment</scope><name>argsref_t</name></member>
      <member refid="classzmbt_1_1Environment_1aed33246896219c66146ac97ba37511eb" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>autokey</name></member>
      <member refid="classzmbt_1_1Environment_1aa898a879e426de67da590d945785ed39" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>ContainsShared</name></member>
      <member refid="classzmbt_1_1Environment_1a43154554da11ab09fc7c409b2142295d" prot="protected" virt="non-virtual"><scope>zmbt::Environment</scope><name>data_</name></member>
      <member refid="classzmbt_1_1Environment_1af617b07693bed0b49ab6b6db1907b76b" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>DefaultObjectId</name></member>
      <member refid="classzmbt_1_1Environment_1a0d29714781092ea8c5f6d5302122fb6f" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>DeferLock</name></member>
      <member refid="classzmbt_1_1Environment_1a4e40e3e7bb3872bcc5c5636600bd0c10" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>DumpToJsonLog</name></member>
      <member refid="classzmbt_1_1Environment_1ad81c9d34b56cce6b0023a0ab8a6ab83e" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>Environment</name></member>
      <member refid="classzmbt_1_1Environment_1ab82984c4532a84dfa13c37f4d10bbcc0" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>Environment</name></member>
      <member refid="classzmbt_1_1Environment_1a3524d62737190302eb2dbc9a67826b9a" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>Environment</name></member>
      <member refid="classzmbt_1_1Environment_1a46907e7c9fb61ca1d7dd8cc7c6d8256a" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetOrRegisterInterface</name></member>
      <member refid="classzmbt_1_1Environment_1a640d278d03c29102319ada55f294ead2" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetOrRegisterParametricTrigger</name></member>
      <member refid="classzmbt_1_1Environment_1a2e286724f164e7c429df86eb4b2dd26b" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetPrototypes</name></member>
      <member refid="classzmbt_1_1Environment_1a18919c43ac2b30cc25635d3b5ef684cd" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetRecorder</name></member>
      <member refid="classzmbt_1_1Environment_1a2bcacb88176685ef42868ab17e07af42" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetRecorder</name></member>
      <member refid="classzmbt_1_1Environment_1a3ca454f5521c8f809d28df7f89d0fc99" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetShared</name></member>
      <member refid="classzmbt_1_1Environment_1a80db41621ab5859e1e2be590d31f4a5a" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetSharedRef</name></member>
      <member refid="classzmbt_1_1Environment_1a76d3d4c1bf2a7575be5cbd1ade6c0d06" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetVar</name></member>
      <member refid="classzmbt_1_1Environment_1a36b3fb82903a8e838f5c2c3f9b742bcc" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetVar</name></member>
      <member refid="classzmbt_1_1Environment_1a6c829502ec0c87f895ba3a411e286c36" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetVarOrDefault</name></member>
      <member refid="classzmbt_1_1Environment_1a216ef2cd15dbb32f8ab25d5cf9c44c05" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetVarOrDefault</name></member>
      <member refid="classzmbt_1_1Environment_1a5beb3a2fcc2fa77c5a02c0efe9be2cd7" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetVarOrUpdate</name></member>
      <member refid="classzmbt_1_1Environment_1a1be7bd57c86b4cdae347513f93cfe1dd" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>GetVarOrUpdate</name></member>
      <member refid="classzmbt_1_1Environment_1a56de63db53a73115a20c0dbacb618716" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>HasAction</name></member>
      <member refid="classzmbt_1_1Environment_1aeae26cc5dd8243317ceac1085adb754b" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>HasTestError</name></member>
      <member refid="classzmbt_1_1Environment_1a322a8e7357c97a35cb2e379411ff1f06" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>HasTrigger</name></member>
      <member refid="classzmbt_1_1Environment_1aaa81dcce721238029068948bfceec877" prot="protected" virt="non-virtual"><scope>zmbt::Environment</scope><name>hookout_args_t</name></member>
      <member refid="classzmbt_1_1Environment_1a7c3db0242f6b8576cfa13b1f68a8a9f7" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>InitializeInterfaceHandlers</name></member>
      <member refid="classzmbt_1_1Environment_1afa31bc89a076dcd5992195bf8e5de4ef" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>InterfaceId</name></member>
      <member refid="classzmbt_1_1Environment_1ab75e621b6fba642e42bce746d931de89" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>json_data</name></member>
      <member refid="classzmbt_1_1Environment_1a165ad9f439f4713c6bdf661947f0f52a" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>json_data</name></member>
      <member refid="classzmbt_1_1Environment_1af311177d6523da8596b007d8ffc0ea11" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>Lock</name></member>
      <member refid="classzmbt_1_1Environment_1a42229f9be181baba2863e445b2eddb4f" prot="protected" virt="non-virtual"><scope>zmbt::Environment</scope><name>lock_t</name></member>
      <member refid="classzmbt_1_1Environment_1a2788c8cf91c42a7e6111a86bb26a2991" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>ObjectId</name></member>
      <member refid="classzmbt_1_1Environment_1adb48d45d537f72d04509d87a56e61496" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>operator=</name></member>
      <member refid="classzmbt_1_1Environment_1a79ede9acac7319b78084784a468e99c5" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>operator=</name></member>
      <member refid="classzmbt_1_1Environment_1a4f5dd637325316f34e6aa419e43232a5" prot="private" virt="non-virtual"><scope>zmbt::Environment</scope><name>OutputRecorder</name></member>
      <member refid="classzmbt_1_1Environment_1ae7abee088a88907c7a9ec11c673bc503" prot="protected" virt="non-virtual"><scope>zmbt::Environment</scope><name>permanent_data_</name></member>
      <member refid="classzmbt_1_1Environment_1a80616a69d750090e40c4886b0bdd29b4" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RegisterAction</name></member>
      <member refid="classzmbt_1_1Environment_1a3560e1aa9381b5fb62e521f2631ce570" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RegisterAnonymousInterface</name></member>
      <member refid="classzmbt_1_1Environment_1a7496a91885401b2aaed28dbb5d97879f" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RegisterAnonymousInterface</name></member>
      <member refid="classzmbt_1_1Environment_1affd0ffbb3d79b0c6dd267ed49759cd13" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RegisterAnonymousTrigger</name></member>
      <member refid="classzmbt_1_1Environment_1ac5cb569db6d5f58eeabe8cb792da6ade" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RegisterInterface</name></member>
      <member refid="classzmbt_1_1Environment_1ac8ef532c18b30d435aa1f2390dbafd7a" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RegisterInterface</name></member>
      <member refid="classzmbt_1_1Environment_1ad50d09473ea269e68266dee3e6ad7712" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RegisterParametricTriggerIfc</name></member>
      <member refid="classzmbt_1_1Environment_1aeeafa9586525911e50516d99b6173460" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RegisterParametricTriggerObj</name></member>
      <member refid="classzmbt_1_1Environment_1a90f55feda59884ce8a12c5d6c4e1262c" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RegisterTrigger</name></member>
      <member refid="classzmbt_1_1Environment_1a9e6e0fa81bd0820e8879cb8f74ee86ab" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RegisterTrigger</name></member>
      <member refid="classzmbt_1_1Environment_1a79231e17a6bc249776bd2ed96f2ed025" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>ResetAll</name></member>
      <member refid="classzmbt_1_1Environment_1ab7349ddc7226965351ca746e137c32c7" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>ResetInterfaceData</name></member>
      <member refid="classzmbt_1_1Environment_1a3c684b8036031095ad32ccefb1c45900" prot="protected" virt="non-virtual"><scope>zmbt::Environment</scope><name>return_t</name></member>
      <member refid="classzmbt_1_1Environment_1ae238513a43a48a413c3c32340fd05c1b" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RunAction</name></member>
      <member refid="classzmbt_1_1Environment_1a78300474b84597fba808b9a8bbe98898" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>RunActionNoCatch</name></member>
      <member refid="classzmbt_1_1Environment_1ab2924a360d6d5c03d329ec3f26ad2c3f" prot="protected" virt="non-virtual"><scope>zmbt::Environment</scope><name>rvref_to_val</name></member>
      <member refid="classzmbt_1_1Environment_1aea0ac4a4dfb4435c638fc43db5fb1f72" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>SetShared</name></member>
      <member refid="classzmbt_1_1Environment_1ab2979c081939a3f98eb4172190b3846d" prot="protected" virt="non-virtual"><scope>zmbt::Environment</scope><name>SetTestError</name></member>
      <member refid="classzmbt_1_1Environment_1acf1c12d821f1b7f5f06fad50e9f5aa01" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>SetVar</name></member>
      <member refid="classzmbt_1_1Environment_1aa35b443de937e8fdc2ccc6386cdbbf90" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>SetVar</name></member>
      <member refid="classzmbt_1_1Environment_1adf59c79cee3dca2a7243fe1c9a84a7c7" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>TestError</name></member>
      <member refid="classzmbt_1_1Environment_1af2cf6d5acaf0c48005da8f2f78eb1073" prot="public" virt="non-virtual"><scope>zmbt::Environment</scope><name>TryLock</name></member>
      <member refid="classzmbt_1_1Environment_1a6ef7f5da87d58acc80f65b76cc7d551f" prot="protected" virt="non-virtual"><scope>zmbt::Environment</scope><name>unqf_args_t</name></member>
      <member refid="classzmbt_1_1Environment_1a470a349befede8d08621ed275045e32e" prot="public" virt="virtual"><scope>zmbt::Environment</scope><name>~Environment</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
