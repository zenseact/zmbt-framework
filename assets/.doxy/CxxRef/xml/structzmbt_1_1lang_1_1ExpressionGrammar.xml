<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structzmbt_1_1lang_1_1ExpressionGrammar" kind="struct" language="C++" prot="public">
    <compoundname>zmbt::lang::ExpressionGrammar</compoundname>
    <basecompoundref prot="public" virt="non-virtual">boost::spirit::karma::grammar&lt; OutputIterator, ExpressionView()&gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename OutputIterator</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1a3b83d9e1e77ba18a2fe8428bf04438b5" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref>()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, ExpressionView()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::start</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="83" column="32" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1af4f8314a007cf3a95d977cb89007ac71" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref>()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, ExpressionView()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::subexpr</definition>
        <argsstring></argsstring>
        <name>subexpr</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::subexpr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="83" column="38" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1a969106093b2c636f6c9849d024ad4210" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref>()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, ExpressionView()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::keyword</definition>
        <argsstring></argsstring>
        <name>keyword</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::keyword</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="83" column="46" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1a2801aa4535b6dd24838ab0a07c9ba03e" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, std::list&lt;ExpressionView&gt;()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::parameters</definition>
        <argsstring></argsstring>
        <name>parameters</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::parameters</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="84" column="34" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1a65ba80927e45fd5560a66e86f8430c61" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, std::list&lt;ExpressionView&gt;()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::fork</definition>
        <argsstring></argsstring>
        <name>fork</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::fork</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="84" column="45" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1a19a1dbbad70697b06e7503ff01c77495" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, std::list&lt;ExpressionView&gt;()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::pipe</definition>
        <argsstring></argsstring>
        <name>pipe</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::pipe</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="84" column="50" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1a8959b673bfb6afecbee58b78cfc76c3f" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, std::list&lt;ExpressionView&gt;()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::tuple</definition>
        <argsstring></argsstring>
        <name>tuple</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::tuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="84" column="55" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1a675be92d3bbd00da6f8b9e5eb2aed079" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, std::list&lt;ExpressionView&gt;()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::link</definition>
        <argsstring></argsstring>
        <name>link</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::link</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="84" column="61" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1a261e7b250b8978ef22ec1d84a5b0908c" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, std::list&lt;ExpressionView&gt;()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::flip</definition>
        <argsstring></argsstring>
        <name>flip</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::flip</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="84" column="66" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1ac540a873ff1b9bf3029adf645a288e7d" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, std::list&lt;ExpressionView&gt;()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::nested_pipe</definition>
        <argsstring></argsstring>
        <name>nested_pipe</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::nested_pipe</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="84" column="71" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1aefabc710e87748f426ce1f0af5e76378" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, std::list&lt;ExpressionView&gt;()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::nested_fork</definition>
        <argsstring></argsstring>
        <name>nested_fork</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::nested_fork</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="84" column="83" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1a5467e30b64785c12982f34b6d6c802a0" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, std::list&lt;ExpressionView&gt;()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::nested_tuple</definition>
        <argsstring></argsstring>
        <name>nested_tuple</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::nested_tuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="84" column="95" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structzmbt_1_1lang_1_1ExpressionGrammar_1a05090c5bf464d98e3d4eba857e18c9c1" prot="public" static="no" mutable="no">
        <type>boost::spirit::karma::rule&lt; OutputIterator, std::list&lt; <ref refid="classzmbt_1_1lang_1_1ExpressionView" kindref="compound">ExpressionView</ref> &gt;()&gt;</type>
        <definition>boost::spirit::karma::rule&lt;OutputIterator, std::list&lt;ExpressionView&gt;()&gt; zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::nested_link</definition>
        <argsstring></argsstring>
        <name>nested_link</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::nested_link</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="84" column="108" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structzmbt_1_1lang_1_1ExpressionGrammar_1a00f19082c2bba05b914e48711ab0c47d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;::ExpressionGrammar</definition>
        <argsstring>()</argsstring>
        <name>ExpressionGrammar</name>
        <qualifiedname>zmbt::lang::ExpressionGrammar::ExpressionGrammar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="22" column="5" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="22" bodyend="81"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>boost::spirit::karma::grammar&lt; OutputIterator, ExpressionView()&gt;</label>
      </node>
      <node id="1">
        <label>zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;</label>
        <link refid="structzmbt_1_1lang_1_1ExpressionGrammar"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>boost::spirit::karma::grammar&lt; OutputIterator, ExpressionView()&gt;</label>
      </node>
      <node id="1">
        <label>zmbt::lang::ExpressionGrammar&lt; OutputIterator &gt;</label>
        <link refid="structzmbt_1_1lang_1_1ExpressionGrammar"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" line="21" column="1" bodyfile="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/expr/expression_grammar.hpp" bodystart="21" bodyend="85"/>
    <listofallmembers>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1a00f19082c2bba05b914e48711ab0c47d" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>ExpressionGrammar</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1a261e7b250b8978ef22ec1d84a5b0908c" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>flip</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1a65ba80927e45fd5560a66e86f8430c61" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>fork</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1a969106093b2c636f6c9849d024ad4210" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>keyword</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1a675be92d3bbd00da6f8b9e5eb2aed079" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>link</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1aefabc710e87748f426ce1f0af5e76378" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>nested_fork</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1a05090c5bf464d98e3d4eba857e18c9c1" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>nested_link</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1ac540a873ff1b9bf3029adf645a288e7d" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>nested_pipe</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1a5467e30b64785c12982f34b6d6c802a0" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>nested_tuple</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1a2801aa4535b6dd24838ab0a07c9ba03e" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>parameters</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1a19a1dbbad70697b06e7503ff01c77495" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>pipe</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1a3b83d9e1e77ba18a2fe8428bf04438b5" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>start</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1af4f8314a007cf3a95d977cb89007ac71" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>subexpr</name></member>
      <member refid="structzmbt_1_1lang_1_1ExpressionGrammar_1a8959b673bfb6afecbee58b78cfc76c3f" prot="public" virt="non-virtual"><scope>zmbt::lang::ExpressionGrammar</scope><name>tuple</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
