<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="config_8hpp" kind="file" language="C++">
    <compoundname>config.hpp</compoundname>
    <includes local="no">boost/json.hpp</includes>
    <includes local="no">functional</includes>
    <includes local="no">memory</includes>
    <includes refid="test__failure_8hpp" local="yes">test_failure.hpp</includes>
    <includedby refid="application_8hpp" local="yes">zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/application.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/application/config.hpp</label>
        <link refid="config_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>test_failure.hpp</label>
        <link refid="test__failure_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>aliases.hpp</label>
        <link refid="aliases_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>zmbt/core/json_pretty_print.hpp</label>
        <link refid="json__pretty__print_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>boost/callable_traits.hpp</label>
      </node>
      <node id="2">
        <label>boost/json.hpp</label>
      </node>
      <node id="12">
        <label>boost/mp11.hpp</label>
      </node>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="6">
        <label>sstream</label>
      </node>
      <node id="10">
        <label>tuple</label>
      </node>
      <node id="9">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zenseact-mbt.hpp</label>
        <link refid="zenseact-mbt_8hpp"/>
      </node>
      <node id="3">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/all.hpp</label>
        <link refid="all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/application.hpp</label>
        <link refid="application_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/application/config.hpp</label>
        <link refid="config_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classzmbt_1_1Config" prot="public">zmbt::Config</innerclass>
    <innerclass refid="structzmbt_1_1Config_1_1PersistentConfig" prot="private">zmbt::Config::PersistentConfig</innerclass>
    <innernamespace refid="namespacezmbt">zmbt</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>(c) Copyright 2022-2023 Volvo Car Corporation </para>
</simplesect>
<simplesect kind="copyright"><para>(c) Copyright 2024 Zenseact AB </para>
</simplesect>
<simplesect kind="par"><title>License</title><para>SPDX-License-Identifier: Apache-2.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZMBT_APPLICATION_CONFIG_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZMBT_APPLICATION_CONFIG_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="test__failure_8hpp" kindref="compound">test_failure.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezmbt" kindref="compound">zmbt</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classzmbt_1_1Config" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classzmbt_1_1Config" kindref="compound">Config</ref><sp/>final</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FailureHandler<sp/>=<sp/>std::function&lt;void(boost::json::value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)&gt;;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1Config" kindref="compound">Config</ref>();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1Config" kindref="compound">Config</ref>(<ref refid="classzmbt_1_1Config" kindref="compound">Config</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1Config" kindref="compound">Config</ref>(<ref refid="classzmbt_1_1Config" kindref="compound">Config</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1Config" kindref="compound">Config</ref>&amp;<sp/>operator=(<ref refid="classzmbt_1_1Config" kindref="compound">Config</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1Config" kindref="compound">Config</ref>&amp;<sp/>operator=(<ref refid="classzmbt_1_1Config" kindref="compound">Config</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1Config" kindref="compound">~Config</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classzmbt_1_1Config_1acba413a2975087b61ffc4f071f368daa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1Config" kindref="compound">Config</ref>&amp;<sp/><ref refid="classzmbt_1_1Config_1acba413a2975087b61ffc4f071f368daa" kindref="member">SetFailureHandler</ref>(FailureHandler<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>fn);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classzmbt_1_1Config_1a831277d6c79c27d07c2b07da7cb3af10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1Config" kindref="compound">Config</ref>&amp;<sp/><ref refid="classzmbt_1_1Config_1a831277d6c79c27d07c2b07da7cb3af10" kindref="member">ResetFailureHandler</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzmbt_1_1Config" kindref="compound">Config</ref>&amp;<sp/>HandleTestFailure(boost::json::value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>diagnostics);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PersistentConfig</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FailureHandler<sp/>failure_handler<sp/>{&amp;<ref refid="namespacezmbt_1ab558f561832f47da45707725386e7e86" kindref="member">zmbt::default_test_failure</ref>};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;PersistentConfig&gt;<sp/>config_;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>ZMBT_APPLICATION_CONFIG_HPP_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="zmbt-framework/zmbt-framework/backends/cxx/include/zmbt/application/config.hpp"/>
  </compounddef>
</doxygen>
