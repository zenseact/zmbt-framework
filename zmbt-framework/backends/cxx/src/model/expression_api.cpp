/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * generated: 2025-02-07 16:07:37.962261+00:00
 * template: codegen/expr/templates/expression_api.cpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */


#include "zmbt/model/expression_api.hpp"

namespace zmbt {

expr::signature::Const<Keyword::Noop> Noop = {};
expr::signature::Const<Keyword::Noop> _ = Noop;
expr::signature::Const<Keyword::Null> Null = {};
expr::signature::Const<Keyword::True> True = {};
expr::signature::Const<Keyword::False> False = {};
expr::signature::Const<Keyword::Pi> Pi = {};
expr::signature::Const<Keyword::E> E = {};
expr::signature::Const<Keyword::Inf> Inf = {};
expr::signature::Const<Keyword::Eps> Eps = {};
expr::signature::Const<Keyword::NaN> NaN = {};
expr::signature::Unary<Keyword::Bool> Bool = {};
expr::signature::Unary<Keyword::Nil> Nil = {};
expr::signature::Unary<Keyword::Not> Not = {};
expr::signature::Unary<Keyword::Neg> Neg = {};
expr::signature::Unary<Keyword::BitNot> BitNot = {};
expr::signature::Unary<Keyword::Sqrt> Sqrt = {};
expr::signature::Unary<Keyword::Sin> Sin = {};
expr::signature::Unary<Keyword::Cos> Cos = {};
expr::signature::Unary<Keyword::Tan> Tan = {};
expr::signature::Unary<Keyword::Asin> Asin = {};
expr::signature::Unary<Keyword::Acos> Acos = {};
expr::signature::Unary<Keyword::Atan> Atan = {};
expr::signature::Unary<Keyword::Sinh> Sinh = {};
expr::signature::Unary<Keyword::Cosh> Cosh = {};
expr::signature::Unary<Keyword::Tanh> Tanh = {};
expr::signature::Unary<Keyword::Asinh> Asinh = {};
expr::signature::Unary<Keyword::Acosh> Acosh = {};
expr::signature::Unary<Keyword::Atanh> Atanh = {};
expr::signature::Unary<Keyword::Exp> Exp = {};
expr::signature::Unary<Keyword::Erf> Erf = {};
expr::signature::Unary<Keyword::Erfc> Erfc = {};
expr::signature::Unary<Keyword::Gamma> Gamma = {};
expr::signature::Unary<Keyword::Abs> Abs = {};
expr::signature::Unary<Keyword::Ceil> Ceil = {};
expr::signature::Unary<Keyword::Floor> Floor = {};
expr::signature::Unary<Keyword::Sign> Sign = {};
expr::signature::UnaryParam<Keyword::Sum> Sum = {};
expr::signature::UnaryParam<Keyword::Prod> Prod = {};
expr::signature::UnaryParam<Keyword::Round> Round = {};
expr::signature::Binary<Keyword::Add> Add = {};
expr::signature::Binary<Keyword::Sub> Sub = {};
expr::signature::Binary<Keyword::SubFrom> SubFrom = {};
expr::signature::Binary<Keyword::Mul> Mul = {};
expr::signature::Binary<Keyword::Div> Div = {};
expr::signature::Binary<Keyword::DivFrom> DivFrom = {};
expr::signature::Binary<Keyword::Pow> Pow = {};
expr::signature::Binary<Keyword::PowFrom> PowFrom = {};
expr::signature::Binary<Keyword::Log> Log = {};
expr::signature::Binary<Keyword::LogFrom> LogFrom = {};
expr::signature::Binary<Keyword::Mod> Mod = {};
expr::signature::Binary<Keyword::ModFrom> ModFrom = {};
expr::signature::Binary<Keyword::Quot> Quot = {};
expr::signature::Binary<Keyword::QuotFrom> QuotFrom = {};
expr::signature::Binary<Keyword::BitAnd> BitAnd = {};
expr::signature::Binary<Keyword::BitOr> BitOr = {};
expr::signature::Binary<Keyword::BitXor> BitXor = {};
expr::signature::Binary<Keyword::BitLshift> BitLshift = {};
expr::signature::Binary<Keyword::BitLshiftFrom> BitLshiftFrom = {};
expr::signature::Binary<Keyword::BitRshift> BitRshift = {};
expr::signature::Binary<Keyword::BitRshiftFrom> BitRshiftFrom = {};
expr::signature::Binary<Keyword::Eq> Eq = {};
expr::signature::Binary<Keyword::Ne> Ne = {};
expr::signature::Binary<Keyword::Lt> Lt = {};
expr::signature::Binary<Keyword::Le> Le = {};
expr::signature::Binary<Keyword::Gt> Gt = {};
expr::signature::Binary<Keyword::Ge> Ge = {};
expr::signature::Approx Approx = {};
expr::signature::Approx Near = Approx;
expr::signature::Binary<Keyword::And> And = {};
expr::signature::Binary<Keyword::Or> Or = {};
expr::signature::BinarySetRhs<Keyword::SetEq> SetEq = {};
expr::signature::BinarySetRhs<Keyword::Subset> Subset = {};
expr::signature::BinarySetRhs<Keyword::Superset> Superset = {};
expr::signature::BinarySetRhs<Keyword::ProperSubset> ProperSubset = {};
expr::signature::BinarySetRhs<Keyword::ProperSuperset> ProperSuperset = {};
expr::signature::BinarySetRhs<Keyword::In> In = {};
expr::signature::BinarySetRhs<Keyword::NotIn> NotIn = {};
expr::signature::Binary<Keyword::Ni> Ni = {};
expr::signature::Binary<Keyword::Ni> Contains = Ni;
expr::signature::Binary<Keyword::NotNi> NotNi = {};
expr::signature::BinarySetRhs<Keyword::Union> Union = {};
expr::signature::BinarySetRhs<Keyword::Intersect> Intersect = {};
expr::signature::BinarySetRhs<Keyword::Diff> Diff = {};
expr::signature::BinarySetRhs<Keyword::DiffFrom> DiffFrom = {};
expr::signature::Variadic<Keyword::Concat> Concat = {};
expr::signature::Variadic<Keyword::Cartesian> Cartesian = {};
expr::signature::Variadic<Keyword::List> List = {};
expr::signature::Unary<Keyword::Transp> Transp = {};
expr::signature::Unary<Keyword::Uniques> Uniques = {};
expr::signature::Unary<Keyword::Id> Id = {};
expr::signature::Unary<Keyword::Card> Card = {};
expr::signature::Unary<Keyword::Size> Size = {};
expr::signature::Binary<Keyword::Slide> Slide = {};
expr::signature::Binary<Keyword::Stride> Stride = {};
expr::signature::Binary<Keyword::Repeat> Repeat = {};
expr::signature::Binary<Keyword::Re> Re = {};
expr::signature::Binary<Keyword::Re> Regex = Re;
expr::signature::Binary<Keyword::At> At = {};
expr::signature::HiOrd<Keyword::Map> Map = {};
expr::signature::HiOrd<Keyword::Filter> Filter = {};
expr::signature::HiOrd<Keyword::Count> Count = {};
expr::signature::HiOrd<Keyword::Sort> Sort = {};
expr::signature::HiOrd<Keyword::Min> Min = {};
expr::signature::HiOrd<Keyword::Max> Max = {};
expr::signature::HiOrd<Keyword::Argmin> Argmin = {};
expr::signature::HiOrd<Keyword::Argmax> Argmax = {};
expr::signature::HiOrdParam<Keyword::Recur> Recur = {};
expr::signature::HiOrdParam<Keyword::Apply> Apply = {};
expr::signature::HiOrdParam<Keyword::Bind> Bind = {};
expr::signature::HiOrdParamOpt<Keyword::Reduce> Reduce = {};
expr::signature::HiOrdVariadic<Keyword::Any> Any = {};
expr::signature::HiOrdVariadic<Keyword::All> All = {};
expr::signature::HiOrdVariadic<Keyword::Saturate> Saturate = {};
expr::signature::HiOrdVariadic<Keyword::Compose> Compose = {};

} // namespace zmbt
