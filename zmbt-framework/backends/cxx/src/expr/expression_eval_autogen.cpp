/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/expr/templates/zmbt-framework/backends/cxx/src/expr/expression_eval_autogen.cpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */


#include "zmbt/expr/expression.hpp"
#include "zmbt/expr/eval_impl.hpp"

namespace zmbt {
namespace lang {

extern template Expression dispatch_eval<Keyword::Noop>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Null>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::True>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::False>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Pi>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::E>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Inf>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Eps>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::NaN>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Thread>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Sin>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Cos>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Tan>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Asin>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Acos>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Atan>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Sinh>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Cosh>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Tanh>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Asinh>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Acosh>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Atanh>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Exp>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Erf>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Erfc>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Gamma>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Abs>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Ceil>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Floor>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Round>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Sqrt>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Sign>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Neg>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Add>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Sub>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Mul>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Div>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Pow>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Log>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Mod>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Quot>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::BitNot>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::BitAnd>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::BitOr>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::BitXor>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Lshift>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Rshift>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Eq>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Ne>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Lt>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Le>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Gt>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Ge>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Near>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Union>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Intersect>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Diff>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::SetEq>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Subset>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Superset>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::PSubset>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::PSuperset>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::In>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::NotIn>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Ni>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::NotNi>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Bool>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Not>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::And>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Or>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Id>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Transp>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Cartesian>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Reverse>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Uniques>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Items>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Keys>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Values>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Enumerate>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Flatten>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::ToList>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Arange>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Parse>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Str>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Re>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Fmt>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Card>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Size>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Sum>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Prod>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Avg>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Slide>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Stride>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Chunks>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Repeat>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Cat>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Push>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::At>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Del>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Lookup>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Cast>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Uncast>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Fold>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Map>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Filter>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Count>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Each>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Sort>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Find>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::FindPtr>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::FindIdx>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Min>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Max>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Argmin>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Argmax>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Recur>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Unfold>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Op>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Bind>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Link>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Capture>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Refer>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Let>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Any>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::All>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Saturate>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Pipe>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Tuple>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Fork>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Flip>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Dbg>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Eval>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Try>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Kwrd>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Prms>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Q>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::D>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Err>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::IsErr>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Assert>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::Trace>(ExpressionView const&, ExpressionView const&, EvalContext);
extern template Expression dispatch_eval<Keyword::PreProc>(ExpressionView const&, ExpressionView const&, EvalContext);

Expression ExpressionView::eval_e(ExpressionView const& x, EvalContext context) const
try
{

    switch (keyword())
    {
        case Keyword::Literal: return data();
        case Keyword::Noop: return dispatch_eval<Keyword::Noop>(*this, x, context);
        case Keyword::Null: return dispatch_eval<Keyword::Null>(*this, x, context);
        case Keyword::True: return dispatch_eval<Keyword::True>(*this, x, context);
        case Keyword::False: return dispatch_eval<Keyword::False>(*this, x, context);
        case Keyword::Pi: return dispatch_eval<Keyword::Pi>(*this, x, context);
        case Keyword::E: return dispatch_eval<Keyword::E>(*this, x, context);
        case Keyword::Inf: return dispatch_eval<Keyword::Inf>(*this, x, context);
        case Keyword::Eps: return dispatch_eval<Keyword::Eps>(*this, x, context);
        case Keyword::NaN: return dispatch_eval<Keyword::NaN>(*this, x, context);
        case Keyword::Thread: return dispatch_eval<Keyword::Thread>(*this, x, context);
        case Keyword::Sin: return dispatch_eval<Keyword::Sin>(*this, x, context);
        case Keyword::Cos: return dispatch_eval<Keyword::Cos>(*this, x, context);
        case Keyword::Tan: return dispatch_eval<Keyword::Tan>(*this, x, context);
        case Keyword::Asin: return dispatch_eval<Keyword::Asin>(*this, x, context);
        case Keyword::Acos: return dispatch_eval<Keyword::Acos>(*this, x, context);
        case Keyword::Atan: return dispatch_eval<Keyword::Atan>(*this, x, context);
        case Keyword::Sinh: return dispatch_eval<Keyword::Sinh>(*this, x, context);
        case Keyword::Cosh: return dispatch_eval<Keyword::Cosh>(*this, x, context);
        case Keyword::Tanh: return dispatch_eval<Keyword::Tanh>(*this, x, context);
        case Keyword::Asinh: return dispatch_eval<Keyword::Asinh>(*this, x, context);
        case Keyword::Acosh: return dispatch_eval<Keyword::Acosh>(*this, x, context);
        case Keyword::Atanh: return dispatch_eval<Keyword::Atanh>(*this, x, context);
        case Keyword::Exp: return dispatch_eval<Keyword::Exp>(*this, x, context);
        case Keyword::Erf: return dispatch_eval<Keyword::Erf>(*this, x, context);
        case Keyword::Erfc: return dispatch_eval<Keyword::Erfc>(*this, x, context);
        case Keyword::Gamma: return dispatch_eval<Keyword::Gamma>(*this, x, context);
        case Keyword::Abs: return dispatch_eval<Keyword::Abs>(*this, x, context);
        case Keyword::Ceil: return dispatch_eval<Keyword::Ceil>(*this, x, context);
        case Keyword::Floor: return dispatch_eval<Keyword::Floor>(*this, x, context);
        case Keyword::Round: return dispatch_eval<Keyword::Round>(*this, x, context);
        case Keyword::Sqrt: return dispatch_eval<Keyword::Sqrt>(*this, x, context);
        case Keyword::Sign: return dispatch_eval<Keyword::Sign>(*this, x, context);
        case Keyword::Neg: return dispatch_eval<Keyword::Neg>(*this, x, context);
        case Keyword::Add: return dispatch_eval<Keyword::Add>(*this, x, context);
        case Keyword::Sub: return dispatch_eval<Keyword::Sub>(*this, x, context);
        case Keyword::Mul: return dispatch_eval<Keyword::Mul>(*this, x, context);
        case Keyword::Div: return dispatch_eval<Keyword::Div>(*this, x, context);
        case Keyword::Pow: return dispatch_eval<Keyword::Pow>(*this, x, context);
        case Keyword::Log: return dispatch_eval<Keyword::Log>(*this, x, context);
        case Keyword::Mod: return dispatch_eval<Keyword::Mod>(*this, x, context);
        case Keyword::Quot: return dispatch_eval<Keyword::Quot>(*this, x, context);
        case Keyword::BitNot: return dispatch_eval<Keyword::BitNot>(*this, x, context);
        case Keyword::BitAnd: return dispatch_eval<Keyword::BitAnd>(*this, x, context);
        case Keyword::BitOr: return dispatch_eval<Keyword::BitOr>(*this, x, context);
        case Keyword::BitXor: return dispatch_eval<Keyword::BitXor>(*this, x, context);
        case Keyword::Lshift: return dispatch_eval<Keyword::Lshift>(*this, x, context);
        case Keyword::Rshift: return dispatch_eval<Keyword::Rshift>(*this, x, context);
        case Keyword::Eq: return dispatch_eval<Keyword::Eq>(*this, x, context);
        case Keyword::Ne: return dispatch_eval<Keyword::Ne>(*this, x, context);
        case Keyword::Lt: return dispatch_eval<Keyword::Lt>(*this, x, context);
        case Keyword::Le: return dispatch_eval<Keyword::Le>(*this, x, context);
        case Keyword::Gt: return dispatch_eval<Keyword::Gt>(*this, x, context);
        case Keyword::Ge: return dispatch_eval<Keyword::Ge>(*this, x, context);
        case Keyword::Near: return dispatch_eval<Keyword::Near>(*this, x, context);
        case Keyword::Union: return dispatch_eval<Keyword::Union>(*this, x, context);
        case Keyword::Intersect: return dispatch_eval<Keyword::Intersect>(*this, x, context);
        case Keyword::Diff: return dispatch_eval<Keyword::Diff>(*this, x, context);
        case Keyword::SetEq: return dispatch_eval<Keyword::SetEq>(*this, x, context);
        case Keyword::Subset: return dispatch_eval<Keyword::Subset>(*this, x, context);
        case Keyword::Superset: return dispatch_eval<Keyword::Superset>(*this, x, context);
        case Keyword::PSubset: return dispatch_eval<Keyword::PSubset>(*this, x, context);
        case Keyword::PSuperset: return dispatch_eval<Keyword::PSuperset>(*this, x, context);
        case Keyword::In: return dispatch_eval<Keyword::In>(*this, x, context);
        case Keyword::NotIn: return dispatch_eval<Keyword::NotIn>(*this, x, context);
        case Keyword::Ni: return dispatch_eval<Keyword::Ni>(*this, x, context);
        case Keyword::NotNi: return dispatch_eval<Keyword::NotNi>(*this, x, context);
        case Keyword::Bool: return dispatch_eval<Keyword::Bool>(*this, x, context);
        case Keyword::Not: return dispatch_eval<Keyword::Not>(*this, x, context);
        case Keyword::And: return dispatch_eval<Keyword::And>(*this, x, context);
        case Keyword::Or: return dispatch_eval<Keyword::Or>(*this, x, context);
        case Keyword::Id: return dispatch_eval<Keyword::Id>(*this, x, context);
        case Keyword::Transp: return dispatch_eval<Keyword::Transp>(*this, x, context);
        case Keyword::Cartesian: return dispatch_eval<Keyword::Cartesian>(*this, x, context);
        case Keyword::Reverse: return dispatch_eval<Keyword::Reverse>(*this, x, context);
        case Keyword::Uniques: return dispatch_eval<Keyword::Uniques>(*this, x, context);
        case Keyword::Items: return dispatch_eval<Keyword::Items>(*this, x, context);
        case Keyword::Keys: return dispatch_eval<Keyword::Keys>(*this, x, context);
        case Keyword::Values: return dispatch_eval<Keyword::Values>(*this, x, context);
        case Keyword::Enumerate: return dispatch_eval<Keyword::Enumerate>(*this, x, context);
        case Keyword::Flatten: return dispatch_eval<Keyword::Flatten>(*this, x, context);
        case Keyword::ToList: return dispatch_eval<Keyword::ToList>(*this, x, context);
        case Keyword::Arange: return dispatch_eval<Keyword::Arange>(*this, x, context);
        case Keyword::Parse: return dispatch_eval<Keyword::Parse>(*this, x, context);
        case Keyword::Str: return dispatch_eval<Keyword::Str>(*this, x, context);
        case Keyword::Re: return dispatch_eval<Keyword::Re>(*this, x, context);
        case Keyword::Fmt: return dispatch_eval<Keyword::Fmt>(*this, x, context);
        case Keyword::Card: return dispatch_eval<Keyword::Card>(*this, x, context);
        case Keyword::Size: return dispatch_eval<Keyword::Size>(*this, x, context);
        case Keyword::Sum: return dispatch_eval<Keyword::Sum>(*this, x, context);
        case Keyword::Prod: return dispatch_eval<Keyword::Prod>(*this, x, context);
        case Keyword::Avg: return dispatch_eval<Keyword::Avg>(*this, x, context);
        case Keyword::Slide: return dispatch_eval<Keyword::Slide>(*this, x, context);
        case Keyword::Stride: return dispatch_eval<Keyword::Stride>(*this, x, context);
        case Keyword::Chunks: return dispatch_eval<Keyword::Chunks>(*this, x, context);
        case Keyword::Repeat: return dispatch_eval<Keyword::Repeat>(*this, x, context);
        case Keyword::Cat: return dispatch_eval<Keyword::Cat>(*this, x, context);
        case Keyword::Push: return dispatch_eval<Keyword::Push>(*this, x, context);
        case Keyword::At: return dispatch_eval<Keyword::At>(*this, x, context);
        case Keyword::Del: return dispatch_eval<Keyword::Del>(*this, x, context);
        case Keyword::Lookup: return dispatch_eval<Keyword::Lookup>(*this, x, context);
        case Keyword::Cast: return dispatch_eval<Keyword::Cast>(*this, x, context);
        case Keyword::Uncast: return dispatch_eval<Keyword::Uncast>(*this, x, context);
        case Keyword::Fold: return dispatch_eval<Keyword::Fold>(*this, x, context);
        case Keyword::Map: return dispatch_eval<Keyword::Map>(*this, x, context);
        case Keyword::Filter: return dispatch_eval<Keyword::Filter>(*this, x, context);
        case Keyword::Count: return dispatch_eval<Keyword::Count>(*this, x, context);
        case Keyword::Each: return dispatch_eval<Keyword::Each>(*this, x, context);
        case Keyword::Sort: return dispatch_eval<Keyword::Sort>(*this, x, context);
        case Keyword::Find: return dispatch_eval<Keyword::Find>(*this, x, context);
        case Keyword::FindPtr: return dispatch_eval<Keyword::FindPtr>(*this, x, context);
        case Keyword::FindIdx: return dispatch_eval<Keyword::FindIdx>(*this, x, context);
        case Keyword::Min: return dispatch_eval<Keyword::Min>(*this, x, context);
        case Keyword::Max: return dispatch_eval<Keyword::Max>(*this, x, context);
        case Keyword::Argmin: return dispatch_eval<Keyword::Argmin>(*this, x, context);
        case Keyword::Argmax: return dispatch_eval<Keyword::Argmax>(*this, x, context);
        case Keyword::Recur: return dispatch_eval<Keyword::Recur>(*this, x, context);
        case Keyword::Unfold: return dispatch_eval<Keyword::Unfold>(*this, x, context);
        case Keyword::Op: return dispatch_eval<Keyword::Op>(*this, x, context);
        case Keyword::Bind: return dispatch_eval<Keyword::Bind>(*this, x, context);
        case Keyword::Link: return dispatch_eval<Keyword::Link>(*this, x, context);
        case Keyword::Capture: return dispatch_eval<Keyword::Capture>(*this, x, context);
        case Keyword::Refer: return dispatch_eval<Keyword::Refer>(*this, x, context);
        case Keyword::Let: return dispatch_eval<Keyword::Let>(*this, x, context);
        case Keyword::Any: return dispatch_eval<Keyword::Any>(*this, x, context);
        case Keyword::All: return dispatch_eval<Keyword::All>(*this, x, context);
        case Keyword::Saturate: return dispatch_eval<Keyword::Saturate>(*this, x, context);
        case Keyword::Pipe: return dispatch_eval<Keyword::Pipe>(*this, x, context);
        case Keyword::Tuple: return dispatch_eval<Keyword::Tuple>(*this, x, context);
        case Keyword::Fork: return dispatch_eval<Keyword::Fork>(*this, x, context);
        case Keyword::Flip: return dispatch_eval<Keyword::Flip>(*this, x, context);
        case Keyword::Dbg: return dispatch_eval<Keyword::Dbg>(*this, x, context);
        case Keyword::Eval: return dispatch_eval<Keyword::Eval>(*this, x, context);
        case Keyword::Try: return dispatch_eval<Keyword::Try>(*this, x, context);
        case Keyword::Kwrd: return dispatch_eval<Keyword::Kwrd>(*this, x, context);
        case Keyword::Prms: return dispatch_eval<Keyword::Prms>(*this, x, context);
        case Keyword::Q: return dispatch_eval<Keyword::Q>(*this, x, context);
        case Keyword::D: return dispatch_eval<Keyword::D>(*this, x, context);
        case Keyword::Err: return dispatch_eval<Keyword::Err>(*this, x, context);
        case Keyword::IsErr: return dispatch_eval<Keyword::IsErr>(*this, x, context);
        case Keyword::Assert: return dispatch_eval<Keyword::Assert>(*this, x, context);
        case Keyword::Trace: return dispatch_eval<Keyword::Trace>(*this, x, context);
        case Keyword::PreProc: return dispatch_eval<Keyword::PreProc>(*this, x, context);
        default:
            return nullptr; // TODO: err
    }
}
catch(const std::exception& e)
{
    return detail::make_error_expr(e.what(), keyword_to_str());
}

} // namespace expr
} // namespace zmbt
