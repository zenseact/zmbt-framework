/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/expr/templates/zmbt-framework/backends/cxx/src/expr/keyword_codegen_type.cpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */

#include "zmbt/expr/keyword_codegen_type.hpp"


namespace zmbt {
namespace lang {
namespace detail {


CodegenType getCodegenType(Keyword const& k)
{
    switch (k)
    {
    case Keyword::Noop:
    case Keyword::Null:
    case Keyword::True:
    case Keyword::False:
    case Keyword::Pi:
    case Keyword::E:
    case Keyword::Inf:
    case Keyword::Eps:
    case Keyword::NaN:
    case Keyword::Thread:
        return CodegenType::Const;
    case Keyword::Neg:
    case Keyword::BitNot:
    case Keyword::Bool:
    case Keyword::Not:
        return CodegenType::UnaryOp;
    case Keyword::Add:
    case Keyword::Sub:
    case Keyword::Mul:
    case Keyword::Div:
    case Keyword::Pow:
    case Keyword::Log:
    case Keyword::Mod:
    case Keyword::Quot:
    case Keyword::BitAnd:
    case Keyword::BitOr:
    case Keyword::BitXor:
    case Keyword::Lshift:
    case Keyword::Rshift:
    case Keyword::Eq:
    case Keyword::Ne:
    case Keyword::Lt:
    case Keyword::Le:
    case Keyword::Gt:
    case Keyword::Ge:
    case Keyword::SetEq:
    case Keyword::Subset:
    case Keyword::Superset:
    case Keyword::PSubset:
    case Keyword::PSuperset:
    case Keyword::In:
    case Keyword::NotIn:
    case Keyword::Ni:
    case Keyword::NotNi:
    case Keyword::And:
    case Keyword::Or:
        return CodegenType::BinaryOp;
    case Keyword::Sin:
    case Keyword::Cos:
    case Keyword::Tan:
    case Keyword::Asin:
    case Keyword::Acos:
    case Keyword::Atan:
    case Keyword::Sinh:
    case Keyword::Cosh:
    case Keyword::Tanh:
    case Keyword::Asinh:
    case Keyword::Acosh:
    case Keyword::Atanh:
    case Keyword::Exp:
    case Keyword::Erf:
    case Keyword::Erfc:
    case Keyword::Gamma:
    case Keyword::Abs:
    case Keyword::Ceil:
    case Keyword::Floor:
    case Keyword::Round:
    case Keyword::Sqrt:
    case Keyword::Sign:
    case Keyword::ToList:
    case Keyword::Parse:
    case Keyword::Str:
    case Keyword::D:
    case Keyword::Err:
        return CodegenType::CodegenFn;
    default:
        return CodegenType::None;
    }
}


bool isConst(Keyword const& k)
{
    switch (k)
    {
    case Keyword::Noop:
    case Keyword::Null:
    case Keyword::True:
    case Keyword::False:
    case Keyword::Pi:
    case Keyword::E:
    case Keyword::Inf:
    case Keyword::Eps:
    case Keyword::NaN:
    case Keyword::Thread:
    case Keyword::C:
    case Keyword::Literal:
        return true;
    default:
        return false;
    }
}

bool isHiOrd(Keyword const& k)
{
    switch (k)
    {
    case Keyword::Fold:
    case Keyword::Map:
    case Keyword::Filter:
    case Keyword::Count:
    case Keyword::Each:
    case Keyword::Sort:
    case Keyword::Find:
    case Keyword::FindPtr:
    case Keyword::FindIdx:
    case Keyword::Min:
    case Keyword::Max:
    case Keyword::Argmin:
    case Keyword::Argmax:
    case Keyword::Recur:
    case Keyword::Unfold:
    case Keyword::Op:
    case Keyword::Bind:
    case Keyword::Any:
    case Keyword::All:
    case Keyword::Saturate:
    case Keyword::Compose:
    case Keyword::Fork:
    case Keyword::Flip:
    case Keyword::Dbg:
    case Keyword::Eval:
    case Keyword::Try:
    case Keyword::TryCatch:
        return true;
    default:
        return false;
    }
}


bool isVariadic(Keyword const& k)
{
    switch (k)
    {
    case Keyword::Fmt:
    case Keyword::Bind:
    case Keyword::Any:
    case Keyword::All:
    case Keyword::Saturate:
    case Keyword::Compose:
    case Keyword::Fork:
        return true;
    default:
        return false;
    }
}

bool isTernary(Keyword const& k)
{
    switch (k)
    {
    case Keyword::Recur:
    case Keyword::Unfold:
        return true;
    default:
        return false;
    }
}

} // namespace detail
} // namespace lang
} // namespace zmbt
