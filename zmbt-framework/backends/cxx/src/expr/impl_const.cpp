/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/expr/templates/zmbt-framework/backends/cxx/src/expr/impl_const.cpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */

#include <limits>
#include <boost/math/constants/constants.hpp>

#include "zmbt/expr/operator.hpp"
#include "zmbt/expr/expression.hpp"


namespace zmbt {

boost::json::value zmbt::lang::Expression::eval_Const(boost::json::value const&) const
{
    switch(keyword())
    {
    case Keyword::Noop: return true;
    case Keyword::Null: return nullptr;
    case Keyword::True: return true;
    case Keyword::False: return false;
    case Keyword::Pi: return boost::math::constants::pi<double>();
    case Keyword::E: return boost::math::constants::e<double>();
    case Keyword::Inf: return std::numeric_limits<double>::infinity();
    case Keyword::Eps: return std::numeric_limits<double>::epsilon();
    case Keyword::NaN: return std::numeric_limits<double>::quiet_NaN();
    case Keyword::Thread: return zmbt::get_tid().c_str();
    default:
        throw expression_error("got invalid const expression: %s", underlying());
        return nullptr;
    }
}

} // namespace zmbt

