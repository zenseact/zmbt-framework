/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/expr/templates/zmbt-framework/backends/cxx/src/expr/eval_autogen/constants.cpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */

#include <limits>
#include <boost/math/constants/constants.hpp>

#include "zmbt/expr/operator.hpp"
#include "zmbt/expr/expression.hpp"
#include "zmbt/expr/eval_context.hpp"
#include "zmbt/expr/eval_impl.hpp"
#include "zmbt/expr/eval_impl_pp.hpp"


namespace zmbt {
namespace lang {

ZMBT_DEFINE_EVALUATE_IMPL(Noop) { UNUSED_CTX; return true; }
ZMBT_DEFINE_EVALUATE_IMPL(Null) { UNUSED_CTX; return nullptr; }
ZMBT_DEFINE_EVALUATE_IMPL(True) { UNUSED_CTX; return true; }
ZMBT_DEFINE_EVALUATE_IMPL(False) { UNUSED_CTX; return false; }
ZMBT_DEFINE_EVALUATE_IMPL(Pi) { UNUSED_CTX; return boost::math::constants::pi<double>(); }
ZMBT_DEFINE_EVALUATE_IMPL(E) { UNUSED_CTX; return boost::math::constants::e<double>(); }
ZMBT_DEFINE_EVALUATE_IMPL(Inf) { UNUSED_CTX; return std::numeric_limits<double>::infinity(); }
ZMBT_DEFINE_EVALUATE_IMPL(Eps) { UNUSED_CTX; return std::numeric_limits<double>::epsilon(); }
ZMBT_DEFINE_EVALUATE_IMPL(NaN) { UNUSED_CTX; return std::numeric_limits<double>::quiet_NaN(); }
ZMBT_DEFINE_EVALUATE_IMPL(Thread) { UNUSED_CTX; return zmbt::get_tid().c_str(); }

} // namespace lang
} // namespace zmbt

