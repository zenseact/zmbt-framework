/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/expr/templates/zmbt-framework/backends/cxx/src/expr/eval_autogen/operators.cpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */


#include "zmbt/expr/operator.hpp"
#include "zmbt/expr/expression.hpp"
#include "zmbt/expr/eval_context.hpp"
#include "zmbt/expr/eval_impl.hpp"
#include "zmbt/expr/eval_impl_pp.hpp"


namespace zmbt {
namespace lang {

ZMBT_DEFINE_EVALUATE_IMPL(Neg) { return context.op.apply(Keyword::Neg, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Add) { return context.op.apply(Keyword::Add, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Sub) { return context.op.apply(Keyword::Sub, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Mul) { return context.op.apply(Keyword::Mul, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Div) { return context.op.apply(Keyword::Div, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Pow) { return context.op.apply(Keyword::Pow, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Log) { return context.op.apply(Keyword::Log, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Mod) { return context.op.apply(Keyword::Mod, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Quot) { return context.op.apply(Keyword::Quot, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(BitNot) { return context.op.apply(Keyword::BitNot, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(BitAnd) { return context.op.apply(Keyword::BitAnd, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(BitOr) { return context.op.apply(Keyword::BitOr, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(BitXor) { return context.op.apply(Keyword::BitXor, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Lshift) { return context.op.apply(Keyword::Lshift, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Rshift) { return context.op.apply(Keyword::Rshift, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Eq) { return context.op.apply(Keyword::Eq, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Ne) { return context.op.apply(Keyword::Ne, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Lt) { return context.op.apply(Keyword::Lt, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Le) { return context.op.apply(Keyword::Le, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Gt) { return context.op.apply(Keyword::Gt, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Ge) { return context.op.apply(Keyword::Ge, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(SetEq) { return context.op.apply(Keyword::SetEq, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Subset) { return context.op.apply(Keyword::Subset, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Superset) { return context.op.apply(Keyword::Superset, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(PSubset) { return context.op.apply(Keyword::PSubset, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(PSuperset) { return context.op.apply(Keyword::PSuperset, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(In) { return context.op.apply(Keyword::In, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(NotIn) { return context.op.apply(Keyword::NotIn, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Ni) { return context.op.apply(Keyword::Ni, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(NotNi) { return context.op.apply(Keyword::NotNi, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Bool) { return context.op.apply(Keyword::Bool, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Not) { return context.op.apply(Keyword::Not, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(And) { return context.op.apply(Keyword::And, lhs().eval(), rhs().eval()); }
ZMBT_DEFINE_EVALUATE_IMPL(Or) { return context.op.apply(Keyword::Or, lhs().eval(), rhs().eval()); }


} // namespace lang
} // namespace zmbt

