/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/expr/templates/zmbt-framework/backends/cxx/src/expr/keyword_grammar.cpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */

#include <boost/spirit/include/qi.hpp>

#include "zmbt/expr/keyword.hpp"
#include "zmbt/expr/keyword_grammar.hpp"


namespace qi = boost::spirit::qi;

namespace zmbt {
namespace lang {


KeywordSymbol::KeywordSymbol()
{
    add
    (ZMBT_KEYWORD_PREFIX "Literal", Keyword::Literal)
    (ZMBT_KEYWORD_PREFIX "Void", Keyword::Void)
    (ZMBT_KEYWORD_PREFIX "Noop", Keyword::Noop)
    (ZMBT_KEYWORD_PREFIX "_", Keyword::Noop)
    (ZMBT_KEYWORD_PREFIX "Null", Keyword::Null)
    (ZMBT_KEYWORD_PREFIX "True", Keyword::True)
    (ZMBT_KEYWORD_PREFIX "T", Keyword::True)
    (ZMBT_KEYWORD_PREFIX "False", Keyword::False)
    (ZMBT_KEYWORD_PREFIX "⊥", Keyword::False)
    (ZMBT_KEYWORD_PREFIX "Pi", Keyword::Pi)
    (ZMBT_KEYWORD_PREFIX "π", Keyword::Pi)
    (ZMBT_KEYWORD_PREFIX "E", Keyword::E)
    (ZMBT_KEYWORD_PREFIX "Inf", Keyword::Inf)
    (ZMBT_KEYWORD_PREFIX "Eps", Keyword::Eps)
    (ZMBT_KEYWORD_PREFIX "NaN", Keyword::NaN)
    (ZMBT_KEYWORD_PREFIX "Thread", Keyword::Thread)
    (ZMBT_KEYWORD_PREFIX "Sin", Keyword::Sin)
    (ZMBT_KEYWORD_PREFIX "Cos", Keyword::Cos)
    (ZMBT_KEYWORD_PREFIX "Tan", Keyword::Tan)
    (ZMBT_KEYWORD_PREFIX "Asin", Keyword::Asin)
    (ZMBT_KEYWORD_PREFIX "Acos", Keyword::Acos)
    (ZMBT_KEYWORD_PREFIX "Atan", Keyword::Atan)
    (ZMBT_KEYWORD_PREFIX "Sinh", Keyword::Sinh)
    (ZMBT_KEYWORD_PREFIX "Cosh", Keyword::Cosh)
    (ZMBT_KEYWORD_PREFIX "Tanh", Keyword::Tanh)
    (ZMBT_KEYWORD_PREFIX "Asinh", Keyword::Asinh)
    (ZMBT_KEYWORD_PREFIX "Acosh", Keyword::Acosh)
    (ZMBT_KEYWORD_PREFIX "Atanh", Keyword::Atanh)
    (ZMBT_KEYWORD_PREFIX "Exp", Keyword::Exp)
    (ZMBT_KEYWORD_PREFIX "Erf", Keyword::Erf)
    (ZMBT_KEYWORD_PREFIX "Erfc", Keyword::Erfc)
    (ZMBT_KEYWORD_PREFIX "Gamma", Keyword::Gamma)
    (ZMBT_KEYWORD_PREFIX "Abs", Keyword::Abs)
    (ZMBT_KEYWORD_PREFIX "Ceil", Keyword::Ceil)
    (ZMBT_KEYWORD_PREFIX "Floor", Keyword::Floor)
    (ZMBT_KEYWORD_PREFIX "Round", Keyword::Round)
    (ZMBT_KEYWORD_PREFIX "Sqrt", Keyword::Sqrt)
    (ZMBT_KEYWORD_PREFIX "Sign", Keyword::Sign)
    (ZMBT_KEYWORD_PREFIX "Neg", Keyword::Neg)
    (ZMBT_KEYWORD_PREFIX "Add", Keyword::Add)
    (ZMBT_KEYWORD_PREFIX "+", Keyword::Add)
    (ZMBT_KEYWORD_PREFIX "Sub", Keyword::Sub)
    (ZMBT_KEYWORD_PREFIX "-", Keyword::Sub)
    (ZMBT_KEYWORD_PREFIX "Mul", Keyword::Mul)
    (ZMBT_KEYWORD_PREFIX "*", Keyword::Mul)
    (ZMBT_KEYWORD_PREFIX "Div", Keyword::Div)
    (ZMBT_KEYWORD_PREFIX "/", Keyword::Div)
    (ZMBT_KEYWORD_PREFIX "Pow", Keyword::Pow)
    (ZMBT_KEYWORD_PREFIX "Log", Keyword::Log)
    (ZMBT_KEYWORD_PREFIX "Mod", Keyword::Mod)
    (ZMBT_KEYWORD_PREFIX "%", Keyword::Mod)
    (ZMBT_KEYWORD_PREFIX "Quot", Keyword::Quot)
    (ZMBT_KEYWORD_PREFIX "//", Keyword::Quot)
    (ZMBT_KEYWORD_PREFIX "BitNot", Keyword::BitNot)
    (ZMBT_KEYWORD_PREFIX "~", Keyword::BitNot)
    (ZMBT_KEYWORD_PREFIX "BitAnd", Keyword::BitAnd)
    (ZMBT_KEYWORD_PREFIX "BitOr", Keyword::BitOr)
    (ZMBT_KEYWORD_PREFIX "|", Keyword::BitOr)
    (ZMBT_KEYWORD_PREFIX "BitXor", Keyword::BitXor)
    (ZMBT_KEYWORD_PREFIX "^", Keyword::BitXor)
    (ZMBT_KEYWORD_PREFIX "Lshift", Keyword::Lshift)
    (ZMBT_KEYWORD_PREFIX "<<", Keyword::Lshift)
    (ZMBT_KEYWORD_PREFIX "Rshift", Keyword::Rshift)
    (ZMBT_KEYWORD_PREFIX ">>", Keyword::Rshift)
    (ZMBT_KEYWORD_PREFIX "Eq", Keyword::Eq)
    (ZMBT_KEYWORD_PREFIX "=", Keyword::Eq)
    (ZMBT_KEYWORD_PREFIX "Ne", Keyword::Ne)
    (ZMBT_KEYWORD_PREFIX "≠", Keyword::Ne)
    (ZMBT_KEYWORD_PREFIX "Lt", Keyword::Lt)
    (ZMBT_KEYWORD_PREFIX "<", Keyword::Lt)
    (ZMBT_KEYWORD_PREFIX "Le", Keyword::Le)
    (ZMBT_KEYWORD_PREFIX "≤", Keyword::Le)
    (ZMBT_KEYWORD_PREFIX "Gt", Keyword::Gt)
    (ZMBT_KEYWORD_PREFIX ">", Keyword::Gt)
    (ZMBT_KEYWORD_PREFIX "Ge", Keyword::Ge)
    (ZMBT_KEYWORD_PREFIX "≥", Keyword::Ge)
    (ZMBT_KEYWORD_PREFIX "Near", Keyword::Near)
    (ZMBT_KEYWORD_PREFIX "Approx", Keyword::Near)
    (ZMBT_KEYWORD_PREFIX "Union", Keyword::Union)
    (ZMBT_KEYWORD_PREFIX "∪", Keyword::Union)
    (ZMBT_KEYWORD_PREFIX "Intersect", Keyword::Intersect)
    (ZMBT_KEYWORD_PREFIX "∩", Keyword::Intersect)
    (ZMBT_KEYWORD_PREFIX "Diff", Keyword::Diff)
    (ZMBT_KEYWORD_PREFIX "SetEq", Keyword::SetEq)
    (ZMBT_KEYWORD_PREFIX "≡", Keyword::SetEq)
    (ZMBT_KEYWORD_PREFIX "Subset", Keyword::Subset)
    (ZMBT_KEYWORD_PREFIX "⊆", Keyword::Subset)
    (ZMBT_KEYWORD_PREFIX "Superset", Keyword::Superset)
    (ZMBT_KEYWORD_PREFIX "⊇", Keyword::Superset)
    (ZMBT_KEYWORD_PREFIX "PSubset", Keyword::PSubset)
    (ZMBT_KEYWORD_PREFIX "⊂", Keyword::PSubset)
    (ZMBT_KEYWORD_PREFIX "PSuperset", Keyword::PSuperset)
    (ZMBT_KEYWORD_PREFIX "⊃", Keyword::PSuperset)
    (ZMBT_KEYWORD_PREFIX "In", Keyword::In)
    (ZMBT_KEYWORD_PREFIX "∈", Keyword::In)
    (ZMBT_KEYWORD_PREFIX "NotIn", Keyword::NotIn)
    (ZMBT_KEYWORD_PREFIX "∉", Keyword::NotIn)
    (ZMBT_KEYWORD_PREFIX "Ni", Keyword::Ni)
    (ZMBT_KEYWORD_PREFIX "∋", Keyword::Ni)
    (ZMBT_KEYWORD_PREFIX "Contains", Keyword::Ni)
    (ZMBT_KEYWORD_PREFIX "NotNi", Keyword::NotNi)
    (ZMBT_KEYWORD_PREFIX "∌", Keyword::NotNi)
    (ZMBT_KEYWORD_PREFIX "Bool", Keyword::Bool)
    (ZMBT_KEYWORD_PREFIX "?", Keyword::Bool)
    (ZMBT_KEYWORD_PREFIX "Truthy", Keyword::Bool)
    (ZMBT_KEYWORD_PREFIX "Not", Keyword::Not)
    (ZMBT_KEYWORD_PREFIX "Falsy", Keyword::Not)
    (ZMBT_KEYWORD_PREFIX "Nil", Keyword::Not)
    (ZMBT_KEYWORD_PREFIX "And", Keyword::And)
    (ZMBT_KEYWORD_PREFIX "∧", Keyword::And)
    (ZMBT_KEYWORD_PREFIX "Or", Keyword::Or)
    (ZMBT_KEYWORD_PREFIX "∨", Keyword::Or)
    (ZMBT_KEYWORD_PREFIX "Id", Keyword::Id)
    (ZMBT_KEYWORD_PREFIX "Transp", Keyword::Transp)
    (ZMBT_KEYWORD_PREFIX "Cartesian", Keyword::Cartesian)
    (ZMBT_KEYWORD_PREFIX "×", Keyword::Cartesian)
    (ZMBT_KEYWORD_PREFIX "Reverse", Keyword::Reverse)
    (ZMBT_KEYWORD_PREFIX "Uniques", Keyword::Uniques)
    (ZMBT_KEYWORD_PREFIX "Items", Keyword::Items)
    (ZMBT_KEYWORD_PREFIX "Keys", Keyword::Keys)
    (ZMBT_KEYWORD_PREFIX "Values", Keyword::Values)
    (ZMBT_KEYWORD_PREFIX "Enumerate", Keyword::Enumerate)
    (ZMBT_KEYWORD_PREFIX "Flatten", Keyword::Flatten)
    (ZMBT_KEYWORD_PREFIX "ToList", Keyword::ToList)
    (ZMBT_KEYWORD_PREFIX "Arange", Keyword::Arange)
    (ZMBT_KEYWORD_PREFIX "Parse", Keyword::Parse)
    (ZMBT_KEYWORD_PREFIX "Str", Keyword::Str)
    (ZMBT_KEYWORD_PREFIX "Serialize", Keyword::Str)
    (ZMBT_KEYWORD_PREFIX "Re", Keyword::Re)
    (ZMBT_KEYWORD_PREFIX "Regex", Keyword::Re)
    (ZMBT_KEYWORD_PREFIX "Fmt", Keyword::Fmt)
    (ZMBT_KEYWORD_PREFIX "Format", Keyword::Fmt)
    (ZMBT_KEYWORD_PREFIX "Card", Keyword::Card)
    (ZMBT_KEYWORD_PREFIX "Size", Keyword::Size)
    (ZMBT_KEYWORD_PREFIX "Sum", Keyword::Sum)
    (ZMBT_KEYWORD_PREFIX "Σ", Keyword::Sum)
    (ZMBT_KEYWORD_PREFIX "Prod", Keyword::Prod)
    (ZMBT_KEYWORD_PREFIX "Π", Keyword::Prod)
    (ZMBT_KEYWORD_PREFIX "Avg", Keyword::Avg)
    (ZMBT_KEYWORD_PREFIX "Slide", Keyword::Slide)
    (ZMBT_KEYWORD_PREFIX "Stride", Keyword::Stride)
    (ZMBT_KEYWORD_PREFIX "Chunks", Keyword::Chunks)
    (ZMBT_KEYWORD_PREFIX "Repeat", Keyword::Repeat)
    (ZMBT_KEYWORD_PREFIX "Cat", Keyword::Cat)
    (ZMBT_KEYWORD_PREFIX "Concat", Keyword::Cat)
    (ZMBT_KEYWORD_PREFIX "Push", Keyword::Push)
    (ZMBT_KEYWORD_PREFIX "At", Keyword::At)
    (ZMBT_KEYWORD_PREFIX "Del", Keyword::Del)
    (ZMBT_KEYWORD_PREFIX "Delete", Keyword::Del)
    (ZMBT_KEYWORD_PREFIX "Lookup", Keyword::Lookup)
    (ZMBT_KEYWORD_PREFIX "C", Keyword::C)
    (ZMBT_KEYWORD_PREFIX "Const", Keyword::C)
    (ZMBT_KEYWORD_PREFIX "Let", Keyword::C)
    (ZMBT_KEYWORD_PREFIX "Cast", Keyword::Cast)
    (ZMBT_KEYWORD_PREFIX "Decorate", Keyword::Cast)
    (ZMBT_KEYWORD_PREFIX "Uncast", Keyword::Uncast)
    (ZMBT_KEYWORD_PREFIX "Undecorate", Keyword::Uncast)
    (ZMBT_KEYWORD_PREFIX "Fold", Keyword::Fold)
    (ZMBT_KEYWORD_PREFIX "Reduce", Keyword::Fold)
    (ZMBT_KEYWORD_PREFIX "Map", Keyword::Map)
    (ZMBT_KEYWORD_PREFIX "Filter", Keyword::Filter)
    (ZMBT_KEYWORD_PREFIX "Count", Keyword::Count)
    (ZMBT_KEYWORD_PREFIX "Each", Keyword::Each)
    (ZMBT_KEYWORD_PREFIX "Sort", Keyword::Sort)
    (ZMBT_KEYWORD_PREFIX "Find", Keyword::Find)
    (ZMBT_KEYWORD_PREFIX "FindPtr", Keyword::FindPtr)
    (ZMBT_KEYWORD_PREFIX "FindIdx", Keyword::FindIdx)
    (ZMBT_KEYWORD_PREFIX "Min", Keyword::Min)
    (ZMBT_KEYWORD_PREFIX "Max", Keyword::Max)
    (ZMBT_KEYWORD_PREFIX "Argmin", Keyword::Argmin)
    (ZMBT_KEYWORD_PREFIX "Argmax", Keyword::Argmax)
    (ZMBT_KEYWORD_PREFIX "Recur", Keyword::Recur)
    (ZMBT_KEYWORD_PREFIX "Unfold", Keyword::Unfold)
    (ZMBT_KEYWORD_PREFIX "Op", Keyword::Op)
    (ZMBT_KEYWORD_PREFIX "Overload", Keyword::Op)
    (ZMBT_KEYWORD_PREFIX "Bind", Keyword::Bind)
    (ZMBT_KEYWORD_PREFIX "Any", Keyword::Any)
    (ZMBT_KEYWORD_PREFIX "All", Keyword::All)
    (ZMBT_KEYWORD_PREFIX "Saturate", Keyword::Saturate)
    (ZMBT_KEYWORD_PREFIX "Compose", Keyword::Compose)
    (ZMBT_KEYWORD_PREFIX "Fork", Keyword::Fork)
    (ZMBT_KEYWORD_PREFIX "Flip", Keyword::Flip)
    (ZMBT_KEYWORD_PREFIX "Dbg", Keyword::Dbg)
    (ZMBT_KEYWORD_PREFIX "Debug", Keyword::Dbg)
    (ZMBT_KEYWORD_PREFIX "Eval", Keyword::Eval)
    (ZMBT_KEYWORD_PREFIX "Try", Keyword::Try)
    (ZMBT_KEYWORD_PREFIX "TryCatch", Keyword::TryCatch)
    (ZMBT_KEYWORD_PREFIX "D", Keyword::D)
    (ZMBT_KEYWORD_PREFIX "Default", Keyword::D)
    (ZMBT_KEYWORD_PREFIX "Err", Keyword::Err)
    (ZMBT_KEYWORD_PREFIX "Error", Keyword::Err)
    ;
}


KeywordGrammar::KeywordGrammar()
    : KeywordGrammar::base_type(start)
{
    using boost::spirit::qi::eps;
    using boost::spirit::qi::_val;
    using boost::spirit::qi::_1;

    start = eps [_val = Keyword::Undefined] >>
        (
            +keyword_symbol [_val = _1]
        )
    ;
}


void tag_invoke(boost::json::value_from_tag const&, boost::json::value& v, Keyword const& kw)
{
    switch(kw)
    {

    case Keyword::Literal: { v = ZMBT_KEYWORD_PREFIX "Literal"; break; }
    case Keyword::Void: { v = ZMBT_KEYWORD_PREFIX "Void"; break; }
    case Keyword::Noop: { v = ZMBT_KEYWORD_PREFIX "Noop"; break; }
    case Keyword::Null: { v = ZMBT_KEYWORD_PREFIX "Null"; break; }
    case Keyword::True: { v = ZMBT_KEYWORD_PREFIX "True"; break; }
    case Keyword::False: { v = ZMBT_KEYWORD_PREFIX "False"; break; }
    case Keyword::Pi: { v = ZMBT_KEYWORD_PREFIX "Pi"; break; }
    case Keyword::E: { v = ZMBT_KEYWORD_PREFIX "E"; break; }
    case Keyword::Inf: { v = ZMBT_KEYWORD_PREFIX "Inf"; break; }
    case Keyword::Eps: { v = ZMBT_KEYWORD_PREFIX "Eps"; break; }
    case Keyword::NaN: { v = ZMBT_KEYWORD_PREFIX "NaN"; break; }
    case Keyword::Thread: { v = ZMBT_KEYWORD_PREFIX "Thread"; break; }
    case Keyword::Sin: { v = ZMBT_KEYWORD_PREFIX "Sin"; break; }
    case Keyword::Cos: { v = ZMBT_KEYWORD_PREFIX "Cos"; break; }
    case Keyword::Tan: { v = ZMBT_KEYWORD_PREFIX "Tan"; break; }
    case Keyword::Asin: { v = ZMBT_KEYWORD_PREFIX "Asin"; break; }
    case Keyword::Acos: { v = ZMBT_KEYWORD_PREFIX "Acos"; break; }
    case Keyword::Atan: { v = ZMBT_KEYWORD_PREFIX "Atan"; break; }
    case Keyword::Sinh: { v = ZMBT_KEYWORD_PREFIX "Sinh"; break; }
    case Keyword::Cosh: { v = ZMBT_KEYWORD_PREFIX "Cosh"; break; }
    case Keyword::Tanh: { v = ZMBT_KEYWORD_PREFIX "Tanh"; break; }
    case Keyword::Asinh: { v = ZMBT_KEYWORD_PREFIX "Asinh"; break; }
    case Keyword::Acosh: { v = ZMBT_KEYWORD_PREFIX "Acosh"; break; }
    case Keyword::Atanh: { v = ZMBT_KEYWORD_PREFIX "Atanh"; break; }
    case Keyword::Exp: { v = ZMBT_KEYWORD_PREFIX "Exp"; break; }
    case Keyword::Erf: { v = ZMBT_KEYWORD_PREFIX "Erf"; break; }
    case Keyword::Erfc: { v = ZMBT_KEYWORD_PREFIX "Erfc"; break; }
    case Keyword::Gamma: { v = ZMBT_KEYWORD_PREFIX "Gamma"; break; }
    case Keyword::Abs: { v = ZMBT_KEYWORD_PREFIX "Abs"; break; }
    case Keyword::Ceil: { v = ZMBT_KEYWORD_PREFIX "Ceil"; break; }
    case Keyword::Floor: { v = ZMBT_KEYWORD_PREFIX "Floor"; break; }
    case Keyword::Round: { v = ZMBT_KEYWORD_PREFIX "Round"; break; }
    case Keyword::Sqrt: { v = ZMBT_KEYWORD_PREFIX "Sqrt"; break; }
    case Keyword::Sign: { v = ZMBT_KEYWORD_PREFIX "Sign"; break; }
    case Keyword::Neg: { v = ZMBT_KEYWORD_PREFIX "Neg"; break; }
    case Keyword::Add: { v = ZMBT_KEYWORD_PREFIX "Add"; break; }
    case Keyword::Sub: { v = ZMBT_KEYWORD_PREFIX "Sub"; break; }
    case Keyword::Mul: { v = ZMBT_KEYWORD_PREFIX "Mul"; break; }
    case Keyword::Div: { v = ZMBT_KEYWORD_PREFIX "Div"; break; }
    case Keyword::Pow: { v = ZMBT_KEYWORD_PREFIX "Pow"; break; }
    case Keyword::Log: { v = ZMBT_KEYWORD_PREFIX "Log"; break; }
    case Keyword::Mod: { v = ZMBT_KEYWORD_PREFIX "Mod"; break; }
    case Keyword::Quot: { v = ZMBT_KEYWORD_PREFIX "Quot"; break; }
    case Keyword::BitNot: { v = ZMBT_KEYWORD_PREFIX "BitNot"; break; }
    case Keyword::BitAnd: { v = ZMBT_KEYWORD_PREFIX "BitAnd"; break; }
    case Keyword::BitOr: { v = ZMBT_KEYWORD_PREFIX "BitOr"; break; }
    case Keyword::BitXor: { v = ZMBT_KEYWORD_PREFIX "BitXor"; break; }
    case Keyword::Lshift: { v = ZMBT_KEYWORD_PREFIX "Lshift"; break; }
    case Keyword::Rshift: { v = ZMBT_KEYWORD_PREFIX "Rshift"; break; }
    case Keyword::Eq: { v = ZMBT_KEYWORD_PREFIX "Eq"; break; }
    case Keyword::Ne: { v = ZMBT_KEYWORD_PREFIX "Ne"; break; }
    case Keyword::Lt: { v = ZMBT_KEYWORD_PREFIX "Lt"; break; }
    case Keyword::Le: { v = ZMBT_KEYWORD_PREFIX "Le"; break; }
    case Keyword::Gt: { v = ZMBT_KEYWORD_PREFIX "Gt"; break; }
    case Keyword::Ge: { v = ZMBT_KEYWORD_PREFIX "Ge"; break; }
    case Keyword::Near: { v = ZMBT_KEYWORD_PREFIX "Near"; break; }
    case Keyword::Union: { v = ZMBT_KEYWORD_PREFIX "Union"; break; }
    case Keyword::Intersect: { v = ZMBT_KEYWORD_PREFIX "Intersect"; break; }
    case Keyword::Diff: { v = ZMBT_KEYWORD_PREFIX "Diff"; break; }
    case Keyword::SetEq: { v = ZMBT_KEYWORD_PREFIX "SetEq"; break; }
    case Keyword::Subset: { v = ZMBT_KEYWORD_PREFIX "Subset"; break; }
    case Keyword::Superset: { v = ZMBT_KEYWORD_PREFIX "Superset"; break; }
    case Keyword::PSubset: { v = ZMBT_KEYWORD_PREFIX "PSubset"; break; }
    case Keyword::PSuperset: { v = ZMBT_KEYWORD_PREFIX "PSuperset"; break; }
    case Keyword::In: { v = ZMBT_KEYWORD_PREFIX "In"; break; }
    case Keyword::NotIn: { v = ZMBT_KEYWORD_PREFIX "NotIn"; break; }
    case Keyword::Ni: { v = ZMBT_KEYWORD_PREFIX "Ni"; break; }
    case Keyword::NotNi: { v = ZMBT_KEYWORD_PREFIX "NotNi"; break; }
    case Keyword::Bool: { v = ZMBT_KEYWORD_PREFIX "Bool"; break; }
    case Keyword::Not: { v = ZMBT_KEYWORD_PREFIX "Not"; break; }
    case Keyword::And: { v = ZMBT_KEYWORD_PREFIX "And"; break; }
    case Keyword::Or: { v = ZMBT_KEYWORD_PREFIX "Or"; break; }
    case Keyword::Id: { v = ZMBT_KEYWORD_PREFIX "Id"; break; }
    case Keyword::Transp: { v = ZMBT_KEYWORD_PREFIX "Transp"; break; }
    case Keyword::Cartesian: { v = ZMBT_KEYWORD_PREFIX "Cartesian"; break; }
    case Keyword::Reverse: { v = ZMBT_KEYWORD_PREFIX "Reverse"; break; }
    case Keyword::Uniques: { v = ZMBT_KEYWORD_PREFIX "Uniques"; break; }
    case Keyword::Items: { v = ZMBT_KEYWORD_PREFIX "Items"; break; }
    case Keyword::Keys: { v = ZMBT_KEYWORD_PREFIX "Keys"; break; }
    case Keyword::Values: { v = ZMBT_KEYWORD_PREFIX "Values"; break; }
    case Keyword::Enumerate: { v = ZMBT_KEYWORD_PREFIX "Enumerate"; break; }
    case Keyword::Flatten: { v = ZMBT_KEYWORD_PREFIX "Flatten"; break; }
    case Keyword::ToList: { v = ZMBT_KEYWORD_PREFIX "ToList"; break; }
    case Keyword::Arange: { v = ZMBT_KEYWORD_PREFIX "Arange"; break; }
    case Keyword::Parse: { v = ZMBT_KEYWORD_PREFIX "Parse"; break; }
    case Keyword::Str: { v = ZMBT_KEYWORD_PREFIX "Str"; break; }
    case Keyword::Re: { v = ZMBT_KEYWORD_PREFIX "Re"; break; }
    case Keyword::Fmt: { v = ZMBT_KEYWORD_PREFIX "Fmt"; break; }
    case Keyword::Card: { v = ZMBT_KEYWORD_PREFIX "Card"; break; }
    case Keyword::Size: { v = ZMBT_KEYWORD_PREFIX "Size"; break; }
    case Keyword::Sum: { v = ZMBT_KEYWORD_PREFIX "Sum"; break; }
    case Keyword::Prod: { v = ZMBT_KEYWORD_PREFIX "Prod"; break; }
    case Keyword::Avg: { v = ZMBT_KEYWORD_PREFIX "Avg"; break; }
    case Keyword::Slide: { v = ZMBT_KEYWORD_PREFIX "Slide"; break; }
    case Keyword::Stride: { v = ZMBT_KEYWORD_PREFIX "Stride"; break; }
    case Keyword::Chunks: { v = ZMBT_KEYWORD_PREFIX "Chunks"; break; }
    case Keyword::Repeat: { v = ZMBT_KEYWORD_PREFIX "Repeat"; break; }
    case Keyword::Cat: { v = ZMBT_KEYWORD_PREFIX "Cat"; break; }
    case Keyword::Push: { v = ZMBT_KEYWORD_PREFIX "Push"; break; }
    case Keyword::At: { v = ZMBT_KEYWORD_PREFIX "At"; break; }
    case Keyword::Del: { v = ZMBT_KEYWORD_PREFIX "Del"; break; }
    case Keyword::Lookup: { v = ZMBT_KEYWORD_PREFIX "Lookup"; break; }
    case Keyword::C: { v = ZMBT_KEYWORD_PREFIX "C"; break; }
    case Keyword::Cast: { v = ZMBT_KEYWORD_PREFIX "Cast"; break; }
    case Keyword::Uncast: { v = ZMBT_KEYWORD_PREFIX "Uncast"; break; }
    case Keyword::Fold: { v = ZMBT_KEYWORD_PREFIX "Fold"; break; }
    case Keyword::Map: { v = ZMBT_KEYWORD_PREFIX "Map"; break; }
    case Keyword::Filter: { v = ZMBT_KEYWORD_PREFIX "Filter"; break; }
    case Keyword::Count: { v = ZMBT_KEYWORD_PREFIX "Count"; break; }
    case Keyword::Each: { v = ZMBT_KEYWORD_PREFIX "Each"; break; }
    case Keyword::Sort: { v = ZMBT_KEYWORD_PREFIX "Sort"; break; }
    case Keyword::Find: { v = ZMBT_KEYWORD_PREFIX "Find"; break; }
    case Keyword::FindPtr: { v = ZMBT_KEYWORD_PREFIX "FindPtr"; break; }
    case Keyword::FindIdx: { v = ZMBT_KEYWORD_PREFIX "FindIdx"; break; }
    case Keyword::Min: { v = ZMBT_KEYWORD_PREFIX "Min"; break; }
    case Keyword::Max: { v = ZMBT_KEYWORD_PREFIX "Max"; break; }
    case Keyword::Argmin: { v = ZMBT_KEYWORD_PREFIX "Argmin"; break; }
    case Keyword::Argmax: { v = ZMBT_KEYWORD_PREFIX "Argmax"; break; }
    case Keyword::Recur: { v = ZMBT_KEYWORD_PREFIX "Recur"; break; }
    case Keyword::Unfold: { v = ZMBT_KEYWORD_PREFIX "Unfold"; break; }
    case Keyword::Op: { v = ZMBT_KEYWORD_PREFIX "Op"; break; }
    case Keyword::Bind: { v = ZMBT_KEYWORD_PREFIX "Bind"; break; }
    case Keyword::Any: { v = ZMBT_KEYWORD_PREFIX "Any"; break; }
    case Keyword::All: { v = ZMBT_KEYWORD_PREFIX "All"; break; }
    case Keyword::Saturate: { v = ZMBT_KEYWORD_PREFIX "Saturate"; break; }
    case Keyword::Compose: { v = ZMBT_KEYWORD_PREFIX "Compose"; break; }
    case Keyword::Fork: { v = ZMBT_KEYWORD_PREFIX "Fork"; break; }
    case Keyword::Flip: { v = ZMBT_KEYWORD_PREFIX "Flip"; break; }
    case Keyword::Dbg: { v = ZMBT_KEYWORD_PREFIX "Dbg"; break; }
    case Keyword::Eval: { v = ZMBT_KEYWORD_PREFIX "Eval"; break; }
    case Keyword::Try: { v = ZMBT_KEYWORD_PREFIX "Try"; break; }
    case Keyword::TryCatch: { v = ZMBT_KEYWORD_PREFIX "TryCatch"; break; }
    case Keyword::D: { v = ZMBT_KEYWORD_PREFIX "D"; break; }
    case Keyword::Err: { v = ZMBT_KEYWORD_PREFIX "Err"; break; }
        // TODO: throw
        default: v = ":undefined";
    }
}


Keyword tag_invoke(boost::json::value_to_tag<Keyword> const&, boost::json::value const& v)
{
    if (not v.is_string())
    {
        return Keyword::Undefined;
    }

    static KeywordGrammar const keyword_parser {};

    auto const& str = v.as_string();
    auto iter = str.cbegin();
    auto end = str.cend();
    Keyword keyword_out {Keyword::Undefined};
    static_cast<void>(boost::spirit::qi::parse(iter, end, keyword_parser, keyword_out));
    return keyword_out;
}

} // namespace lang
} // namespace zmbt
