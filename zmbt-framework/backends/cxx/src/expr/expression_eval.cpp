/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/expr/templates/zmbt-framework/backends/cxx/src/expr/expression_eval.cpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */


#include "zmbt/expr/expression.hpp"
#include "zmbt/expr/eval_impl.hpp"

namespace zmbt {
namespace lang {

extern template Expression dispatch_eval<Keyword::Noop>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Null>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::True>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::False>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Pi>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::E>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Inf>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Eps>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::NaN>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Thread>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Sin>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Cos>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Tan>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Asin>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Acos>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Atan>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Sinh>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Cosh>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Tanh>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Asinh>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Acosh>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Atanh>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Exp>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Erf>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Erfc>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Gamma>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Abs>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Ceil>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Floor>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Round>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Sqrt>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Sign>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Neg>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Add>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Sub>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Mul>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Div>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Pow>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Log>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Mod>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Quot>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::BitNot>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::BitAnd>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::BitOr>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::BitXor>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Lshift>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Rshift>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Eq>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Ne>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Lt>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Le>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Gt>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Ge>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Near>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Union>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Intersect>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Diff>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::SetEq>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Subset>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Superset>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::PSubset>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::PSuperset>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::In>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::NotIn>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Ni>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::NotNi>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Bool>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Not>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::And>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Or>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Id>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Transp>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Cartesian>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Reverse>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Uniques>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Items>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Keys>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Values>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Enumerate>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Flatten>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::ToList>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Arange>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Parse>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Str>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Re>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Fmt>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Card>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Size>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Sum>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Prod>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Avg>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Slide>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Stride>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Chunks>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Repeat>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Cat>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Push>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::At>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Del>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Lookup>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Cast>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Uncast>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Fold>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Map>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Filter>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Count>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Each>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Sort>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Find>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::FindPtr>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::FindIdx>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Min>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Max>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Argmin>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Argmax>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Recur>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Unfold>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Op>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Bind>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Any>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::All>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Saturate>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Pipe>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Pack>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Fork>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Flip>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Dbg>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Eval>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Try>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Kwrd>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Prms>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Q>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::D>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Err>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::Trace>(Expression const&, Expression const&, EvalContext const&);
extern template Expression dispatch_eval<Keyword::PreProc>(Expression const&, Expression const&, EvalContext const&);


boost::json::value Expression::eval(Expression const& x, EvalContext const& ctx) const
{
    return eval_e(x, ctx).to_json();
}

boost::json::value Expression::eval(Expression const& x) const
{
    return eval(x, {});
}

Expression Expression::eval_e(Expression const& x, EvalContext const& context) const
try
{

    switch (keyword())
    {
        case Keyword::Literal: return *this;
        case Keyword::Noop: return dispatch_eval<Keyword::Noop>(*this, x, context);
        case Keyword::Null: return dispatch_eval<Keyword::Null>(*this, x, context);
        case Keyword::True: return dispatch_eval<Keyword::True>(*this, x, context);
        case Keyword::False: return dispatch_eval<Keyword::False>(*this, x, context);
        case Keyword::Pi: return dispatch_eval<Keyword::Pi>(*this, x, context);
        case Keyword::E: return dispatch_eval<Keyword::E>(*this, x, context);
        case Keyword::Inf: return dispatch_eval<Keyword::Inf>(*this, x, context);
        case Keyword::Eps: return dispatch_eval<Keyword::Eps>(*this, x, context);
        case Keyword::NaN: return dispatch_eval<Keyword::NaN>(*this, x, context);
        case Keyword::Thread: return dispatch_eval<Keyword::Thread>(*this, x, context);
        case Keyword::Sin: return dispatch_eval<Keyword::Sin>(*this, x, context);
        case Keyword::Cos: return dispatch_eval<Keyword::Cos>(*this, x, context);
        case Keyword::Tan: return dispatch_eval<Keyword::Tan>(*this, x, context);
        case Keyword::Asin: return dispatch_eval<Keyword::Asin>(*this, x, context);
        case Keyword::Acos: return dispatch_eval<Keyword::Acos>(*this, x, context);
        case Keyword::Atan: return dispatch_eval<Keyword::Atan>(*this, x, context);
        case Keyword::Sinh: return dispatch_eval<Keyword::Sinh>(*this, x, context);
        case Keyword::Cosh: return dispatch_eval<Keyword::Cosh>(*this, x, context);
        case Keyword::Tanh: return dispatch_eval<Keyword::Tanh>(*this, x, context);
        case Keyword::Asinh: return dispatch_eval<Keyword::Asinh>(*this, x, context);
        case Keyword::Acosh: return dispatch_eval<Keyword::Acosh>(*this, x, context);
        case Keyword::Atanh: return dispatch_eval<Keyword::Atanh>(*this, x, context);
        case Keyword::Exp: return dispatch_eval<Keyword::Exp>(*this, x, context);
        case Keyword::Erf: return dispatch_eval<Keyword::Erf>(*this, x, context);
        case Keyword::Erfc: return dispatch_eval<Keyword::Erfc>(*this, x, context);
        case Keyword::Gamma: return dispatch_eval<Keyword::Gamma>(*this, x, context);
        case Keyword::Abs: return dispatch_eval<Keyword::Abs>(*this, x, context);
        case Keyword::Ceil: return dispatch_eval<Keyword::Ceil>(*this, x, context);
        case Keyword::Floor: return dispatch_eval<Keyword::Floor>(*this, x, context);
        case Keyword::Round: return dispatch_eval<Keyword::Round>(*this, x, context);
        case Keyword::Sqrt: return dispatch_eval<Keyword::Sqrt>(*this, x, context);
        case Keyword::Sign: return dispatch_eval<Keyword::Sign>(*this, x, context);
        case Keyword::Neg: return dispatch_eval<Keyword::Neg>(*this, x, context);
        case Keyword::Add: return dispatch_eval<Keyword::Add>(*this, x, context);
        case Keyword::Sub: return dispatch_eval<Keyword::Sub>(*this, x, context);
        case Keyword::Mul: return dispatch_eval<Keyword::Mul>(*this, x, context);
        case Keyword::Div: return dispatch_eval<Keyword::Div>(*this, x, context);
        case Keyword::Pow: return dispatch_eval<Keyword::Pow>(*this, x, context);
        case Keyword::Log: return dispatch_eval<Keyword::Log>(*this, x, context);
        case Keyword::Mod: return dispatch_eval<Keyword::Mod>(*this, x, context);
        case Keyword::Quot: return dispatch_eval<Keyword::Quot>(*this, x, context);
        case Keyword::BitNot: return dispatch_eval<Keyword::BitNot>(*this, x, context);
        case Keyword::BitAnd: return dispatch_eval<Keyword::BitAnd>(*this, x, context);
        case Keyword::BitOr: return dispatch_eval<Keyword::BitOr>(*this, x, context);
        case Keyword::BitXor: return dispatch_eval<Keyword::BitXor>(*this, x, context);
        case Keyword::Lshift: return dispatch_eval<Keyword::Lshift>(*this, x, context);
        case Keyword::Rshift: return dispatch_eval<Keyword::Rshift>(*this, x, context);
        case Keyword::Eq: return dispatch_eval<Keyword::Eq>(*this, x, context);
        case Keyword::Ne: return dispatch_eval<Keyword::Ne>(*this, x, context);
        case Keyword::Lt: return dispatch_eval<Keyword::Lt>(*this, x, context);
        case Keyword::Le: return dispatch_eval<Keyword::Le>(*this, x, context);
        case Keyword::Gt: return dispatch_eval<Keyword::Gt>(*this, x, context);
        case Keyword::Ge: return dispatch_eval<Keyword::Ge>(*this, x, context);
        case Keyword::Near: return dispatch_eval<Keyword::Near>(*this, x, context);
        case Keyword::Union: return dispatch_eval<Keyword::Union>(*this, x, context);
        case Keyword::Intersect: return dispatch_eval<Keyword::Intersect>(*this, x, context);
        case Keyword::Diff: return dispatch_eval<Keyword::Diff>(*this, x, context);
        case Keyword::SetEq: return dispatch_eval<Keyword::SetEq>(*this, x, context);
        case Keyword::Subset: return dispatch_eval<Keyword::Subset>(*this, x, context);
        case Keyword::Superset: return dispatch_eval<Keyword::Superset>(*this, x, context);
        case Keyword::PSubset: return dispatch_eval<Keyword::PSubset>(*this, x, context);
        case Keyword::PSuperset: return dispatch_eval<Keyword::PSuperset>(*this, x, context);
        case Keyword::In: return dispatch_eval<Keyword::In>(*this, x, context);
        case Keyword::NotIn: return dispatch_eval<Keyword::NotIn>(*this, x, context);
        case Keyword::Ni: return dispatch_eval<Keyword::Ni>(*this, x, context);
        case Keyword::NotNi: return dispatch_eval<Keyword::NotNi>(*this, x, context);
        case Keyword::Bool: return dispatch_eval<Keyword::Bool>(*this, x, context);
        case Keyword::Not: return dispatch_eval<Keyword::Not>(*this, x, context);
        case Keyword::And: return dispatch_eval<Keyword::And>(*this, x, context);
        case Keyword::Or: return dispatch_eval<Keyword::Or>(*this, x, context);
        case Keyword::Id: return dispatch_eval<Keyword::Id>(*this, x, context);
        case Keyword::Transp: return dispatch_eval<Keyword::Transp>(*this, x, context);
        case Keyword::Cartesian: return dispatch_eval<Keyword::Cartesian>(*this, x, context);
        case Keyword::Reverse: return dispatch_eval<Keyword::Reverse>(*this, x, context);
        case Keyword::Uniques: return dispatch_eval<Keyword::Uniques>(*this, x, context);
        case Keyword::Items: return dispatch_eval<Keyword::Items>(*this, x, context);
        case Keyword::Keys: return dispatch_eval<Keyword::Keys>(*this, x, context);
        case Keyword::Values: return dispatch_eval<Keyword::Values>(*this, x, context);
        case Keyword::Enumerate: return dispatch_eval<Keyword::Enumerate>(*this, x, context);
        case Keyword::Flatten: return dispatch_eval<Keyword::Flatten>(*this, x, context);
        case Keyword::ToList: return dispatch_eval<Keyword::ToList>(*this, x, context);
        case Keyword::Arange: return dispatch_eval<Keyword::Arange>(*this, x, context);
        case Keyword::Parse: return dispatch_eval<Keyword::Parse>(*this, x, context);
        case Keyword::Str: return dispatch_eval<Keyword::Str>(*this, x, context);
        case Keyword::Re: return dispatch_eval<Keyword::Re>(*this, x, context);
        case Keyword::Fmt: return dispatch_eval<Keyword::Fmt>(*this, x, context);
        case Keyword::Card: return dispatch_eval<Keyword::Card>(*this, x, context);
        case Keyword::Size: return dispatch_eval<Keyword::Size>(*this, x, context);
        case Keyword::Sum: return dispatch_eval<Keyword::Sum>(*this, x, context);
        case Keyword::Prod: return dispatch_eval<Keyword::Prod>(*this, x, context);
        case Keyword::Avg: return dispatch_eval<Keyword::Avg>(*this, x, context);
        case Keyword::Slide: return dispatch_eval<Keyword::Slide>(*this, x, context);
        case Keyword::Stride: return dispatch_eval<Keyword::Stride>(*this, x, context);
        case Keyword::Chunks: return dispatch_eval<Keyword::Chunks>(*this, x, context);
        case Keyword::Repeat: return dispatch_eval<Keyword::Repeat>(*this, x, context);
        case Keyword::Cat: return dispatch_eval<Keyword::Cat>(*this, x, context);
        case Keyword::Push: return dispatch_eval<Keyword::Push>(*this, x, context);
        case Keyword::At: return dispatch_eval<Keyword::At>(*this, x, context);
        case Keyword::Del: return dispatch_eval<Keyword::Del>(*this, x, context);
        case Keyword::Lookup: return dispatch_eval<Keyword::Lookup>(*this, x, context);
        case Keyword::Cast: return dispatch_eval<Keyword::Cast>(*this, x, context);
        case Keyword::Uncast: return dispatch_eval<Keyword::Uncast>(*this, x, context);
        case Keyword::Fold: return dispatch_eval<Keyword::Fold>(*this, x, context);
        case Keyword::Map: return dispatch_eval<Keyword::Map>(*this, x, context);
        case Keyword::Filter: return dispatch_eval<Keyword::Filter>(*this, x, context);
        case Keyword::Count: return dispatch_eval<Keyword::Count>(*this, x, context);
        case Keyword::Each: return dispatch_eval<Keyword::Each>(*this, x, context);
        case Keyword::Sort: return dispatch_eval<Keyword::Sort>(*this, x, context);
        case Keyword::Find: return dispatch_eval<Keyword::Find>(*this, x, context);
        case Keyword::FindPtr: return dispatch_eval<Keyword::FindPtr>(*this, x, context);
        case Keyword::FindIdx: return dispatch_eval<Keyword::FindIdx>(*this, x, context);
        case Keyword::Min: return dispatch_eval<Keyword::Min>(*this, x, context);
        case Keyword::Max: return dispatch_eval<Keyword::Max>(*this, x, context);
        case Keyword::Argmin: return dispatch_eval<Keyword::Argmin>(*this, x, context);
        case Keyword::Argmax: return dispatch_eval<Keyword::Argmax>(*this, x, context);
        case Keyword::Recur: return dispatch_eval<Keyword::Recur>(*this, x, context);
        case Keyword::Unfold: return dispatch_eval<Keyword::Unfold>(*this, x, context);
        case Keyword::Op: return dispatch_eval<Keyword::Op>(*this, x, context);
        case Keyword::Bind: return dispatch_eval<Keyword::Bind>(*this, x, context);
        case Keyword::Any: return dispatch_eval<Keyword::Any>(*this, x, context);
        case Keyword::All: return dispatch_eval<Keyword::All>(*this, x, context);
        case Keyword::Saturate: return dispatch_eval<Keyword::Saturate>(*this, x, context);
        case Keyword::Pipe: return dispatch_eval<Keyword::Pipe>(*this, x, context);
        case Keyword::Pack: return dispatch_eval<Keyword::Pack>(*this, x, context);
        case Keyword::Fork: return dispatch_eval<Keyword::Fork>(*this, x, context);
        case Keyword::Flip: return dispatch_eval<Keyword::Flip>(*this, x, context);
        case Keyword::Dbg: return dispatch_eval<Keyword::Dbg>(*this, x, context);
        case Keyword::Eval: return dispatch_eval<Keyword::Eval>(*this, x, context);
        case Keyword::Try: return dispatch_eval<Keyword::Try>(*this, x, context);
        case Keyword::Kwrd: return dispatch_eval<Keyword::Kwrd>(*this, x, context);
        case Keyword::Prms: return dispatch_eval<Keyword::Prms>(*this, x, context);
        case Keyword::Q: return dispatch_eval<Keyword::Q>(*this, x, context);
        case Keyword::D: return dispatch_eval<Keyword::D>(*this, x, context);
        case Keyword::Err: return dispatch_eval<Keyword::Err>(*this, x, context);
        case Keyword::Trace: return dispatch_eval<Keyword::Trace>(*this, x, context);
        case Keyword::PreProc: return dispatch_eval<Keyword::PreProc>(*this, x, context);
        default:
            return nullptr; // TODO: err
    }
}
catch(const std::exception& e)
{
    return detail::make_error_expr(e.what(), keyword_to_str());
}

} // namespace expr
} // namespace zmbt
