/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/expr/templates/zmbt-framework/backends/cxx/include/zmbt/expr/keyword.hpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */

#ifndef ZMBT_EXPR_KEYWORD_HPP_
#define ZMBT_EXPR_KEYWORD_HPP_

#include <boost/json.hpp>

#include "zmbt/reflect.hpp"


namespace zmbt {
namespace lang {


/// ZMBT Expression keyword
enum class Keyword
{
    Undefined,

    /// Literal
    Literal,

    /// Void
    Void,

    /// Noop
    Noop,

    /// Null
    Null,

    /// True
    True,

    /// False
    False,

    /// Pi
    Pi,

    /// E
    E,

    /// Inf
    Inf,

    /// Eps
    Eps,

    /// NaN
    NaN,

    /// Thread
    Thread,

    /// Sin
    Sin,

    /// Cos
    Cos,

    /// Tan
    Tan,

    /// Asin
    Asin,

    /// Acos
    Acos,

    /// Atan
    Atan,

    /// Sinh
    Sinh,

    /// Cosh
    Cosh,

    /// Tanh
    Tanh,

    /// Asinh
    Asinh,

    /// Acosh
    Acosh,

    /// Atanh
    Atanh,

    /// Exp
    Exp,

    /// Erf
    Erf,

    /// Erfc
    Erfc,

    /// Gamma
    Gamma,

    /// Abs
    Abs,

    /// Ceil
    Ceil,

    /// Floor
    Floor,

    /// Round
    Round,

    /// Sqrt
    Sqrt,

    /// Sign
    Sign,

    /// Neg
    Neg,

    /// Add
    Add,

    /// Sub
    Sub,

    /// Mul
    Mul,

    /// Div
    Div,

    /// Pow
    Pow,

    /// Log
    Log,

    /// Mod
    Mod,

    /// Quot
    Quot,

    /// BitNot
    BitNot,

    /// BitAnd
    BitAnd,

    /// BitOr
    BitOr,

    /// BitXor
    BitXor,

    /// Lshift
    Lshift,

    /// Rshift
    Rshift,

    /// Eq
    Eq,

    /// Ne
    Ne,

    /// Lt
    Lt,

    /// Le
    Le,

    /// Gt
    Gt,

    /// Ge
    Ge,

    /// Near
    Near,

    /// Union
    Union,

    /// Intersect
    Intersect,

    /// Diff
    Diff,

    /// SetEq
    SetEq,

    /// Subset
    Subset,

    /// Superset
    Superset,

    /// PSubset
    PSubset,

    /// PSuperset
    PSuperset,

    /// In
    In,

    /// NotIn
    NotIn,

    /// Ni
    Ni,

    /// NotNi
    NotNi,

    /// Bool
    Bool,

    /// Not
    Not,

    /// And
    And,

    /// Or
    Or,

    /// Id
    Id,

    /// Transp
    Transp,

    /// Cartesian
    Cartesian,

    /// Reverse
    Reverse,

    /// Uniques
    Uniques,

    /// Items
    Items,

    /// Keys
    Keys,

    /// Values
    Values,

    /// Enumerate
    Enumerate,

    /// Flatten
    Flatten,

    /// ToList
    ToList,

    /// Arange
    Arange,

    /// Parse
    Parse,

    /// Str
    Str,

    /// Re
    Re,

    /// Fmt
    Fmt,

    /// Card
    Card,

    /// Size
    Size,

    /// Sum
    Sum,

    /// Prod
    Prod,

    /// Avg
    Avg,

    /// Slide
    Slide,

    /// Stride
    Stride,

    /// Chunks
    Chunks,

    /// Repeat
    Repeat,

    /// Cat
    Cat,

    /// Push
    Push,

    /// At
    At,

    /// Del
    Del,

    /// Lookup
    Lookup,

    /// Cast
    Cast,

    /// Uncast
    Uncast,

    /// Fold
    Fold,

    /// Map
    Map,

    /// Filter
    Filter,

    /// Count
    Count,

    /// Each
    Each,

    /// Sort
    Sort,

    /// Find
    Find,

    /// FindPtr
    FindPtr,

    /// FindIdx
    FindIdx,

    /// Min
    Min,

    /// Max
    Max,

    /// Argmin
    Argmin,

    /// Argmax
    Argmax,

    /// Recur
    Recur,

    /// Unfold
    Unfold,

    /// Op
    Op,

    /// Bind
    Bind,

    /// Link
    Link,

    /// Capture
    Capture,

    /// Refer
    Refer,

    /// Any
    Any,

    /// All
    All,

    /// Saturate
    Saturate,

    /// Pipe
    Pipe,

    /// Tuple
    Tuple,

    /// Fork
    Fork,

    /// Flip
    Flip,

    /// Dbg
    Dbg,

    /// Eval
    Eval,

    /// Try
    Try,

    /// Kwrd
    Kwrd,

    /// Prms
    Prms,

    /// Q
    Q,

    /// D
    D,

    /// Err
    Err,

    /// Trace
    Trace,

    /// PreProc
    PreProc,

    _count
};

namespace detail
{
bool isBinary(Keyword const& k);
bool isBoolean(Keyword const& k);
} // namespace detail


} // namespace lang
} // namespace zmbt



#endif // ZMBT_MODEL_KEYWORD_HPP_
