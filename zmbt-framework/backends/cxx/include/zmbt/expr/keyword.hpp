/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/expr/templates/zmbt-framework/backends/cxx/include/zmbt/expr/keyword.hpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */

#ifndef ZMBT_EXPR_KEYWORD_HPP_
#define ZMBT_EXPR_KEYWORD_HPP_

#include <boost/json.hpp>

#include "zmbt/reflect.hpp"

#ifndef ZMBT_KEYWORD_PREFIX
    #define ZMBT_KEYWORD_PREFIX ":"
#endif


namespace zmbt {
namespace lang {


/// ZMBT Expression keyword
enum class Keyword
{
    Undefined,

    /// literal
    Literal,

    /// void
    Void,

    /// noop
    Noop,

    /// null
    Null,

    /// true
    True,

    /// false
    False,

    /// pi
    Pi,

    /// e
    E,

    /// inf
    Inf,

    /// eps
    Eps,

    /// nan
    NaN,

    /// thread
    Thread,

    /// sin
    Sin,

    /// cos
    Cos,

    /// tan
    Tan,

    /// asin
    Asin,

    /// acos
    Acos,

    /// atan
    Atan,

    /// sinh
    Sinh,

    /// cosh
    Cosh,

    /// tanh
    Tanh,

    /// asinh
    Asinh,

    /// acosh
    Acosh,

    /// atanh
    Atanh,

    /// exp
    Exp,

    /// erf
    Erf,

    /// erfc
    Erfc,

    /// gamma
    Gamma,

    /// abs
    Abs,

    /// ceil
    Ceil,

    /// floor
    Floor,

    /// round
    Round,

    /// sqrt
    Sqrt,

    /// sign
    Sign,

    /// neg
    Neg,

    /// add
    Add,

    /// sub
    Sub,

    /// mul
    Mul,

    /// div
    Div,

    /// pow
    Pow,

    /// log
    Log,

    /// mod
    Mod,

    /// quot
    Quot,

    /// b-not
    BitNot,

    /// b-and
    BitAnd,

    /// b-or
    BitOr,

    /// b-xor
    BitXor,

    /// b-lshift
    BitLshift,

    /// b-rshift
    BitRshift,

    /// eq
    Eq,

    /// ne
    Ne,

    /// lt
    Lt,

    /// le
    Le,

    /// gt
    Gt,

    /// ge
    Ge,

    /// approx
    Approx,

    /// union
    Union,

    /// intersect
    Intersect,

    /// set-diff
    Diff,

    /// set-eq
    SetEq,

    /// subset
    Subset,

    /// superset
    Superset,

    /// p-subset
    ProperSubset,

    /// p-superset
    ProperSuperset,

    /// in
    In,

    /// not-in
    NotIn,

    /// ni
    Ni,

    /// not-ni
    NotNi,

    /// bool
    Bool,

    /// not
    Not,

    /// and
    And,

    /// or
    Or,

    /// id
    Id,

    /// transp
    Transp,

    /// cartesian
    Cartesian,

    /// reverse
    Reverse,

    /// uniques
    Uniques,

    /// items
    Items,

    /// keys
    Keys,

    /// values
    Values,

    /// enumerate
    Enumerate,

    /// flatten
    Flatten,

    /// to-list
    ToList,

    /// arange
    Arange,

    /// parse
    Parse,

    /// serialize
    Serialize,

    /// re
    Re,

    /// format
    Format,

    /// card
    Card,

    /// size
    Size,

    /// sum
    Sum,

    /// prod
    Prod,

    /// avg
    Avg,

    /// slide
    Slide,

    /// stride
    Stride,

    /// chunks
    Chunks,

    /// repeat
    Repeat,

    /// concat
    Concat,

    /// push
    Push,

    /// at
    At,

    /// delete
    Delete,

    /// lookup
    Lookup,

    /// c
    C,

    /// decorate
    Decorate,

    /// undecorate
    Undecorate,

    /// reduce
    Reduce,

    /// map
    Map,

    /// filter
    Filter,

    /// count
    Count,

    /// each
    Each,

    /// sort
    Sort,

    /// find
    Find,

    /// find-ptr
    FindPtr,

    /// find-idx
    FindIdx,

    /// min
    Min,

    /// max
    Max,

    /// argmin
    Argmin,

    /// argmax
    Argmax,

    /// recur
    Recur,

    /// unfold
    Unfold,

    /// overload
    Overload,

    /// bind
    Bind,

    /// any
    Any,

    /// all
    All,

    /// saturate
    Saturate,

    /// compose
    Compose,

    /// fork
    Fork,

    /// flip
    Flip,

    /// try
    Try,

    /// try-catch
    TryCatch,

    /// default
    Default,

    /// error
    Error,

    _count
};

namespace detail
{
bool isBinary(Keyword const& k);
bool isBoolean(Keyword const& k);
} // namespace detail


} // namespace lang
} // namespace zmbt



#endif // ZMBT_MODEL_KEYWORD_HPP_
