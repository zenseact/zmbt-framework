/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/expr/templates/zmbt-framework/backends/cxx/include/zmbt/expr/eval_impl.hpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */

#ifndef ZMBT_EXPR_EVAL_IMPL_HPP_
#define ZMBT_EXPR_EVAL_IMPL_HPP_


#include "expression.hpp"
#include "eval_context.hpp"
#include "eval_params.hpp"
#include "eval_validator.hpp"
#include "keyword.hpp"
#include "keyword_info.hpp"

namespace zmbt {
namespace lang {

template <Keyword K>
struct EvalImpl; // specializations shall use CRTP : public EvalImplBase<K>
// {
    // Expression impl(EvalContext const& context) const;
// };


template <Keyword K, class Validator = EvalValidator<K>>
class EvalImplBase : public FixedEvalParams<K>
{
  public:

    EvalImplBase(Expression const& e, Expression const& x) : FixedEvalParams<K>(e, x) {}

    Expression operator()(EvalContext const& context) &&
    {
        auto const v = Validator{this->lhs(), this->rhs()};
        if (v.is_invalid()) return v.status();

        auto const result = static_cast<EvalImpl<K> const*>(this)->impl(context++);
        context.log.push(this->self(), this->x(), result, context.depth);
        return result;
    }
};

template <Keyword K>
Expression dispatch_eval(Expression const& self, Expression const& x, EvalContext const& context);


}  // namespace lang
}  // namespace zmbt

#endif
