/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * app: codegen.expr
 * template: codegen/mdm/templates/model_definition.hpp
 *
 * How to update:
 * 1. Update the template
 * 2. Run `python -m codegen` in the project root
 * 3. Commit changes
 */


#ifndef ZMBT_MAPPING_MODEL_DEFINITION_HPP_
#define ZMBT_MAPPING_MODEL_DEFINITION_HPP_

#include "model_definition_helper.hpp"



namespace zmbt {
namespace mapping {

/// Mapping model definition machine
class ModelDefinition
{


    /// Base node class
    class BaseTransition;

    friend class SignalMapping;

    struct N_Term;

    // Transition templates
    /// T_Alias transition
    template <class Target>
    struct T_Alias;
    /// T_And transition
    template <class Target>
    struct T_And;
    /// T_As transition
    template <class Target>
    struct T_As;
    /// T_At transition
    template <class Target>
    struct T_At;
    /// T_Description transition
    template <class Target>
    struct T_Description;
    /// T_Expect transition
    template <class Target>
    struct T_Expect;
    /// T_FilterProperty transition
    template <class Target>
    struct T_FilterProperty;
    /// T_FilterSignal transition
    template <class Target>
    struct T_FilterSignal;
    /// T_Inject transition
    template <class Target>
    struct T_Inject;
    /// T_OnTrigger transition
    template <class Target>
    struct T_OnTrigger;
    /// T_Or transition
    template <class Target>
    struct T_Or;
    /// T_Pairwise transition
    template <class Target>
    struct T_Pairwise;
    /// T_ParamRow transition
    template <class Target>
    struct T_ParamRow;
    /// T_Parametrize transition
    template <class Target>
    struct T_Parametrize;
    /// T_PostRun transition
    template <class Target>
    struct T_PostRun;
    /// T_PreRun transition
    template <class Target>
    struct T_PreRun;
    /// T_Prod transition
    template <class Target>
    struct T_Prod;
    /// T_Repeat transition
    template <class Target>
    struct T_Repeat;
    /// T_Test transition
    template <class Target>
    struct T_Test;
    /// T_TestComment transition
    template <class Target>
    struct T_TestComment;
    /// T_TestRow transition
    template <class Target>
    struct T_TestRow;
    /// T_Via transition
    template <class Target>
    struct T_Via;
    /// T_Zip transition
    template <class Target>
    struct T_Zip;

// NODES forward declarations
    /// N_Descr node
    class N_Descr;
    /// N_Post node
    class N_Post;
    /// N_Pre node
    class N_Pre;
    /// N_ParamTable node
    class N_ParamTable;
    /// N_Param node
    class N_Param;
    /// N_TestTable node
    class N_TestTable;
    /// N_Test node
    class N_Test;
    /// N_Cnl node
    class N_Cnl;
    /// N_CnlConj node
    class N_CnlConj;
    /// N_CnlDisj node
    class N_CnlDisj;
    /// N_CnlEnd node
    class N_CnlEnd;
    /// N_Alias node
    class N_Alias;
    /// N_Via node
    class N_Via;
    /// N_Decor node
    class N_Decor;
    /// N_Filter node
    class N_Filter;
    /// N_CnlEndConj node
    class N_CnlEndConj;
    /// N_AliasConj node
    class N_AliasConj;
    /// N_ViaConj node
    class N_ViaConj;
    /// N_DecorConj node
    class N_DecorConj;
    /// N_FilterConj node
    class N_FilterConj;
    /// N_CnlEndDisj node
    class N_CnlEndDisj;
    /// N_AliasDisj node
    class N_AliasDisj;
    /// N_ViaDisj node
    class N_ViaDisj;
    /// N_DecorDisj node
    class N_DecorDisj;
    /// N_FilterDisj node
    class N_FilterDisj;
    /// N_Repeat node
    class N_Repeat;
    /// N_Main node
    class N_Main;

};


}  // namespace mapping
}  // namespace zmbt

#endif
