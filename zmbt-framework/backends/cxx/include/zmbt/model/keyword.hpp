
/**
 * \file
 * \copyright (c) Copyright 2024-2025 Zenseact AB
 * \license SPDX-License-Identifier: Apache-2.0
 *
 * \details Autogenerated file - do not change!
 *
 * How to update:
 * 1. Update the template at `templates/expr/keyword.hpp`
 * 2. Update the keyword data at `templates/expr/keywords.yaml`
 * 3. Regenerate file with `bazel run //templates/expr:keyword_hpp > zmbt-framework/backends/cxx/include/zmbt/model/keyword.hpp`
 * 4. Commit changes
 */

#ifndef ZMBT_MODEL_keyword.hpp_
#define ZMBT_MODEL_keyword.hpp_

#include <boost/json.hpp>

#include "zmbt/reflect.hpp"

#ifndef ZMBT_KEYWORD_PREFIX
    #define ZMBT_KEYWORD_PREFIX ":"
#endif


namespace zmbt {

/// ZMBT Expression keyword
enum class Keyword
{

    /// noop
    Noop,

    /// true
    True,

    /// false
    False,

    /// null
    Null,

    /// pi
    Pi,

    /// e
    E,

    /// inf
    Inf,

    /// eps
    Eps,

    /// nan
    NaN,

    /// id
    Id,

    /// bool
    Bool,

    /// nil
    Nil,

    /// not
    Not,

    /// neg
    Neg,

    /// abs
    Abs,

    /// sign
    Sign,

    /// ceil
    Ceil,

    /// floor
    Floor,

    /// b-not
    BitNot,

    /// concat
    Concat,

    /// union
    Union,

    /// intersect
    Intersect,

    /// set-diff
    Diff,

    /// cartesian
    Cartesian,

    /// transp
    Transp,

    /// set
    Set,

    /// list
    List,

    /// card
    Card,

    /// size
    Size,

    /// sqrt
    Sqrt,

    /// sin
    Sin,

    /// cos
    Cos,

    /// tan
    Tan,

    /// asin
    Asin,

    /// acos
    Acos,

    /// atan
    Atan,

    /// sinh
    Sinh,

    /// cosh
    Cosh,

    /// tanh
    Tanh,

    /// asinh
    Asinh,

    /// acosh
    Acosh,

    /// atanh
    Atanh,

    /// exp
    Exp,

    /// erf
    Erf,

    /// erfc
    Erfc,

    /// gamma
    Gamma,

    /// round
    Round,

    /// sum
    Sum,

    /// prod
    Prod,

    /// eq
    Eq,

    /// ne
    Ne,

    /// lt
    Lt,

    /// le
    Le,

    /// gt
    Gt,

    /// ge
    Ge,

    /// ni
    Ni,

    /// not-ni
    NotNi,

    /// and
    And,

    /// or
    Or,

    /// add
    Add,

    /// sub
    Sub,

    /// sub-from
    SubFrom,

    /// mul
    Mul,

    /// div
    Div,

    /// div-from
    DivFrom,

    /// pow
    Pow,

    /// pow-from
    PowFrom,

    /// log
    Log,

    /// log-from
    LogFrom,

    /// mod
    Mod,

    /// mod-from
    ModFrom,

    /// quot
    Quot,

    /// quot-from
    QuotFrom,

    /// b-and
    BitAnd,

    /// b-or
    BitOr,

    /// b-xor
    BitXor,

    /// b-lshift
    BitLshift,

    /// b-lshift-from
    BitLshiftFrom,

    /// b-rshift
    BitRshift,

    /// b-rshift-from
    BitRshiftFrom,

    /// slide
    Slide,

    /// stride
    Stride,

    /// repeat
    Repeat,

    /// re
    Re,

    /// at
    At,

    /// set-eq
    SetEq,

    /// subset
    Subset,

    /// superset
    Superset,

    /// p-subset
    ProperSubset,

    /// p-superset
    ProperSuperset,

    /// in
    In,

    /// not-in
    NotIn,

    /// map
    Map,

    /// filter
    Filter,

    /// count
    Count,

    /// sort
    Sort,

    /// min
    Min,

    /// max
    Max,

    /// argmin
    Argmin,

    /// argmax
    Argmax,

    /// recur
    Recur,

    /// apply
    Apply,

    /// bind
    Bind,

    /// reduce
    Reduce,

    /// any
    Any,

    /// all
    All,

    /// saturate
    Saturate,

    /// compose
    Compose,

    /// approx
    Approx,

    /// Internal utility value
    Undefined
};

// Boost JSON conversion from Keyword
void tag_invoke(boost::json::value_from_tag const&, boost::json::value&, Keyword const& t);

// Boost JSON conversion to Keyword
Keyword tag_invoke(boost::json::value_to_tag<Keyword> const&, boost::json::value const&);


} // namespace zmbt



#endif // ZMBT_MAPPING_keyword.hpp_

